namespace VBScript {
	/* methods */
	object.Add();
	object.BuildPath(path, name);
	object.Clear();
	object.Close();
	object.Copy(destination[, overwrite]);
	object.CopyFile(source, destination[, overwrite]);
	object.CopyFolder(source, destination[, overwrite]);
	object.CreateFolder(foldername);
	object.CreateTextFile(filename[, overwrite[, unicode]]);
	object.Delete(force);
	object.DeleteFile(filespec[, force]);
	object.DeleteFolder(folderspec[, force]);
	object.DriveExists(drivespec);
	object.Execute(string);
	object.Exists(key);
	object.FileExists(filespec);
	object.FolderExists(folderspec);
	object.GetAbsolutePathName(pathspec);
	object.GetBaseName(path);
	object.GetDrive(drivespec);
	object.GetDriveName(path);
	object.GetExtensionName(path);
	object.GetFile(filespec);
	object.GetFileName(pathspec);
	object.GetFolder(folderspec);
	object.GetParentFolderName(path);
	object.GetSpecialFolder(folderspec);
	object.GetTempName();
	object.Items();
	object.Key();
	object.Keys();
	object.Move(destination);
	object.MoveFile(source, destination);
	object.MoveFolder(source, destination);
	object.OpenAsTextStream([iomode, [format]]);
	object.OpenTextFile(filename[, iomode[, create[, format]]]);
	object.Raise(number, source, description, helpfile, helpcontext);
	object.Read(characters);
	object.ReadAll();
	object.ReadLine();
	object.Remove(key);
	object.RemoveAll();
	object.Replace(string1, string2);
	object.Skip(characters);
	object.SkipLine();
	object.Test(string);
	object.Write(string);
	object.WriteBlankLines(lines);
	object.WriteLine([string]);
	/* functions */
	global.Abs(number);
	global.Array(arglist);
	global.Asc(string);
	global.Atn(number);
	global.CBool(expression);
	global.CByte(expression);
	global.CCur(expression);
	global.CDate(date);
	global.CDbl(expression);
	global.CInt(expression);
	global.CLng(expression);
	global.CSng(expression);
	global.CStr(expression);
	global.Chr(charcode);
	global.Cos(number);
	global.CreateObject(servername.typename [, location]);
	global.Date();
	global.DateAdd(interval, number, date);
	global.DateDiff(interval, date1, date2 [,firstdayofweek[, firstweekofyear]]);
	global.DatePart(interval, date[, firstdayofweek[, firstweekofyear]]);
	global.DateSerial(year, month, day);
	global.DateValue(date);
	global.Day(date);
	global.Eval(expression);
	global.Exp(number);
	global.Filter(InputStrings, Value[, Include[, Compare]]);
	global.FormatCurrency(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]);
	global.FormatDateTime(Date[, NamedFormat]);
	global.FormatNumber(Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]);
	global.FormatPercent(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]]);
	global.GetLocale();
	global.GetObject([pathname] [, class]);
	global.Hex(number);
	global.Hour(time);
	global.InStr([start, ]string1, string2[, compare]);
	global.InStrRev(string1, string2[, start[, compare]]);
	global.InputBox(prompt[, title][, default][, xpos][, ypos][, helpfile, context]);
	global.Int(number);
	global.IsArray(varname);
	global.IsDate(expression);
	global.IsEmpty(expression);
	global.IsNull(expression);
	global.IsNumeric(expression);
	global.IsObject(expression);
	global.Join(list[, delimiter]);
	global.LBound(arrayname[, dimension]);
	global.LCase(string);
	global.LTrim(string);
	global.Left(string, length);
	global.Len(string | varname);
	global.LoadPicture(picturename);
	global.Log(number);
	global.Mid(string, start[, length]);
	global.Minute(time);
	global.Month(date);
	global.MonthName(month[, abbreviate]);
	global.MsgBox(prompt[, buttons][, title][, helpfile, context]);
	global.Now();
	global.Oct(number);
	global.RGB(red, green, blue);
	global.Replace(expression, find, replacewith[, start[, count[, compare]]]);
	global.Right(string, length);
	global.Rnd([number]);
	global.Round(expression[, numdecimalplaces]);
	global.ScriptEngine;
	global.ScriptEngineBuildVersion;
	global.ScriptEngineMajorVersion;
	global.ScriptEngineMinorVersion;
	global.Second(time);
	global.SetLocale(lcid);
	global.Sgn(number);
	global.Sin(number);
	global.Space(number);
	global.Split(expression[, delimiter[, count[, compare]]]);
	global.Sqr(number);
	global.StrComp(string1, string2[, compare]);
	global.StrReverse(string1);
	global.String(number, character);
	global.Tan(number);
	global.Time();
	global.TimeSerial(hour, minute, second);
	global.TimeValue(time);
	global.Timer();
	global.TypeName(varname);
	global.UBound(arrayname[, dimension]);
	global.UCase(string);
	global.VarType(varname);
	global.Weekday(date, [firstdayofweek]);
	global.WeekdayName(weekday, abbreviate, firstdayofweek);
	global.Year(date);
	/* properties */
	object.AtEndOfLine {};
	object.AtEndOfStream {};
	object.Attributes {};
	object.AvailableSpace {};
	object.Column {};
	object.CompareMode {};
	object.Count {};
	object.DateCreated {};
	object.DateLastAccessed {};
	object.DateLastModified {};
	object.Description {};
	object.Drive {};
	object.DriveLetter {};
	object.DriveType {};
	object.Drives {};
	object.FileSystem {};
	object.Files {};
	object.FirstIndex {};
	object.FreeSpace {};
	object.Global {};
	object.HelpContext {};
	object.HelpFile {};
	object.IgnoreCase {};
	object.IsReady {};
	object.IsRootFolder {};
	object.Item(key) {};
	object.Length {};
	object.Line {};
	object.Name {};
	object.Number {};
	object.ParentFolder {};
	object.Path {};
	object.Pattern {};
	object.RootFolder {};
	object.SerialNumber {};
	object.ShareName {};
	object.ShortName {};
	object.ShortPath {};
	object.Size {};
	object.Source {};
	object.SubFolders {};
	object.TotalSize {};
	object.Type {};
	object.Value {};
	object.VolumeName {};
}
