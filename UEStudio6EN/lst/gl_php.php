<?php
define (FALSE, 0);
define (NULL, 0);
define (TRUE, 0);
define (__LINE__, 0);
define (__FILE__, 0);
define (__FUNCTION__, 0);
define (__CLASS__, 0);
define (__METHOD__, 0);
define (PHP_VERSION, 0);
define (PHP_OS, 0);
define (DEFAULT_INCLUDE_PATH, 0);
define (PEAR_INSTALL_DIR, 0);
define (PEAR_EXTENSION_DIR, 0);
define (PHP_EXTENSION_DIR, 0);
define (PHP_BINDIR, 0);
define (PHP_LIBDIR, 0);
define (PHP_DATADIR, 0);
define (PHP_SYSCONFDIR, 0);
define (PHP_LOCALSTATEDIR, 0);
define (PHP_CONFIG_FILE_PATH, 0);
define (PHP_OUTPUT_HANDLER_START, 0);
define (PHP_OUTPUT_HANDLER_CONT, 0);
define (PHP_OUTPUT_HANDLER_END, 0);
define (E_ERROR, 0);
define (E_WARNING, 0);
define (E_PARSE, 0);
define (E_NOTICE, 0);
define (E_CORE_ERROR, 0);
define (E_CORE_WARNING, 0);
define (E_COMPILE_ERROR, 0);
define (E_COMPILE_WARNING, 0);
define (E_USER_ERROR, 0);
define (E_USER_WARNING, 0);
define (E_USER_NOTICE, 0);
define (E_ALL, 0);
define (ABDAY_1, 0);
define (ABDAY_2, 0);
define (ABDAY_3, 0);
define (ABDAY_4, 0);
define (ABDAY_5, 0);
define (ABDAY_6, 0);
define (ABDAY_7, 0);
define (ABMON_1, 0);
define (ABMON_10, 0);
define (ABMON_11, 0);
define (ABMON_12, 0);
define (ABMON_2, 0);
define (ABMON_3, 0);
define (ABMON_4, 0);
define (ABMON_5, 0);
define (ABMON_6, 0);
define (ABMON_7, 0);
define (ABMON_8, 0);
define (ABMON_9, 0);
define (ALT_DIGITS, 0);
define (AM_STR, 0);
define (ASSERT_ACTIVE, 0);
define (ASSERT_BAIL, 0);
define (ASSERT_CALLBACK, 0);
define (ASSERT_QUIET_EVAL, 0);
define (ASSERT_WARNING, 0);
define (CASE_LOWER, 0);
define (CASE_UPPER, 0);
define (CHAR_MAX, 0);
define (CODESET, 0);
define (CONNECTION_ABORTED, 0);
define (CONNECTION_NORMAL, 0);
define (CONNECTION_TIMEOUT, 0);
define (COUNT_NORMAL, 0);
define (COUNT_RECURSIVE, 0);
define (CREDITS_ALL, 0);
define (CREDITS_DOCS, 0);
define (CREDITS_FULLPAGE, 0);
define (CREDITS_GENERAL, 0);
define (CREDITS_GROUP, 0);
define (CREDITS_MODULES, 0);
define (CREDITS_QA, 0);
define (CREDITS_SAPI, 0);
define (CRNCYSTR, 0);
define (CRYPT_BLOWFISH, 0);
define (CRYPT_EXT_DES, 0);
define (CRYPT_MD5, 0);
define (CRYPT_SALT_LENGTH, 0);
define (CRYPT_STD_DES, 0);
define (CURRENCY_SYMBOL, 0);
define (DAY_1, 0);
define (DAY_2, 0);
define (DAY_3, 0);
define (DAY_4, 0);
define (DAY_5, 0);
define (DAY_6, 0);
define (DAY_7, 0);
define (DECIMAL_POINT, 0);
define (DIRECTORY_SEPARATOR, 0);
define (D_FMT, 0);
define (D_T_FMT, 0);
define (ENT_COMPAT, 0);
define (ENT_NOQUOTES, 0);
define (ENT_QUOTES, 0);
define (ERA, 0);
define (ERA_D_FMT, 0);
define (ERA_D_T_FMT, 0);
define (ERA_T_FMT, 0);
define (ERA_YEAR, 0);
define (EXTR_IF_EXISTS, 0);
define (EXTR_OVERWRITE, 0);
define (EXTR_PREFIX_ALL, 0);
define (EXTR_PREFIX_IF_EXISTS, 0);
define (EXTR_PREFIX_INVALID, 0);
define (EXTR_PREFIX_SAME, 0);
define (EXTR_SKIP, 0);
define (FRAC_DIGITS, 0);
define (GROUPING, 0);
define (HTML_ENTITIES, 0);
define (HTML_SPECIALCHARS, 0);
define (INFO_ALL, 0);
define (INFO_CONFIGURATION, 0);
define (INFO_CREDITS, 0);
define (INFO_ENVIRONMENT, 0);
define (INFO_GENERAL, 0);
define (INFO_LICENSE, 0);
define (INFO_MODULES, 0);
define (INFO_VARIABLES, 0);
define (INI_ALL, 0);
define (INI_PERDIR, 0);
define (INI_SYSTEM, 0);
define (INI_USER, 0);
define (INT_CURR_SYMBOL, 0);
define (INT_FRAC_DIGITS, 0);
define (LC_ALL, 0);
define (LC_COLLATE, 0);
define (LC_CTYPE, 0);
define (LC_MESSAGES, 0);
define (LC_MONETARY, 0);
define (LC_NUMERIC, 0);
define (LC_TIME, 0);
define (LOCK_EX, 0);
define (LOCK_NB, 0);
define (LOCK_SH, 0);
define (LOCK_UN, 0);
define (LOG_ALERT, 0);
define (LOG_AUTH, 0);
define (LOG_AUTHPRIV, 0);
define (LOG_CONS, 0);
define (LOG_CRIT, 0);
define (LOG_CRON, 0);
define (LOG_DAEMON, 0);
define (LOG_DEBUG, 0);
define (LOG_EMERG, 0);
define (LOG_ERR, 0);
define (LOG_INFO, 0);
define (LOG_KERN, 0);
define (LOG_LOCAL0, 0);
define (LOG_LOCAL1, 0);
define (LOG_LOCAL2, 0);
define (LOG_LOCAL3, 0);
define (LOG_LOCAL4, 0);
define (LOG_LOCAL5, 0);
define (LOG_LOCAL6, 0);
define (LOG_LOCAL7, 0);
define (LOG_LPR, 0);
define (LOG_MAIL, 0);
define (LOG_NDELAY, 0);
define (LOG_NEWS, 0);
define (LOG_NOTICE, 0);
define (LOG_NOWAIT, 0);
define (LOG_ODELAY, 0);
define (LOG_PERROR, 0);
define (LOG_PID, 0);
define (LOG_SYSLOG, 0);
define (LOG_USER, 0);
define (LOG_UUCP, 0);
define (LOG_WARNING, 0);
define (MON_1, 0);
define (MON_10, 0);
define (MON_11, 0);
define (MON_12, 0);
define (MON_2, 0);
define (MON_3, 0);
define (MON_4, 0);
define (MON_5, 0);
define (MON_6, 0);
define (MON_7, 0);
define (MON_8, 0);
define (MON_9, 0);
define (MON_DECIMAL_POINT, 0);
define (MON_GROUPING, 0);
define (MON_THOUSANDS_SEP, 0);
define (M_1_PI, 0);
define (M_2_PI, 0);
define (M_2_SQRTPI, 0);
define (M_E, 0);
define (M_LN10, 0);
define (M_LN2, 0);
define (M_LOG10E, 0);
define (M_LOG2E, 0);
define (M_PI, 0);
define (M_PI_2, 0);
define (M_PI_4, 0);
define (M_SQRT1_2, 0);
define (M_SQRT2, 0);
define (NEGATIVE_SIGN, 0);
define (NOEXPR, 0);
define (NOSTR, 0);
define (N_CS_PRECEDES, 0);
define (N_SEP_BY_SPACE, 0);
define (N_SIGN_POSN, 0);
define (PATHINFO_BASENAME, 0);
define (PATHINFO_DIRNAME, 0);
define (PATHINFO_EXTENSION, 0);
define (PM_STR, 0);
define (POSITIVE_SIGN, 0);
define (P_CS_PRECEDES, 0);
define (P_SEP_BY_SPACE, 0);
define (P_SIGN_POSN, 0);
define (RADIXCHAR, 0);
define (SEEK_CUR, 0);
define (SEEK_END, 0);
define (SEEK_SET, 0);
define (SORT_ASC, 0);
define (SORT_DESC, 0);
define (SORT_NUMERIC, 0);
define (SORT_REGULAR, 0);
define (SORT_STRING, 0);
define (STR_PAD_BOTH, 0);
define (STR_PAD_LEFT, 0);
define (STR_PAD_RIGHT, 0);
define (THOUSANDS_SEP, 0);
define (THOUSEP, 0);
define (T_FMT, 0);
define (T_FMT_AMPM, 0);
define (YESEXPR, 0);
define (YESSTR, 0);
function Z_LVAL(zval);
function Z_DVAL(zval);
function Z_STRVAL(zval);
function Z_STRLEN(zval);
function Z_ARRVAL(zval);
function Z_LVAL_P(zval);
function Z_DVAL_P(zval);
function Z_STRVAL_P(zval_p);
function Z_STRLEN_P(zval_p);
function Z_ARRVAL_P(zval_p);
function Z_LVAL_PP(zval_pp);
function Z_DVAL_PP(zval_pp);
function Z_STRVAL_PP(zval_pp);
function Z_STRLEN_PP(zval_pp);
function Z_ARRVAL_PP(zval_pp);
function require(filename);
function include(filename);
function require_once(filename);
function include_once(filename);
function apache_child_terminate(void);
function apache_lookup_uri(string filename);
function apache_note(string note_name [, string note_value]);
function apache_request_headers(void);
function apache_response_headers(void);
function apache_setenv(string variable, string value [, bool walk_to_top]);
function ascii2ebcdic(string ascii_str);
function ebcdic2ascii(string ebcdic_str);
function getallheaders(void);
function virtual(string filename);
function array_change_key_case(array input [, int case]);
function array_chunk(array input, int size [, bool preserve_keys]);
function array_combine(array keys, array values);
function array_count_values(array input);
function array_diff_assoc(array array1, array array2 [, array ...]);
function array_diff_uassoc(array array1, array array2 [, array ..., callback key_compare_func]);
function array_diff(array array1, array array2 [, array ...]);
function array_fill(int start_index, int num, mixed value);
function array_filter(array input [, callback callback]);
function array_flip(array trans);
function array_intersect_assoc(array array1, array array2 [, array ...]);
function array_intersect(array array1, array array2 [, array ...]);
function array_key_exists(mixed key, array search);
function array_keys(array input [, mixed search_value]);
function array_map(mixed callback, array arr1 [, array ...]);
function array_merge_recursive(array array1, array array2 [, array ...]);
function array_merge(array array1, array array2 [, array ...]);
function array_multisort(array ar1 [, mixed arg [, mixed ... [, array ...]]]);
function array_pad(array input, int pad_size, mixed pad_value);
function array_pop(array array);
function array_push(array array, mixed var [, mixed ...]);
function array_rand(array input [, int num_req]);
function array_reduce(array input, callback function [, int initial]);
function array_reverse(array array [, bool preserve_keys]);
function array_search(mixed needle, array haystack [, bool strict]);
function array_shift(array array);
function array_slice(array array, int offset [, int length]);
function array_splice(array input, int offset [, int length [, array replacement]]);
function array_sum(array array);
function array_udiff_assoc(array array1, array array2 [, array ..., callback data_compare_func]);
function array_udiff_uassoc(array array1, array array2 [, array ..., callback data_compare_func, callback key_compare_func]);
function array_udiff(array array1, array array2 [, array ..., callback data_compare_func]);
function array_unique(array array);
function array_unshift(array array, mixed var [, mixed ...]);
function array_values(array input);
function array_walk(array arr, string func, mixed userdata);
function array_walk_recursive();
function array([mixed ...]);
function arsort(array array [, int sort_flags]);
function asort(array array [, int sort_flags]);
function compact(mixed varname [, mixed ...]);
function count(mixed var);
function current(array array);
function each(array array);
function end(array array);
function extract(array var_array [, int extract_type [, string prefix]]);
function in_array(mixed needle, array haystack, bool strict);
function key(array array);
function krsort(array array [, int sort_flags]);
function ksort(array array [, int sort_flags]);
function list(mixed ...);
function natcasesort(array array);
function natsort(array array);
function next(array array);
function pos(array array);
function prev(array array);
function range(int low, int high);
function reset(array array);
function rsort(array array [, int sort_flags]);
function shuffle(array array);
function sizeof(array array);
function sort(array array [, int sort_flags]);
function uasort(array array, function cmp_function);
function uksort(array array, function cmp_function);
function usort(array array, string cmp_function);
function aspell_check_raw(int dictionary_link, string word);
function aspell_check(int dictionary_link, string word);
function aspell_new(string master, string personal);
function aspell_suggest(int dictionary_link, string word);
function bcadd(string left operand, string right operand [, int scale]);
function bccomp(string left operand, string right operand [, int scale]);
function bcdiv(string left operand, string right operand [, int scale]);
function bcmod(string left operand, string modulus);
function bcmul(string left operand, string right operand [, int scale]);
function bcpow(string x, string y [, int scale]);
function bcpowmod(string x, string y, string modulus [, int scale]);
function bcscale(int scale);
function bcsqrt(string operand, int scale);
function bcsub(string left operand, string right operand [, int scale]);
function bzclose(resource bz);
function bzcompress(string source [, int blocksize [, int workfactor]]);
function bzdecompress(string source [, int small]);
function bzerrno(resource bz);
function bzerror(resource bz);
function bzerrstr(resource bz);
function bzflush(resource bz);
function bzopen(string filename, string mode);
function bzread(resource bz [, int length]);
function bzwrite(resource bz, string data [, int length]);
function cal_days_in_month(int calendar, int month, int year);
function cal_from_jd(int jd, int calendar);
function cal_info([int calendar]);
function cal_to_jd(int calendar, int month, int day, int year);
function easter_date(int year);
function easter_days(int year);
function frenchtojd(int month, int day, int year);
function gregoriantojd(int month, int day, int year);
function jddayofweek(int julianday, int mode);
function jdmonthname(int julianday, int mode);
function jdtofrench(int juliandaycount);
function jdtogregorian(int julianday);
function jdtojewish(int julianday);
function jdtojulian(int julianday);
function jdtounix(int jday);
function jewishtojd(int month, int day, int year);
function juliantojd(int month, int day, int year);
function unixtojd([int timestamp]);
function ccvs_add(string session, string invoice, string argtype, string argval);
function ccvs_auth(string session, string invoice);
function ccvs_command(string session, string type, string argval);
function ccvs_count(string session, string type);
function ccvs_delete(string session, string invoice);
function ccvs_done(string sess);
function ccvs_init(string name);
function ccvs_lookup(string session, string invoice, int inum);
function ccvs_new(string session, string invoice);
function ccvs_report(string session, string type);
function ccvs_return(string session, string invoice);
function ccvs_reverse(string session, string invoice);
function ccvs_sale(string session, string invoice);
function ccvs_status(string session, string invoice);
function ccvs_textvalue(string session);
function ccvs_void(string session, string invoice);
function COM::COM(string module_name [, string server_name [, int codepage]]);
function VARIANT::VARIANT([mixed value [, int type [, int codepage]]]);
function com_addref(void);
function com_get(resource com_object, string property);
function com_invoke(resource com_object, string function_name [, mixed parametry funkce, ...]);
function com_isenum(object com_module);
function com_load_typelib(string typelib_name [, int case_insensitive]);
function com_load(string module name [, string server name]);
function com_propget(resource com_object, string property);
function com_propput(resource com_object, string property, mixed value);
function com_propset(resource com_object, string property, mixed value);
function com_release(void);
function com_set(resource com_object, string property, mixed value);
function call_user_method_array(string method_name, object obj [, array paramarr]);
function call_user_method(string method_name, object obj [, mixed parameter [, mixed ...]]);
function class_exists(string class_name);
function get_class_methods(string class_name);
function get_class_vars(string class_name);
function get_class(object obj);
function get_declared_classes(void);
function get_object_vars(object obj);
function get_parent_class(object obj);
function is_a(object object, string class_name);
function is_subclass_of(object obj, string superclass);
function method_exists(object object, string method_name);
function cpdf_add_annotation(int pdf_document, float llx, float lly, float urx, float ury, string title, string content [, int mode]);
function cpdf_add_outline(int pdf_document, int lastoutline, int sublevel, int open, int pagenr, string text);
function cpdf_arc(int pdf_document, float x-coor, float y-coor, float radius, float start, float end [, int mode]);
function cpdf_begin_text(int pdf_document);
function cpdf_circle(int pdf_document, float x-coor, float y-coor, float radius [, int mode]);
function cpdf_clip(int pdf_document);
function cpdf_close(int pdf_document);
function cpdf_closepath_fill_stroke(int pdf_document);
function cpdf_closepath_stroke(int pdf_document);
function cpdf_closepath(int pdf_document);
function cpdf_continue_text(int pdf_document, string text);
function cpdf_curveto(int pdf_document, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode]);
function cpdf_end_text(int pdf_document);
function cpdf_fill_stroke(int pdf_document);
function cpdf_fill(int pdf_document);
function cpdf_finalize_page(int pdf_document, int page_number);
function cpdf_finalize(int pdf_document);
function cpdf_global_set_document_limits(int maxpages, int maxfonts, int maximages, int maxannotations, int maxobjects);
function cpdf_import_jpeg(int pdf_document, string file_name, float x-coor, float y-coor, float angle, float width, float height, float x-scale, float y-scale, int gsave [, int mode]);
function cpdf_lineto(int pdf_document, float x-coor, float y-coor [, int mode]);
function cpdf_moveto(int pdf_document, float x-coor, float y-coor [, int mode]);
function cpdf_newpath(int pdf_document);
function cpdf_open(int compression [, string filename]);
function cpdf_output_buffer(int pdf_document);
function cpdf_page_init(int pdf_document, int page_number, int orientation, float height, float width [, float unit]);
function cpdf_place_inline_image(int pdf_document, int image, float x-coor, float y-coor, float angle, float width, float height [, int mode]);
function cpdf_rect(int pdf_document, float x-coor, float y-coor, float width, float height [, int mode]);
function cpdf_restore(int pdf_document);
function cpdf_rlineto(int pdf_document, float x-coor, float y-coor [, int mode]);
function cpdf_rmoveto(int pdf_document, float x-coor, float y-coor [, int mode]);
function cpdf_rotate_text(int pdfdoc, float angle);
function cpdf_rotate(int pdf_document, float angle);
function cpdf_save_to_file(int pdf_document, string filename);
function cpdf_save(int pdf_document);
function cpdf_scale(int pdf_document, float x-scale, float y-scale);
function cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode]);
function cpdf_set_char_spacing(int pdf_document, float space);
function cpdf_set_creator(string creator);
function cpdf_set_current_page(int pdf_document, int page_number);
function cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir);
function cpdf_set_font_map_file(int pdfdoc, string filename);
function cpdf_set_font(int pdf_document, string font_name, float size, string encoding);
function cpdf_set_horiz_scaling(int pdf_document, float scale);
function cpdf_set_keywords(string keywords);
function cpdf_set_leading(int pdf_document, float distance);
function cpdf_set_page_animation(int pdf_document, int transition, float duration);
function cpdf_set_subject(int pdf_document, string subject);
function cpdf_set_text_matrix(int pdf_document, array matrix);
function cpdf_set_text_pos(int pdf_document, float x-coor, float y-coor [, int mode]);
function cpdf_set_text_rendering(int pdf_document, int rendermode);
function cpdf_set_text_rise(int pdf_document, float value);
function cpdf_set_title(string title);
function cpdf_set_viewer_preferences(int pdfdoc, array preferences);
function cpdf_set_word_spacing(int pdf_document, float space);
function cpdf_setdash(int pdf_document, float white, float black);
function cpdf_setflat(int pdf_document, float value);
function cpdf_setgray_fill(int pdf_document, float value);
function cpdf_setgray_stroke(int pdf_document, float gray_value);
function cpdf_setgray(int pdf_document, float gray_value);
function cpdf_setlinecap(int pdf_document, int value);
function cpdf_setlinejoin(int pdf_document, int value);
function cpdf_setlinewidth(int pdf_document, float width);
function cpdf_setmiterlimit(int pdf_document, float value);
function cpdf_setrgbcolor_fill(int pdf_document, float red_value, float green_value, float blue_value);
function cpdf_setrgbcolor_stroke(int pdf_document, float red_value, float green_value, float blue_value);
function cpdf_setrgbcolor(int pdf_document, float red_value, float green_value, float blue_value);
function cpdf_show_xy(int pdf_document, string text, float x-coor, float y-coor [, int mode]);
function cpdf_show(int pdf_document, string text);
function cpdf_stringwidth(int pdf_document, string text);
function cpdf_stroke(int pdf_document);
function cpdf_text(int pdf_document, string text, float x-coor, float y-coor [, int mode [, float orientation [, int alignmode]]]);
function cpdf_translate(int pdf_document, float x-coor, float y-coor [, int mode]);
function crack_check([resource dictionary, string password]);
function crack_closedict([resource dictionary]);
function crack_getlastmessage(void);
function crack_opendict(string dictionary);
function curl_close(int ch);
function curl_errno(resource ch);
function curl_error(resource ch);
function curl_exec(int ch);
function curl_getinfo(resource ch [, int opt]);
function curl_init([string url]);
function curl_multi_add_handle(resource mh, resource ch);
function curl_multi_close(resource mh);
function curl_multi_exec(resource mh);
function curl_multi_getcontent(resource ch);
function curl_multi_info_read(resource mh);
function curl_multi_init(void);
function curl_multi_remove_handle(resource mh, resource ch);
function curl_multi_select(resource mh [, float timeout]);
function curl_setopt(int ch, string option, mixed value);
function curl_version(void);
function cybercash_base64_decode(string inbuff);
function cybercash_base64_encode(string inbuff);
function cybercash_decr(string wmk, string sk, string inbuff);
function cybercash_encr(string wmk, string sk, string inbuff);
function cyrus_authenticate(resource connection [, string mechlist [, string service [, string user [, int minssf [, int maxssf]]]]]);
function cyrus_bind(resource connection, array callbacks);
function cyrus_close(resource connection);
function cyrus_connect([string host [, string port [, int flags]]]);
function cyrus_query(resource connection, string query);
function cyrus_unbind(resource connection, string trigger_name);
function ctype_alnum(string text);
function ctype_alpha(string text);
function ctype_cntrl(string text);
function ctype_digit(string text);
function ctype_graph(string text);
function ctype_lower(string text);
function ctype_print(string text);
function ctype_punct(string text);
function ctype_space(string text);
function ctype_upper(string text);
function ctype_xdigit(string text);
function dba_close(resource handle);
function dba_delete(string key, resource handle);
function dba_exists(string key, resource handle);
function dba_fetch(string key, resource handle);
function dba_fetch(string key, int skip, resource handle);
function dba_firstkey(resource handle);
function dba_handlers(void);
function dba_insert(string key, string value, resource handle);
function dba_key_split(mixed key);
function dba_list(void);
function dba_nextkey(resource handle);
function dba_open(string path, string mode, string handler [, ...]);
function dba_optimize(resource handle);
function dba_popen(string path, string mode, string handler [, ...]);
function dba_replace(string key, string value, resource handle);
function dba_sync(resource handle);
function checkdate(int month, int day, int year);
function date(string format [, int timestamp]);
function getdate([int timestamp]);
function gettimeofday(void);
function gmdate(string format [, int timestamp]);
function gmmktime(int hour, int minute, int second, int month, int day, int year [, int is_dst]);
function gmstrftime(string format [, int timestamp]);
function localtime([int timestamp [, bool is_associative]]);
function microtime(void);
function mktime(int hour, int minute, int second, int month, int day, int year [, int is_dst]);
function strftime(string format [, int timestamp]);
function strtotime(string time [, int now]);
function time(void);
function dbase_add_record(int dbase_identifier, array record);
function dbase_close(int dbase_identifier);
function dbase_create(string filename, array fields);
function dbase_delete_record(int dbase_identifier, int record);
function dbase_get_header_info(int dbase_identifier);
function dbase_get_record_with_names(int dbase_identifier, int record);
function dbase_get_record(int dbase_identifier, int record);
function dbase_numfields(int dbase_identifier);
function dbase_numrecords(int dbase_identifier);
function dbase_open(string filename, int flags);
function dbase_pack(int dbase_identifier);
function dbase_replace_record(int dbase_identifier, array record, int dbase_record_number);
function dblist(void);
function dbmclose(int dbm_identifier);
function dbmdelete(int dbm_identifier, string key);
function dbmexists(int dbm_identifier, string key);
function dbmfetch(int dbm_identifier, string key);
function dbmfirstkey(int dbm_identifier);
function dbminsert(int dbm_identifier, string key, string value);
function dbmnextkey(int dbm_identifier, string key);
function dbmopen(string filename, string flags);
function dbmreplace(int dbm_identifier, string key, string value);
function dbx_close(object link_identifier);
function dbx_compare(array row_a, array row_b, string column_key [, int flags]);
function dbx_connect(mixed module, string host, string database, string username, string password [, int persistent]);
function dbx_error(object link_identifier);
function dbx_escape_string(object link_identifier, string text);
function dbx_fetch_row(object result_identifier);
function dbx_query(object link_identifier, string sql_statement [, int flags]);
function dbx_sort(object result, string user_compare_function);
function dbplus_add(resource relation, array tuple);
function dbplus_aql(string query [, string server [, string dbpath]]);
function dbplus_chdir([string newdir]);
function dbplus_close(resource relation);
function dbplus_curr(resource relation, array tuple);
function dbplus_errcode(int errno);
function dbplus_errno(void);
function dbplus_find(resource relation, array constraints, mixed tuple);
function dbplus_first(resource relation, array tuple);
function dbplus_flush(resource relation);
function dbplus_freealllocks(void);
function dbplus_freelock(resource relation, string tname);
function dbplus_freerlocks(resource relation);
function dbplus_getlock(resource relation, string tname);
function dbplus_getunique(resource relation, int uniqueid);
function dbplus_info(resource relation, string key, array);
function dbplus_last(resource relation, array tuple);
function dbplus_lockrel(resource relation);
function dbplus_next(resource relation, array);
function dbplus_open(string name);
function dbplus_prev(resource relation, array tuple);
function dbplus_rchperm(resource relation, int mask, string user, string group);
function dbplus_rcreate(string name, mixed domlist [, bool overwrite]);
function dbplus_rcrtexact(string name, resource relation, bool overwrite);
function dbplus_rcrtlike(string name, resource relation, int flag);
function dbplus_resolve(string relation_name);
function dbplus_restorepos(resource relation, array tuple);
function dbplus_rkeys(resource relation, mixed domlist);
function dbplus_ropen(string name);
function dbplus_rquery(string query, string dbpath);
function dbplus_rrename(resource relation, string name);
function dbplus_rsecindex(resource relation, mixed domlist, int type);
function dbplus_runlink(resource relation);
function dbplus_rzap(resource relation);
function dbplus_savepos(resource relation);
function dbplus_setindex(resource relation, string idx_name);
function dbplus_setindexbynumber(resource relation, int idx_number);
function dbplus_sql(string query, string server, string dbpath);
function dbplus_tcl(int sid, string script);
function dbplus_tremove(resource relation, array tuple [, array current]);
function dbplus_undo(resource relation);
function dbplus_undoprepare(resource relation);
function dbplus_unlockrel(resource relation);
function dbplus_unselect(resource relation);
function dbplus_update(resource relation, array old, array new);
function dbplus_xlockrel(resource relation);
function dbplus_xunlockrel(resource relation);
function dio_close(resource fd);
function dio_fcntl(resource fd, int cmd [, mixed arg]);
function dio_open(string filename, int flags [, int mode]);
function dio_read(resource fd [, int n]);
function dio_seek(resource fd, int pos, int whence);
function dio_stat(resource fd);
function dio_tcsetattr(resource fd, array options);
function dio_truncate(resource fd, int offset);
function dio_write(resource fd, string data [, int len]);
function chdir(string directory);
function chroot(string directory);
class dir {
  function dir(string directory);
  function string read();
  function void rewind();
  function void close();
};
function dir(string directory);
function closedir(int dir_handle);
function getcwd(void);
function opendir(string path);
function readdir(int dir_handle);
function rewinddir(int dir_handle);
function scandir(string directory [, int sorting_order]);
class DomNode {
	class DomAttribute {
		function name(void);
		function specified(void);
		function value(void);
	};
	class DomCData {
		class DomComment {
			class DomComment {
			};
		}
	};
	class DomDocument {
		function add_root(string name);
		function create_attribute(string name, string value);
		function create_cdata_section(string content);
		function create_comment(string content);
		function create_element_ns(string uri, string name [, string prefix]);
		function create_element(string name);
		function create_entity_reference(string content);
		function create_processing_instruction(string content);
		function create_text_node(string content);
		function doctype(void);
		function document_element(void);
		function dump_file(string filename [, bool compressionmode [, bool format]]);
		function dump_mem([bool format [, string encoding]]);
		function get_element_by_id(string id);
		function get_elements_by_tagname(string name);
		function html_dump_mem(void);
		function xinclude(void);
	};
	class DomDocumentType {
		function entities(void);
		function internal_subset(void);
		function name(void);
		function notations(void);
		function public_id(void);
		function system_id(void);
	};
	class DomElement {
		function get_attribute_node(object attr);
		function get_attribute(string name);
		function get_elements_by_tagname(string name);
		function has_attribute(string name);
		function remove_attribute(string name);
		function set_attribute(string name, string value);
		function tagname(void);
	};
	class DomEntity {
	};
	class DomEntityReference {
	};
	class DomProcessingInstruction {
		function data(void);
		function target(void);
	};
	function add_namespace(string uri, string prefix);
	function append_child(object newnode);
	function append_sibling(object newnode);
	function attributes(void);
	function child_nodes(void);
	function clone_node(void);
	function dump_node(void);
	function first_child(void);
	function get_content(void);
	function has_attributes(void);
	function has_child_nodes(void);
	function insert_before(object newnode, object refnode);
	function is_blank_node(void);
	function last_child(void);
	function next_sibling(void);
	function node_name(void);
	function node_type(void);
	function node_value(void);
	function owner_document(void);
	function parent_node(void);
	function prefix(void);
	function previous_sibling(void);
	function remove_child(object oldchild);
	function replace_child(object oldnode, object newnode);
	function replace_node(object newnode);
	function set_content(void);
	function set_name(void);
	function set_namespace(string uri [, string prefix]);
	function unlink_node(void);
};
class DomXsltStylesheet {
	function process(object DomDocument [, array xslt_parameters [, bool param_is_xpath]]);
	function result_dump_file(object DomDocument, string filename);
	function result_dump_mem(object DomDocument);
};
function domxml_new_doc(string version);
function domxml_open_file(string filename);
function domxml_open_mem(string str);
function domxml_version(void);
function domxml_xmltree(string str);
function domxml_xslt_stylesheet_doc(object DocDocument Object);
function domxml_xslt_stylesheet_file(string xsl file);
function domxml_xslt_stylesheet(string xsl document);
function xpath_eval_expression(object xpath_context);
function xpath_eval(object xpath context, string xpath expression [, object contextnode]);
function xpath_new_context(object dom document);
function xptr_eval([object xpath_context, string eval_str]);
function xptr_new_context([object doc_handle]);
function dotnet_load(string assembly_name [, string datatype_name [, int codepage]]);
function debug_backtrace(void);
function debug_print_backtrace(void);
function error_log(string message [, int message_type [, string destination [, string extra_headers]]]);
function error_reporting([int level]);
function restore_error_handler(void);
function set_error_handler(callback error_handler);
function trigger_error(string error_msg [, int error_type]);
function fam_cancel_monitor(resource fam, resource fam_monitor);
function fam_close(resource fam);
function fam_monitor_collection(resource fam, string dirname, int depth, string mask);
function fam_monitor_directory(resource fam, string dirname);
function fam_monitor_file(resource fam, string filename);
function fam_next_event(resource fam);
function fam_open([string appname]);
function fam_pending(resource fam);
function fam_resume_monitor(resource fam, resource fam_monitor);
function fam_suspend_monitor(resource fam, resource fam_monitor);
function fbsql_affected_rows([resource link_identifier]);
function fbsql_autocommit(resource link_identifier [, bool OnOff]);
function fbsql_change_user(string user, string password [, string database [, resource link_identifier]]);
function fbsql_close([resource link_identifier]);
function fbsql_commit([resource link_identifier]);
function fbsql_connect([string hostname [, string username [, string password]]]);
function fbsql_create_blob(string blob_data [, resource link_identifier]);
function fbsql_create_clob(string clob_data [, resource link_identifier]);
function fbsql_create_db(string database_name [, resource link_identifier]);
function fbsql_data_seek(resource result_identifier, int row_number);
function fbsql_database_password(resource link_identifier [, string database_password]);
function fbsql_database(resource link_identifier [, string database]);
function fbsql_db_query(string database, string query [, resource link_identifier]);
function fbsql_db_status(string database_name [, resource link_identifier]);
function fbsql_drop_db(string database_name [, resource link_identifier]);
function fbsql_errno([resource link_identifier]);
function fbsql_error([resource link_identifier]);
function fbsql_fetch_array(resource result [, int result_type]);
function fbsql_fetch_assoc(resource result);
function fbsql_fetch_field(resource result [, int field_offset]);
function fbsql_fetch_lengths([resource result]);
function fbsql_fetch_object(resource result [, int result_type]);
function fbsql_fetch_row(resource result);
function fbsql_field_flags(resource result, int field_offset);
function fbsql_field_len(resource result, int field_offset);
function fbsql_field_name(resource result, int field_index);
function fbsql_field_seek(resource result, int field_offset);
function fbsql_field_table(resource result, int field_offset);
function fbsql_field_type(resource result, int field_offset);
function fbsql_free_result(resource result);
function fbsql_get_autostart_info([resource link_identifier]);
function fbsql_hostname(resource link_identifier [, string host_name]);
function fbsql_insert_id([resource link_identifier]);
function fbsql_list_dbs([resource link_identifier]);
function fbsql_list_fields(string database_name, string table_name [, resource link_identifier]);
function fbsql_list_tables(string database [, resource link_identifier]);
function fbsql_next_result(resource result_id);
function fbsql_num_fields(resource result);
function fbsql_num_rows(resource result);
function fbsql_password(resource link_identifier [, string password]);
function fbsql_pconnect([string hostname [, string username [, string password]]]);
function fbsql_query(string query [, resource link_identifier]);
function fbsql_read_blob(string blob_handle [, resource link_identifier]);
function fbsql_read_clob(string clob_handle [, resource link_identifier]);
function fbsql_result(resource result, int row [, mixed field]);
function fbsql_rollback([resource link_identifier]);
function fbsql_select_db(string database_name [, resource link_identifier]);
function fbsql_set_lob_mode(resource result, string database_name);
function fbsql_set_transaction(resource link_identifier, int Locking, int Isolation);
function fbsql_start_db(string database_name [, resource link_identifier]);
function fbsql_stop_db(string database_name [, resource link_identifier]);
function fbsql_tablename(resource result, int i);
function fbsql_username(resource link_identifier [, string username]);
function fbsql_warnings([bool OnOff]);
function fbsql_set_password(unknown);
function filepro_fieldcount(void);
function filepro_fieldname(int field_number);
function filepro_fieldtype(int field_number);
function filepro_fieldwidth(int field_number);
function filepro_retrieve(int row_number, int field_number);
function filepro_rowcount(void);
function filepro(string directory);
function basename(string path);
function chgrp(string filename, mixed group);
function chmod(string filename, int mode);
function chown(string filename, mixed user);
function clearstatcache(void);
function copy(string source, string dest);
function delete(string file);
function dirname(string path);
function disk_free_space(string directory);
function disk_total_space(string directory);
function diskfreespace(string directory);
function fclose(int fp);
function feof(int fp);
function fflush(int fp);
function fgetc(int fp);
function fgetcsv(int fp, int length [, string delimiter]);
function fgets(int fp [, int length]);
function fgetss(int fp, int length [, string allowable_tags]);
function file_exists(string filename);
function file_get_contents(string filename [, int use_include_path [, resource context]]);
function file_put_contents(string filename, string data [, int flags [, resource context]]);
function file(string filename [, int use_include_path]);
function fileatime(string filename);
function filectime(string filename);
function filegroup(string filename);
function fileinode(string filename);
function filemtime(string filename);
function fileowner(string filename);
function fileperms(string filename);
function filesize(string filename);
function filetype(string filename);
function flock(int fp, int operation [, int wouldblock]);
function fnmatch(string pattern, string string [, int flags]);
function fopen(string filename, string mode [, int use_include_path]);
function fpassthru(int fp);
function fputs(int fp, string str [, int length]);
function fread(int fp, int length);
function fscanf(int handle, string format [, string var1]);
function fseek(int fp, int offset [, int whence]);
function fstat(int fp);
function ftell(int fp);
function ftruncate(int fp, int size);
function fwrite(int fp, string string [, int length]);
function glob(string pattern [, int flags]);
function is_dir(string filename);
function is_executable(string filename);
function is_file(string filename);
function is_link(string filename);
function is_readable(string filename);
function is_uploaded_file(string filename);
function is_writable(string filename);
function link(string target, string link);
function linkinfo(string path);
function lstat(string filename);
function mkdir(string pathname, int mode);
function move_uploaded_file(string filename, string destination);
function parse_ini_file(string filename [, bool process_sections]);
function pathinfo(string path);
function pclose(int fp);
function popen(string command, string mode);
function readfile(string filename [, int use_include_path]);
function readlink(string path);
function realpath(string path);
function rename(string oldname, string newname);
function rewind(int fp);
function rmdir(string dirname);
function set_file_buffer(int fp, int buffer);
function stat(string filename);
function symlink(string target, string link);
function tempnam(string dir, string prefix);
function tmpfile(void);
function touch(string filename [, int time]);
function umask(int mask);
function unlink(string filename);
function fdf_add_doc_javascript(resource fdfdoc, string script_name, string script_code);
function fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename);
function fdf_close(resource fdf_document);
function fdf_create(void);
function fdf_enum_values(resource fdfdoc, callback function [, mixed userdata]);
function fdf_errno(void);
function fdf_error([int error_code]);
function fdf_get_ap(resource fdf_document, string field, int face, string filename);
function fdf_get_attachment(resource fdf_document, string fieldname, string savepath);
function fdf_get_encoding(resource fdf_document);
function fdf_get_file(resource fdf_document);
function fdf_get_flags(void);
function fdf_get_opt(resource fdfdof, string fieldname [, int element]);
function fdf_get_status(resource fdf_document);
function fdf_get_value(resource fdf_document, string fieldname [, int which]);
function fdf_get_version([resource fdf_document]);
function fdf_header(void);
function fdf_next_field_name(resource fdf_document [, string fieldname]);
function fdf_open_string(string fdf_data);
function fdf_open(string filename);
function fdf_remove_item(resource fdfdoc, string fieldname, int item);
function fdf_save_string(resource fdf_document);
function fdf_save(resource fdf_document [, string filename]);
function fdf_set_ap(resource fdf_document, string field_name, int face, string filename, int page_number);
function fdf_set_encoding(resource fdf_document, string encoding);
function fdf_set_file(resource fdf_document, string url [, string target_frame]);
function fdf_set_flags(resource fdf_document, string fieldname, int whichFlags, int newFlags);
function fdf_set_javascript_action(resource fdf_document, string fieldname, int trigger, string script);
function fdf_set_opt(resource fdf_document, string fieldname, int element, string str1, string str2);
function fdf_set_status(resource fdf_document, string status);
function fdf_set_submit_form_action(resource fdf_document, string fieldname, int trigger, string script, int flags);
function fdf_set_target_frame(resource fdf_document, string frame_name);
function fdf_set_value(resource fdf_document, string fieldname, mixed value [, int isName]);
function fdf_set_version(resource fdf_document, string version);
function fribidi_log2vis(string str, string direction, int charset);
function ftp_alloc(resource ftp_stream, int filesize [, string&result]);
function ftp_cdup(resource ftp_stream);
function ftp_chdir(resource ftp_stream, string directory);
function ftp_chmod(resource ftp_stream, int mode, string filename);
function ftp_close(resource ftp_stream);
function ftp_connect(string host [, int port [, int timeout]]);
function ftp_delete(resource ftp_stream, string path);
function ftp_exec(resource ftp_stream, string command);
function ftp_fget(resource ftp_stream, resource handle, string remote_file, int mode [, int resumepos]);
function ftp_fput(resource ftp_stream, string remote_file, resource handle, int mode [, int startpos]);
function ftp_get_option(resource ftp_stream, int option);
function ftp_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos]);
function ftp_login(resource ftp_stream, string username, string password);
function ftp_mdtm(resource ftp_stream, string remote_file);
function ftp_mkdir(resource ftp_stream, string directory);
function ftp_nb_continue(resource ftp_stream);
function ftp_nb_fget(resource ftp_stream, resource handle, string remote_file, int mode [, int resumepos]);
function ftp_nb_fput(resource ftp_stream, string remote_file, resource handle, int mode [, int startpos]);
function ftp_nb_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos]);
function ftp_nb_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos]);
function ftp_nlist(resource ftp_stream, string directory);
function ftp_pasv(resource ftp_stream, bool pasv);
function ftp_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos]);
function ftp_pwd(resource ftp_stream);
function ftp_raw(resource ftp_stream, string command);
function ftp_rawlist(resource ftp_stream, string directory);
function ftp_rename(resource ftp_stream, string from, string to);
function ftp_rmdir(resource ftp_stream, string directory);
function ftp_set_option(resource ftp_stream, int option, mixed value);
function ftp_site(resource ftp_stream, string cmd);
function ftp_size(resource ftp_stream, string remote_file);
function ftp_ssl_connect(string host [, int port [, int timeout]]);
function ftp_systype(resource ftp_stream);
function call_user_func_array(callback function [, array param_arr]);
function call_user_func(string function_name [, mixed parameter [, mixed ...]]);
function create_function(string args, string code);
function func_get_arg(int arg_num);
function func_get_args(void);
function func_num_args(void);
function function_exists(string function_name);
function get_defined_functions(void);
function get_declared_interfaces(unknown);
function get_headers(unknown);
function register_shutdown_function(string func);
function register_tick_function(callback function [, mixed arg]);
function unregister_tick_function(string function_name);
function bind_textdomain_codeset(string domain, string codeset);
function bindtextdomain(string domain, string directory);
function dcgettext(string domain, string message, int category);
function dcngettext(string domain, string msgid1, string msgid2, int n, int category);
function dgettext(string domain, string message);
function dngettext(string domain, string msgid1, string msgid2, int n);
function gettext(string message);
function ngettext(string msgid1, string msgid2, int n);
function textdomain(string text_domain);
function gmp_abs(resource a);
function gmp_add(resource a, resource b);
function gmp_and(resource a, resource b);
function gmp_clrbit(resource&a, int index);
function gmp_cmp(resource a, resource b);
function gmp_com(resource a);
function gmp_div_q(resource a, resource b [, int round]);
function gmp_div_qr(resource n, resource d [, int round]);
function gmp_div_r(resource n, resource d [, int round]);
function gmp_divexact(resource n, resource d);
function gmp_fact(int a);
function gmp_gcd(resource a, resource b);
function gmp_gcdext(resource a, resource b);
function gmp_hamdist(resource a, resource b);
function gmp_init(mixed number);
function gmp_intval(resource gmpnumber);
function gmp_invert(resource a, resource b);
function gmp_jacobi(resource a, resource p);
function gmp_legendre(resource a, resource p);
function gmp_mod(resource n, resource d);
function gmp_mul(resource a, resource b);
function gmp_neg(resource a);
function gmp_or(resource a, resource b);
function gmp_perfect_square(resource a);
function gmp_popcount(resource a);
function gmp_pow(resource base, int exp);
function gmp_powm(resource base, resource exp, resource mod);
function gmp_prob_prime(resource a [, int reps]);
function gmp_random(int limiter);
function gmp_scan0(resource a, int start);
function gmp_scan1(resource a, int start);
function gmp_setbit(resource&a, int index [, bool set_clear]);
function gmp_sign(resource a);
function gmp_sqrt(resource a);
function gmp_sqrtrm(resource a);
function gmp_strval(resource gmpnumber [, int base]);
function gmp_sub(resource a, resource b);
function gmp_xor(resource a, resource b);
function header(string string [, bool replace [, int http_response_code]]);
function headers_list(void);
function headers_sent(void);
function setcookie(string name [, string value [, int expire [, string path [, string domain [, int secure]]]]]);
function setrawcookie(string name [, string value [, int expire [, string path [, string domain [, int secure]]]]]);
function hw_array2objrec(array object_array);
function hw_changeobject(int link, int objid, array attributes);
function hw_children(int connection, int objectID);
function hw_childrenobj(int connection, int objectID);
function hw_close(int connection);
function hw_connect(string host, int port, string username, string password);
function hw_connection_info(int link);
function hw_cp(int connection, array object_id_array, int destination_id);
function hw_deleteobject(int connection, int object_to_delete);
function hw_docbyanchor(int connection, int anchorID);
function hw_docbyanchorobj(int connection, int anchorID);
function hw_document_attributes(int hw_document);
function hw_document_bodytag(int hw_document);
function hw_document_content(int hw_document);
function hw_document_setcontent(int hw_document, string content);
function hw_document_size(int hw_document);
function hw_dummy(int link, int id, int msgid);
function hw_edittext(int connection, int hw_document);
function hw_error(int connection);
function hw_errormsg(int connection);
function hw_free_document(int hw_document);
function hw_getanchors(int connection, int objectID);
function hw_getanchorsobj(int connection, int objectID);
function hw_getandlock(int connection, int objectID);
function hw_getchildcoll(int connection, int objectID);
function hw_getchildcollobj(int connection, int objectID);
function hw_getchilddoccoll(int connection, int objectID);
function hw_getchilddoccollobj(int connection, int objectID);
function hw_getobject(int connection, mixed objectID, string query);
function hw_getobjectbyquery(int connection, string query, int max_hits);
function hw_getobjectbyquerycoll(int connection, int objectID, string query, int max_hits);
function hw_getobjectbyquerycollobj(int connection, int objectID, string query, int max_hits);
function hw_getobjectbyqueryobj(int connection, string query, int max_hits);
function hw_getparents(int connection, int objectID);
function hw_getparentsobj(int connection, int objectID);
function hw_getrellink(int link, int rootid, int sourceid, int destid);
function hw_getremote(int connection, int objectID);
function hw_getremotechildren(int connection, string object_record);
function hw_getsrcbydestobj(int connection, int objectID);
function hw_gettext(int connection, int objectID [, mixed rootID/prefix]);
function hw_getusername(int connection);
function hw_identify(string username, string password);
function hw_incollections(int connection, array object_id_array, array collection_id_array, int return_collections);
function hw_info(int connection);
function hw_inscoll(int connection, int objectID, array object_array);
function hw_insdoc(int connection, int parentID, string object_record, string text);
function hw_insertanchors(int hwdoc, array anchorecs, array dest [, array urlprefixes]);
function hw_insertdocument(int connection, int parent_id, int hw_document);
function hw_insertobject(int connection, string object_rec, string parameter);
function hw_mapid(int connection, int server_id, int object_id);
function hw_modifyobject(int connection, int object_to_change, array remove, array add, int mode);
function hw_mv(int connection, array object_id_array, int source_id, int destination_id);
function hw_new_document(string object_record, string document_data, int document_size);
function hw_objrec2array(string object_record [, array format]);
function hw_output_document(int hw_document);
function hw_pconnect(string host, int port, string username, string password);
function hw_pipedocument(int connection, int objectID);
function hw_root();
function hw_setlinkroot(int link, int rootid);
function hw_stat(int link);
function hw_unlock(int connection, int objectID);
function hw_who(int connection);
function key(void);
function langdepvalue(string language);
function value(void);
function values(void);
function attribute([string name [, string value]]);
function checkin(array parameter);
function checkout(array parameter);
function children(array parameter);
function mimetype(void);
function read(string buffer, integer len);
function content(array parameter);
function copy(array parameter);
function dbstat(array parameter);
function dcstat(array parameter);
function dstanchors(array parameter);
function dstofsrcanchors(array parameter);
function count(void);
function reason(void);
function find(array parameter);
function ftstat(array parameter);
function hwapi_hgcsp(string hostname [, int port]);
function hwstat(array parameter);
function identify(array parameter);
function info(array parameter);
function insert(array parameter);
function insertanchor(array parameter);
function insertcollection(array parameter);
function insertdocument(array parameter);
function link(array parameter);
function lock(array parameter);
function move(array parameter);
function content(string content, string mimetype);
function assign(array parameter);
function attreditable(array parameter);
function count(array parameter);
function insert(object attribute);
function hw_api_object(array parameter);
function remove(string name);
function title(array parameter);
function value(string name);
class HW_API {
	function object(array parameter);
	function checkin(array parameter);
	function checkout(array parameter);
	function children(array parameter);
	function content(array parameter);
	function copy(array parameter);
	function dbstat(array parameter);
	function dcstat(array parameter);
	function dstanchors(array parameter);
	function dstofsrcanchors(array parameter);
	function find(array parameter);
	function ftstat(array parameter);
	function hwstat(array parameter);
	function identify(array parameter);
	function info(array parameter);
	function insert(array parameter);
	function insertanchor(array parameter);
	function insertcollection(array parameter);
	function insertdocument(array parameter);
	function link(array parameter);
	function lock(array parameter);
	function move(array parameter);
	function content(string content, string mimetype);
	function object(array parameter);
	function objectbyanchor(array parameter);
	function parents(array parameter);
	function remove(array parameter);
	function replace(array parameter);
	function setcommitedversion(array parameter);
	function srcanchors(array parameter);
	function srcsofdst(array parameter);
	function unlock(array parameter);
	function user(array parameter);
	function userlist(array parameter);
};
class HW_API_Object {
	function assign(array parameter);
	function attreditable(array parameter);
	function count(array parameter);
	function insert(object attribute);
	function remove(string name);
	function title(array parameter);
	function value(string name);
};
class HW_API_Attribute {
	function attribute([string name [, string value]]);
	function key(void);
	function langdepvalue(string language);
	function value(void);
	function values(void);
};
class HW_API_Error {
	function count(void);
	function reason(void);
};
class HW_API_Content {
	function mimetype(void);
	function read(string buffer, integer len);
};
class HW_API_Reason {
	function description(void);
	function type(void);
};
function objectbyanchor(array parameter);
function parents(array parameter);
function description(void);
function type(void);
function remove(array parameter);
function replace(array parameter);
function setcommitedversion(array parameter);
function srcanchors(array parameter);
function srcsofdst(array parameter);
function unlock(array parameter);
function user(array parameter);
function userlist(array parameter);
function iconv_get_encoding([string type]);
function iconv_mime_decode(string encoded_string [, string charset]);
function iconv_mime_encode(string field_name, string field_value [, array preference]);
function iconv_mime_decode_headers(string encoded_headers [, int mode [, string charset]]);
function iconv_set_encoding(string type, string charset);
function iconv_strlen(string str [, string charset]);
function iconv_strpos(string haystack, string needle, int offset [, string charset]);
function iconv_strrpos(string haystack, string needle [, string charset]);
function iconv_substr(string str, int offset [, int length [, string charset]]);
function iconv(string in_charset, string out_charset, string str);
function idate(unknown);
function ob_iconv_handler(string contents, int status);
function exif_imagetype(string filename);
function exif_read_data(string filename [, string sections [, bool arrays [, bool thumbnail]]]);
function exif_thumbnail(string filename [, int&width [, int&height [, int&imagetype]]]);
function gd_info(void);
function getimagesize(string filename [, array imageinfo]);
function imagefilter(unknown);
function image_type_to_extension(unknown);
function image_type_to_mime_type(int imagetype);
function image2wbmp(resource image [, string filename [, int threshold]]);
function imagealphablending(resource image, bool blendmode);
function imageantialias(resource im, bool on);
function imagearc(resource image, int cx, int cy, int w, int h, int s, int e, int color);
function imagechar(resource image, int font, int x, int y, string c, int color);
function imagecharup(resource image, int font, int x, int y, string c, int color);
function imagecolorallocate(resource image, int red, int green, int blue);
function imagecolorallocatealpha(resource image, int red, int green, int blue, int alpha);
function imagecolorat(resource image, int x, int y);
function imagecolorclosest(resource image, int red, int green, int blue);
function imagecolorclosestalpha(resource image, int red, int green, int blue, int alpha);
function imagecolorclosesthwb(resource image, int red, int green, int blue);
function imagecolordeallocate(resource image, int color);
function imagecolorexact(resource image, int red, int green, int blue);
function imagecolorexactalpha(resource image, int red, int green, int blue, int alpha);
function imagecolormatch(resource image1, resource image2);
function imagecolorresolve(resource image, int red, int green, int blue);
function imagecolorresolvealpha(resource image, int red, int green, int blue, int alpha);
function imagecolorset(resource image, int index, int red, int green, int blue);
function imagecolorsforindex(resource image, int index);
function imagecolorstotal(resource image);
function imagecolortransparent(resource image [, int color]);
function imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h);
function imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct);
function imagecopymergegray(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct);
function imagecopyresampled(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH);
function imagecopyresized(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH);
function imagecreate(int x_size, int y_size);
function imagecreatefromgd2(string filename);
function imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height);
function imagecreatefromgd(string filename);
function imagecreatefromgif(string filename);
function imagecreatefromjpeg(string filename);
function imagecreatefrompng(string filename);
function imagecreatefromstring(string image);
function imagecreatefromwbmp(string filename);
function imagecreatefromxbm(string filename);
function imagecreatefromxpm(string filename);
function imagecreatetruecolor(int x_size, int y_size);
function imagedashedline(resource image, int x1, int y1, int x2, int y2, int color);
function imagedestroy(resource image);
function imageellipse(resource image, int cx, int cy, int w, int h, int color);
function imagefill(resource image, int x, int y, int color);
function imagefilledarc(resource image, int cx, int cy, int w, int h, int s, int e, int color, int style);
function imagefilledellipse(resource image, int cx, int cy, int w, int h, int color);
function imagefilledpolygon(resource image, array points, int num_points, int color);
function imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color);
function imagefilltoborder(resource image, int x, int y, int border, int color);
function imagefontheight(int font);
function imagefontwidth(int font);
function imageftbbox(int size, int angle, string font_file, string text [, array extrainfo]);
function imagefttext(resource image, int size, int angle, int x, int y, int col, string font_file, string text [, array extrainfo]);
function imagegammacorrect(resource image, float inputgamma, float outputgamma);
function imagegd2(resource image [, string filename [, int chunk_size [, int type]]]);
function imagegd(resource image [, string filename]);
function imagegif(resource image [, string filename]);
function imageinterlace(resource image [, int interlace]);
function imageistruecolor(resource image);
function imagejpeg(resource image [, string filename [, int quality]]);
function imageline(resource image, int x1, int y1, int x2, int y2, int color);
function imageloadfont(string file);
function imagepalettecopy(resource destination, resource source);
function imagepng(resource image [, string filename]);
function imagepolygon(resource image, array points, int num_points, int color);
function imagepsbbox(string text, int font, int size [, int space [, int tightness [, float angle]]]);
function imagepscopyfont(int fontindex);
function imagepsencodefont(int font_index, string encodingfile);
function imagepsextendfont(int font_index, float extend);
function imagepsfreefont(int fontindex);
function imagepsloadfont(string filename);
function imagepsslantfont(int font_index, float slant);
function imagepstext(resource image, string text, int font, int size, int foreground, int background, int x, int y [, int space [, int tightness [, float angle [, int antialias_steps]]]]);
function imagerectangle(resource image, int x1, int y1, int x2, int y2, int col);
function imagerotate(resource src_im, float angle, int bgd_color);
function imagesavealpha(resource image, bool saveflag);
function imagesetbrush(resource image, resource brush);
function imagesetpixel(resource image, int x, int y, int color);
function imagesetstyle(resource image, array style);
function imagesetthickness(resource image, int thickness);
function imagesettile(resource image, resource tile);
function imagestring(resource image, int font, int x, int y, string s, int col);
function imagestringup(resource image, int font, int x, int y, string s, int col);
function imagesx(resource image);
function imagesy(resource image);
function imagetruecolortopalette(resource image, bool dither, int ncolors);
function imagettfbbox(int size, int angle, string fontfile, string text);
function imagettftext(resource image, int size, int angle, int x, int y, int color, string fontfile, string text);
function imagetypes(void);
function imagewbmp(resource image [, string filename [, int foreground]]);
function iptcembed(string iptcdata, string jpeg_file_name [, int spool]);
function iptcparse(string iptcblock);
function jpeg2wbmp(string jpegname, string wbmpname, int d_height, int d_width, int threshold);
function png2wbmp(string pngname, string wbmpname, int d_height, int d_width, int threshold);
function imap_8bit(string string);
function imap_alerts(void);
function imap_append(resource imap_stream, string mbox, string message [, string options]);
function imap_base64(string text);
function imap_binary(string string);
function imap_body(resource imap_stream, int msg_number [, int options]);
function imap_bodystruct(resource stream_id, int msg_no, int section);
function imap_check(resource imap_stream);
function imap_clearflag_full(resource stream, string sequence, string flag, string options);
function imap_close(resource imap_stream [, int flag]);
function imap_createmailbox(resource imap_stream, string mbox);
function imap_delete(int imap_stream, int msg_number [, int options]);
function imap_deletemailbox(resource imap_stream, string mbox);
function imap_errors(void);
function imap_expunge(resource imap_stream);
function imap_fetch_overview(resource imap_stream, string sequence [, int options]);
function imap_fetchbody(resource imap_stream, int msg_number, string part_number [, flags options]);
function imap_fetchheader(resource imap_stream, int msgno, int options);
function imap_fetchstructure(resource imap_stream, int msg_number [, int options]);
function imap_get_quota(resource imap_stream, string quota_root);
function imap_get_quotaroot(resource imap_stream, string quota_root);
function imap_getacl(resource stream_id, string mailbox);
function imap_getmailboxes(resource imap_stream, string ref, string pattern);
function imap_getsubscribed(resource imap_stream, string ref, string pattern);
function imap_headerinfo(resource imap_stream, int msg_number [, int fromlength [, int subjectlength [, string defaulthost]]]);
function imap_headers(resource imap_stream);
function imap_last_error(void);
function imap_list(resource imap_stream, string ref, string pattern);
function imap_listscan(resource imap_stream, string ref, string pattern, string content);
function imap_lsub(resource imap_stream, string ref, string pattern);
function imap_mail_compose(array envelope, array body);
function imap_mail_copy(resource imap_stream, string msglist, string mbox [, int options]);
function imap_mail_move(resource imap_stream, string msglist, string mbox [, int options]);
function imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]]);
function imap_mailboxmsginfo(resource imap_stream);
function imap_mime_header_decode(string text);
function imap_msgno(resource imap_stream, int uid);
function imap_num_msg(resource imap_stream);
function imap_num_recent(resource imap_stream);
function imap_open(string mailbox, string username, string password [, int options]);
function imap_ping(resource imap_stream);
function imap_qprint(string string);
function imap_renamemailbox(resource imap_stream, string old_mbox, string new_mbox);
function imap_reopen(resource imap_stream, string mailbox [, string options]);
function imap_rfc822_parse_adrlist(string address, string default_host);
function imap_rfc822_parse_headers(string headers [, string defaulthost]);
function imap_rfc822_write_address(string mailbox, string host, string personal);
function imap_search(resource imap_stream, string criteria, int options);
function imap_set_quota(resource imap_stream, string quota_root, int quota_limit);
function imap_setacl(resource stream_id, string mailbox, string id, string rights);
function imap_setflag_full(resource stream, string sequence, string flag, string options);
function imap_sort(resource stream, int criteria, int reverse [, int options [, string search_criteria]]);
function imap_status(resource imap_stream, string mailbox, int options);
function imap_subscribe(resource imap_stream, string mbox);
function imap_thread(resource stream_id [, int options]);
function imap_timeout(int timeout_type [, int timeout]);
function imap_uid(resource imap_stream, int msgno);
function imap_undelete(resource imap_stream, int msg_number);
function imap_unsubscribe(string imap_stream, string mbox);
function imap_utf7_decode(string text);
function imap_utf7_encode(string data);
function imap_utf8(string mime_encoded_text);
function ifx_affected_rows(int result_id);
function ifx_blobinfile_mode(int mode);
function ifx_byteasvarchar(int mode);
function ifx_close([int link_identifier]);
function ifx_connect([string database [, string userid [, string password]]]);
function ifx_copy_blob(int bid);
function ifx_create_blob(int type, int mode, string param);
function ifx_create_char(string param);
function ifx_do(int result_id);
function ifx_error(void);
function ifx_errormsg([int errorcode]);
function ifx_fetch_row(int result_id [, mixed position]);
function ifx_fieldproperties(int result_id);
function ifx_fieldtypes(int result_id);
function ifx_free_blob(int bid);
function ifx_free_char(int bid);
function ifx_free_result(int result_id);
function ifx_get_blob(int bid);
function ifx_get_char(int bid);
function ifx_getsqlca(int result_id);
function ifx_htmltbl_result(int result_id [, string html_table_options]);
function ifx_nullformat(int mode);
function ifx_num_fields(int result_id);
function ifx_num_rows(int result_id);
function ifx_pconnect([string database [, string userid [, string password]]]);
function ifx_prepare(string query, int conn_id [, int cursor_def, mixed blobidarray]);
function ifx_query(string query, int link_identifier [, int cursor_type [, mixed blobidarray]]);
function ifx_textasvarchar(int mode);
function ifx_update_blob(int bid, string content);
function ifx_update_char(int bid, string content);
function ifxus_close_slob(int bid);
function ifxus_create_slob(int mode);
function ifxus_free_slob(int bid);
function ifxus_open_slob(long bid, int mode);
function ifxus_read_slob(long bid, long nbytes);
function ifxus_seek_slob(long bid, int mode, long offset);
function ifxus_tell_slob(long bid);
function ifxus_write_slob(long bid, string content);
function ibase_add_user(string server, string dba_user_name, string dba_user_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]]);
function ibase_affected_rows(resource link_identifier);
function ibase_backup();
function ibase_blob_add(resource blob_handle, string data);
function ibase_blob_cancel(resource blob_handle);
function ibase_blob_close(resource blob_handle);
function ibase_blob_create([resource link_identifier]);
function ibase_blob_echo(string blob_id);
function ibase_blob_get(resource blob_handle, int len);
function ibase_blob_import([resource link_identifier, resource file_handle]);
function ibase_blob_info(string blob_id);
function ibase_blob_open(string blob_id);
function ibase_close([resource connection_id]);
function ibase_commit_ret([resource link_identifier]);
function ibase_commit([resource link_identifier]);
function ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]]);
function ibase_db_info(resource connection);
function ibase_delete_user(string server, string dba_user_name, string dba_user_password, string user_name);
function ibase_drop_db(resource connection);
function ibase_errcode(void);
function ibase_errmsg(void);
function ibase_execute(resource query [, int bind_args]);
function ibase_fetch_assoc(resource result [, int fetch_flag]);
function ibase_fetch_object(resource result_id [, int fetch_flag]);
function ibase_fetch_row(resource result_identifier [, int fetch_flag]);
function ibase_field_info(resource result, int field_number);
function ibase_free_event_handler(resource event);
function ibase_free_query(resource query);
function ibase_free_result(resource result_identifier);
function ibase_gen_id([resource link_identifier [, string generator [, int increment]]]);
function ibase_modify_user(string server, string dba_user_name, string dba_user_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]]);
function ibase_name_result(resource result, string name);
function ibase_num_fields(resource result_id);
function ibase_num_params(resource query);
function ibase_param_info(resource query, int param_number);
function ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]]);
function ibase_prepare([resource link_identifier, string query]);
function ibase_query([resource link_identifier, string query [, int bind_args]]);
function ibase_restore();
function ibase_rollback_ret([resource link_identifier]);
function ibase_rollback([resource link_identifier]);
function ibase_server_info();
function ibase_service_attach();
function ibase_service_detach();
function ibase_set_event_handler([resource connection, callback event_handler, string event_name1 [, string event_name2 [, string ...]]]);
function ibase_timefmt(string format [, int columntype]);
function ibase_trans([int trans_args [, resource link_identifier]]);
function ibase_wait_event([resource connection, string event_name1 [, string event_name2 [, string ...]]]);
function ingres_autocommit([resource link]);
function ingres_close([resource link]);
function ingres_commit([resource link]);
function ingres_connect([string database [, string username [, string password]]]);
function ingres_fetch_array([int result_type [, resource link]]);
function ingres_fetch_object([int result_type [, resource link]]);
function ingres_fetch_row([resource link]);
function ingres_field_length(int index [, resource link]);
function ingres_field_name(int index [, resource link]);
function ingres_field_nullable(int index [, resource link]);
function ingres_field_precision(int index [, resource link]);
function ingres_field_scale(int index [, resource link]);
function ingres_field_type(int index [, resource link]);
function ingres_num_fields([resource link]);
function ingres_num_rows([resource link]);
function ingres_pconnect([string database [, string username [, string password]]]);
function ingres_query(string query [, resource link]);
function ingres_rollback([resource link]);
function ircg_channel_mode(resource connection, string channel, string mode_spec, string nick);
function ircg_disconnect(resource connection, string reason);
function ircg_fetch_error_msg(resource connection);
function ircg_get_username(resource connection);
function ircg_html_encode(string html_string);
function ircg_ignore_add(resource connection, string nick);
function ircg_ignore_del(resource connection, string nick);
function ircg_is_conn_alive(resource connection);
function ircg_join(resource connection, string channel [, string key]);
function ircg_kick(resource connection, string channel, string nick, string reason);
function ircg_lookup_format_messages(string name);
function ircg_msg(resource connection, string recipient, string message [, boolean suppress]);
function ircg_nick(resource connection, string nick);
function ircg_nickname_escape(string nick);
function ircg_nickname_unescape(string nick);
function ircg_notice(resource connection, string , string message);
function ircg_part(resource connection, string channel);
function ircg_pconnect(string username [, string server_ip [, int server_port [, string msg_format [, array ctcp_messages [, array user_settings]]]]]);
function ircg_register_format_messages(string name, array messages);
function ircg_set_current(resource connection);
function ircg_set_file(resource connection, string path);
function ircg_set_on_die(resource connection, string host, int port, string data);
function ircg_topic(resource connection, string channel, string new_topic);
function ircg_whois(resource connection, string nick);
function java_last_exception_clear(void);
function java_last_exception_get(void);
function ldap_8859_to_t61(string value);
function ldap_add(resource link_identifier, string dn, array entry);
function ldap_bind(resource link_identifier [, string bind_rdn [, string bind_password]]);
function ldap_close(resource link_identifier);
function ldap_compare(resource link_identifier, string dn, string attribute, string value);
function ldap_connect([string hostname [, int port]]);
function ldap_count_entries(resource link_identifier, resource result_identifier);
function ldap_delete(resource link_identifier, string dn);
function ldap_dn2ufn(string dn);
function ldap_err2str(int errno);
function ldap_errno(resource link_identifier);
function ldap_error(resource link_identifier);
function ldap_explode_dn(string dn, int with_attrib);
function ldap_first_attribute(resource link_identifier, resource result_entry_identifier, int ber_identifier);
function ldap_first_entry(resource link_identifier, resource result_identifier);
function ldap_first_reference(resource link, resource result);
function ldap_free_result(resource result_identifier);
function ldap_get_attributes(resource link_identifier, resource result_entry_identifier);
function ldap_get_dn(resource link_identifier, resource result_entry_identifier);
function ldap_get_entries(resource link_identifier, resource result_identifier);
function ldap_get_option(resource link_identifier, int option, mixed retval);
function ldap_get_values_len(resource link_identifier, resource result_entry_identifier, string attribute);
function ldap_get_values(resource link_identifier, resource result_entry_identifier, string attribute);
function ldap_list(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]]);
function ldap_mod_add(resource link_identifier, string dn, array entry);
function ldap_mod_del(resource link_identifier, string dn, array entry);
function ldap_mod_replace(resource link_identifier, string dn, array entry);
function ldap_modify(resource link_identifier, string dn, array entry);
function ldap_next_attribute(resource link_identifier, resource result_entry_identifier, resource ber_identifier);
function ldap_next_entry(resource link_identifier, resource result_entry_identifier);
function ldap_next_reference(resource link, resource entry);
function ldap_parse_reference(resource link, resource entry, array referrals);
function ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals);
function ldap_read(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]]);
function ldap_rename(resource link_identifier, string dn, string newrdn, string newparent, bool deleteoldrdn);
function ldap_sasl_bind(unknown);
function ldap_search(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]]);
function ldap_set_option(resource link_identifier, int option, mixed newval);
function ldap_set_rebind_proc(resource link, string callback);
function ldap_sort(resource link, resource result, string sortfilter);
function ldap_start_tls(resource link);
function ldap_t61_to_8859(string value);
function ldap_unbind(resource link_identifier);
function ezmlm_hash(string addr);
function mail(string to, string subject, string message [, string additional_headers]);
function mailparse_determine_best_xfer_encoding(resource fp);
function mailparse_msg_create(void);
function mailparse_msg_extract_part_file(resource rfc2045, string filename [, string callbackfunc]);
function mailparse_msg_extract_part(resource rfc2045, string msgbody [, string callbackfunc]);
function mailparse_msg_free(resource rfc2045buf);
function mailparse_msg_get_part_data(resource rfc2045);
function mailparse_msg_get_part(resource rfc2045, string mimesection);
function mailparse_msg_get_structure(resource rfc2045);
function mailparse_msg_parse_file(string filename);
function mailparse_msg_parse(resource rfc2045buf, string data);
function mailparse_rfc822_parse_addresses(string addresses);
function mailparse_stream_encode(resource sourcefp, resource destfp, string encoding);
function mailparse_uudecode_all(resource fp);
function abs(mixed number);
function acos(float arg);
function acosh(float arg);
function asin(float arg);
function asinh(float arg);
function atan2(float y, float x);
function atan(float arg);
function atanh(float arg);
function base_convert(string number, int frombase, int tobase);
function bindec(string binary_string);
function ceil(float value);
function cos(float arg);
function cosh(float arg);
function decbin(int number);
function dechex(int number);
function decoct(int number);
function deg2rad(float number);
function exp(float arg);
function expm1(float number);
function floor(float value);
function fmod(float x, float y);
function getrandmax(void);
function hexdec(string hex_string);
function hypot(float num1, float num2);
function is_finite(float val);
function is_infinite(float val);
function is_nan(float val);
function lcg_value(void);
function log10(float arg);
function log1p(float number);
function log(float arg [, float base]);
function max(number arg1, number arg2 [, number ...]);
function max(array numbers [, array ...]);
function min(number arg1, number arg2 [, number ...]);
function min(array numbers [, array ...]);
function mt_getrandmax(void);
function mt_rand([int min, int max]);
function mt_srand(int seed);
function octdec(string octal_string);
function pi(void);
function pow(number base, number exp);
function rad2deg(float number);
function rand([int min, int max]);
function round(float val [, int precision]);
function sin(float arg);
function sinh(float arg);
function sqrt(float arg);
function srand(int seed);
function tan(float arg);
function tanh(float arg);
function mb_convert_case(string str, int mode [, string encoding]);
function mb_convert_encoding(string str, string to-encoding [, mixed from-encoding]);
function mb_convert_kana(string str, string option [, mixed encoding]);
function mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars);
function mb_decode_mimeheader(string str);
function mb_decode_numericentity(string str, array convmap [, string encoding]);
function mb_detect_encoding(string str [, mixed encoding-list]);
function mb_detect_order([mixed encoding-list]);
function mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]]);
function mb_encode_numericentity(string str, array convmap [, string encoding]);
function mb_ereg_match(string pattern, string string [, string option]);
function mb_ereg_replace(string pattern, string replacement, string string [, array option]);
function mb_ereg_search_getpos(void);
function mb_ereg_search_getregs(void);
function mb_ereg_search_init(string string [, string pattern [, string option]]);
function mb_ereg_search_pos([string pattern [, string option]]);
function mb_ereg_search_regs([string pattern [, string option]]);
function mb_ereg_search_setpos(void);
function mb_ereg_search([string pattern [, string option]]);
function mb_ereg(string pattern, string string [, array regs]);
function mb_eregi_replace(string pattern, string replace, string string);
function mb_eregi(string pattern, string string [, array regs]);
function mb_get_info([string type]);
function mb_http_input([string type]);
function mb_http_output([string encoding]);
function mb_internal_encoding([string encoding]);
function mb_language([string language]);
function mb_output_handler(string contents, int status);
function mb_parse_str(string encoded_string [, array result]);
function mb_preferred_mime_name(string encoding);
function mb_regex_encoding([string encoding]);
function mb_regex_set_options([string options]);
function mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameter]]);
function mb_split(string pattern, string string [, int limit]);
function mb_strcut(string str, int start [, int length [, string encoding]]);
function mb_strimwidth(string str, int start, int width, string trimmarker [, string encoding]);
function mb_strlen(string str [, string encoding]);
function mb_strpos(string haystack, string needle [, int offset [, string encoding]]);
function mb_strrpos(string haystack, string needle [, string encoding]);
function mb_strtolower(string str [, string encoding]);
function mb_strtoupper(string str [, string encoding]);
function mb_strwidth(string str [, string encoding]);
function mb_substitute_character([mixed substrchar]);
function mb_substr_count(string haystack, string needle [, string encoding]);
function mb_substr(string str, int start [, int length [, string encoding]]);
function mcal_append_event(int mcal_stream);
function mcal_close(int mcal_stream, int flags);
function mcal_create_calendar(int stream, string calendar);
function mcal_date_compare(int a_year, int a_month, int a_day, int b_year, int b_month, int b_day);
function mcal_date_valid(int year, int month, int day);
function mcal_day_of_week(int year, int month, int day);
function mcal_day_of_year(int year, int month, int day);
function mcal_days_in_month(int month, int leap_year);
function mcal_delete_calendar(int stream, string calendar);
function mcal_delete_event(int mcal_stream [, int event_id]);
function mcal_event_add_attribute(int stream, string attribute, string value);
function mcal_event_init(int stream);
function mcal_event_set_alarm(int stream, int alarm);
function mcal_event_set_category(int stream, string category);
function mcal_event_set_class(int stream, int class);
function mcal_event_set_description(int stream, string description);
function mcal_event_set_end(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]]);
function mcal_event_set_recur_daily(int stream, int year, int month, int day, int interval);
function mcal_event_set_recur_monthly_mday(int stream, int year, int month, int day, int interval);
function mcal_event_set_recur_monthly_wday(int stream, int year, int month, int day, int interval);
function mcal_event_set_recur_none(int stream);
function mcal_event_set_recur_weekly(int stream, int year, int month, int day, int interval, int weekdays);
function mcal_event_set_recur_yearly(int stream, int year, int month, int day, int interval);
function mcal_event_set_start(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]]);
function mcal_event_set_title(int stream, string title);
function mcal_expunge(int stream);
function mcal_fetch_current_stream_event(int stream);
function mcal_fetch_event(int mcal_stream, int event_id [, int options]);
function mcal_is_leap_year(int year);
function mcal_list_alarms(int mcal_stream [, int begin_year [, int begin_month [, int begin_day [, int end_year [, int end_month [, int end_day]]]]]]);
function mcal_list_events(int mcal_stream, object begin_date [, object end_date]);
function mcal_next_recurrence(int stream, int weekstart, array next);
function mcal_open(string calendar, string username, string password [, int options]);
function mcal_popen(string calendar, string username, string password [, int options]);
function mcal_rename_calendar(int stream, string old_name, string new_name);
function mcal_reopen(string calendar [, int options]);
function mcal_snooze(int stream_id, int event_id);
function mcal_store_event(int mcal_stream);
function mcal_time_valid(int hour, int minutes, int seconds);
function mcal_week_of_year(int day, int month, int year);
function mcrypt_cbc(int cipher, string key, string data, int mode [, string iv]);
function mcrypt_cbc(string cipher, string key, string data, int mode [, string iv]);
function mcrypt_cfb(int cipher, string key, string data, int mode, string iv);
function mcrypt_cfb(string cipher, string key, string data, int mode [, string iv]);
function mcrypt_create_iv(int size, int source);
function mcrypt_decrypt(string cipher, string key, string data, string mode [, string iv]);
function mcrypt_ecb(int cipher, string key, string data, int mode);
function mcrypt_ecb(string cipher, string key, string data, int mode [, string iv]);
function mcrypt_enc_get_algorithms_name(resource td);
function mcrypt_enc_get_block_size(resource td);
function mcrypt_enc_get_iv_size(resource td);
function mcrypt_enc_get_key_size(resource td);
function mcrypt_enc_get_modes_name(resource td);
function mcrypt_enc_get_supported_key_sizes(resource td);
function mcrypt_enc_is_block_algorithm_mode(resource td);
function mcrypt_enc_is_block_algorithm(resource td);
function mcrypt_enc_is_block_mode(resource td);
function mcrypt_enc_self_test(resource td);
function mcrypt_encrypt(string cipher, string key, string data, string mode [, string iv]);
function mcrypt_generic_deinit(resource td);
function mcrypt_generic_end(resource td);
function mcrypt_generic_init(resource td, string key, string iv);
function mcrypt_generic(resource td, string data);
function mcrypt_get_block_size(int cipher);
function mcrypt_get_block_size(string cipher, string module);
function mcrypt_get_cipher_name(int cipher);
function mcrypt_get_cipher_name(string cipher);
function mcrypt_get_iv_size(resource td);
function mcrypt_get_iv_size(string cipher, string mode);
function mcrypt_get_key_size(int cipher);
function mcrypt_get_key_size(string cipher, string module);
function mcrypt_list_algorithms([string lib_dir]);
function mcrypt_list_modes([string lib_dir]);
function mcrypt_module_close(resource td);
function mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir]);
function mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir]);
function mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir]);
function mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir]);
function mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir]);
function mcrypt_module_is_block_mode(string mode [, string lib_dir]);
function mcrypt_module_open(string algorithm, string algorithm_directory, string mode, string mode_directory);
function mcrypt_module_self_test(string algorithm [, string lib_dir]);
function mcrypt_ofb(int cipher, string key, string data, int mode, string iv);
function mcrypt_ofb(string cipher, string key, string data, int mode [, string iv]);
function mdecrypt_generic(resource td, string data);
function mcve_adduser(resource conn, string admin_password, int usersetup);
function mcve_adduserarg(resource usersetup, int argtype, string argval);
function mcve_bt(resource conn, string username, string password);
function mcve_checkstatus(resource conn, int identifier);
function mcve_chkpwd(resource conn, string username, string password);
function mcve_chngpwd(resource conn, string admin_password, string new_password);
function mcve_completeauthorizations(resource conn, int&array);
function mcve_connect(resource conn);
function mcve_connectionerror(resource conn);
function mcve_deleteresponse(resource conn, int identifier);
function mcve_deletetrans(resource conn, int identifier);
function mcve_deleteusersetup(resource usersetup);
function mcve_deluser(resource conn, string admin_password, string username);
function mcve_destroyconn(resource conn);
function mcve_destroyengine(void);
function mcve_disableuser(resource conn, string admin_password, string username);
function mcve_edituser(resource conn, string admin_password, int usersetup);
function mcve_enableuser(resource conn, string admin_password, string username);
function mcve_force(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum);
function mcve_getcell(resource conn, int identifier, string column, int row);
function mcve_getcellbynum(resource conn, int identifier, int column, int row);
function mcve_getcommadelimited(resource conn, int identifier);
function mcve_getheader(resource conn, int identifier, int column_num);
function mcve_getuserarg(resource usersetup, int argtype);
function mcve_getuserparam(resource conn, long identifier, int key);
function mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate);
function mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate);
function mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate);
function mcve_initconn(void);
function mcve_initengine(string location);
function mcve_initusersetup(void);
function mcve_iscommadelimited(resource conn, int identifier);
function mcve_liststats(resource conn, string admin_password);
function mcve_listusers(resource conn, string admin_password);
function mcve_maxconntimeout(resource conn, int secs);
function mcve_monitor(resource conn);
function mcve_numcolumns(resource conn, int identifier);
function mcve_numrows(resource conn, int identifier);
function mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum);
function mcve_parsecommadelimited(resource conn, int identifier);
function mcve_ping(resource conn);
function mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum);
function mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum);
function mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum);
function mcve_responseparam(resource conn, long identifier, string key);
function mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum);
function mcve_returncode(resource conn, int identifier);
function mcve_returnstatus(resource conn, int identifier);
function mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum);
function mcve_setblocking(resource conn, int tf);
function mcve_setdropfile(resource conn, string directory);
function mcve_setip(resource conn, string host, int port);
function mcve_setssl_files(string sslkeyfile, string sslcertfile);
function mcve_setssl(resource conn, string host, int port);
function mcve_settimeout(resource conn, int seconds);
function mcve_settle(resource conn, string username, string password, string batch);
function mcve_text_avs(string code);
function mcve_text_code(string code);
function mcve_text_cv(int code);
function mcve_transactionauth(resource conn, int identifier);
function mcve_transactionavs(resource conn, int identifier);
function mcve_transactionbatch(resource conn, int identifier);
function mcve_transactioncv(resource conn, int identifier);
function mcve_transactionid(resource conn, int identifier);
function mcve_transactionitem(resource conn, int identifier);
function mcve_transactionssent(resource conn);
function mcve_transactiontext(resource conn, int identifier);
function mcve_transinqueue(resource conn);
function mcve_transnew(resource conn);
function mcve_transparam(resource conn, long identifier, int key);
function mcve_transsend(resource conn, long identifier);
function mcve_ub(resource conn, string username, string password);
function mcve_uwait(long microsecs);
function mcve_verifyconnection(resource conn, int tf);
function mcve_verifysslcert(resource conn, int tf);
function mcve_void(resource conn, string username, string password, int sid, int ptrannum);
function mhash_count(void);
function mhash_get_block_size(int hash);
function mhash_get_hash_name(int hash);
function mhash_keygen_s2k(int hash, string password, string salt, int bytes);
function mhash(int hash, string data, string [ key ]);
function mime_content_type(string filename);
function mssql_bind(resource stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]]);
function mssql_close([resource link_identifier]);
function mssql_connect([string servername [, string username [, string password]]]);
function mssql_data_seek(resource result_identifier, int row_number);
function mssql_execute(resource stmt [, bool skip_results]);
function mssql_fetch_array(resource result [, int result_type]);
function mssql_fetch_assoc(resource result_id);
function mssql_fetch_batch(resource result_index);
function mssql_fetch_field(resource result [, int field_offset]);
function mssql_fetch_object(resource result);
function mssql_fetch_row(resource result);
function mssql_field_length(resource result [, int offset]);
function mssql_field_name(resource result [, int offset]);
function mssql_field_seek(resource result, int field_offset);
function mssql_field_type(resource result [, int offset]);
function mssql_free_result(resource result);
function mssql_free_statement(resource statement);
function mssql_get_last_message(void);
function mssql_guid_string(string binary [, int short_format]);
function mssql_init(string sp_name [, resource conn_id]);
function mssql_min_error_severity(int severity);
function mssql_min_message_severity(int severity);
function mssql_next_result(resource result_id);
function mssql_num_fields(resource result);
function mssql_num_rows(resource result);
function mssql_pconnect([string servername [, string username [, string password]]]);
function mssql_query(string query [, resource link_identifier [, int batch_size]]);
function mssql_result(resource result, int i, mixed field);
function mssql_rows_affected(resource conn_id);
function mssql_select_db(string database_name [, resource link_identifier]);
function ming_setcubicthreshold(int threshold);
function ming_setscale(int scale);
function ming_useswfversion(int version);
function swfaction(string script);
function swfbutton_keypress(string str);
class SWFBitmap {
	function SWFBitmap(string filename [, int alphafilename]);
	function getheight(void);
	function getwidth(void);
};
class SWFbutton {
	function SWFbutton(void);
	function addaction(resource action, int flags);
	function addshape(resource shape, int flags);
	function setaction(resource action);
	function setdown(resource shape);
	function sethit(resource shape);
	function setover(resource shape);
	function setup(resource shape);
};
class SWFDisplayItem {
	function SWFDisplayItem(void);
	function addcolor([int red [, int green [, int blue [, int a]]]]);
	function move(int dx, int dy);
	function moveto(int x, int y);
	function multcolor([int red [, int green [, int blue [, int a]]]]);
	function remove(void);
	function rotate(float ddegrees);
	function rotateto(float degrees);
	function scale(int dx, int dy);
	function scaleto(int x, int y);
	function setdepth(float depth);
	function setname(string name);
	function setratio(float ratio);
	function skewx(float ddegrees);
	function skewxto(float degrees);
	function skewy(float ddegrees);
	function skewyto(float degrees);
};
class SWFFill {
	function SWFFill(void);
	function moveto(int x, int y);
	function rotateto(float degrees);
	function scaleto(int x, int y);
	function skewxto(float x);
	function skewyto(float y);
};
class SWFFont {
	function SWFFont(string filename);
	function getwidth(string string);
};
class SWFGradient {
	function SWFGradient(void);
	function addentry(float ratio, int red, int green, int blue [, int a]);
};
class SWFMorph {
	function SWFMorph(void);
	function getshape1(void);
	function getshape2(void);
};
class SWFMovie {
	function SWFMovie(void);
	function add(resource instance);
	function nextframe(void);
	function output(void);
	function remove(resource instance);
	function save(string filename);
	function setbackground(int red, int green, int blue);
	function setdimension(int width, int height);
	function setframes(string numberofframes);
	function setrate(int rate);
	function streammp3(string mp3FileName);
};
class SWFShape {
	function SWFShape(void);
	function addfill(int red, int green, int blue [, int a]);
	function addfill(SWFbitmap bitmap [, int flags]);
	function addfill(SWFGradient gradient [, int flags]);
	function drawcurve(int controldx, int controldy, int anchordx, int anchordy);
	function drawcurveto(int controlx, int controly, int anchorx, int anchory);
	function drawline(int dx, int dy);
	function drawlineto(int x, int y);
	function movepen(int dx, int dy);
	function movepento(int x, int y);
	function setleftfill(swfgradient fill);
	function setleftfill(int red, int green, int blue [, int a]);
	function setline(int width [, int red [, int green [, int blue [, int a]]]]);
	function setrightfill(swfgradient fill);
	function setrightfill(int red, int green, int blue [, int a]);
};
class SWFSprite {
	function SWFSprite(void);
	function add(resource object);
	function nextframe(void);
	function remove(resource object);
	function setframes(int numberofframes);
};
class SWFText {
	function SWFText(void);
	function addstring(string string);
	function getwidth(string string);
	function moveto(int x, int y);
	function setcolor(int red, int green, int blue [, int a]);
	function setfont(string font);
	function setheight(int height);
	function setspacing(float spacing);
};
class SWFTextField {
	function SWFTextField([int flags]);
	function addstring(string string);
	function align(int alignement);
	function setbounds(int width, int height);
	function setcolor(int red, int green, int blue [, int a]);
	function setfont(string font);
	function setheight(int height);
	function setindentation(int width);
	function setleftmargin(int width);
	function setlinespacing(int height);
	function setmargins(int left, int right);
	function setname(string name);
	function setrightmargin(int width);
};
function connection_aborted(void);
function connection_status(void);
function connection_timeout(void);
function constant(string name);
function define(string name, mixed value [, int case_insensitive]);
function defined(string name);
function die(string message);
function eval(string code_str);
function exit(void);
function get_browser([string user_agent]);
function highlight_file(string filename);
function highlight_string(string str);
function ignore_user_abort([int setting]);
function pack(string format [, mixed args]);
function show_source(string filename);
function sleep(int seconds);
function uniqid(string prefix [, boolean lcg]);
function unpack(string format, string data);
function usleep(int micro_seconds);
function udm_add_search_limit(resource agent, int var, string val);
function udm_alloc_agent(string dbaddr [, string dbmode]);
function udm_api_version(void);
function udm_cat_list(resource agent, string category);
function udm_cat_path(resource agent, string category);
function udm_check_charset(resource agent, string charset);
function udm_check_stored(resource agent, int link, string doc_id);
function udm_clear_search_limits(resource agent);
function udm_close_stored(resource agent, int link);
function udm_crc32(resource agent, string str);
function udm_errno(resource agent);
function udm_error(resource agent);
function udm_find(resource agent, string query);
function udm_free_agent(resource agent);
function udm_free_ispell_data(int agent);
function udm_free_res(resource res);
function udm_get_doc_count(resource agent);
function udm_get_res_field(resource res, int row, int field);
function udm_get_res_param(resource res, int param);
function udm_load_ispell_data(resource agent, int var, string val1, string val2, int flag);
function udm_open_stored(resource agent, string storedaddr);
function udm_set_agent_param(resource agent, int var, string val);
function msql_affected_rows(int query_identifier);
function msql_close(int link_identifier);
function msql_connect([string hostname [, string server [, string username [, string password]]]]);
function msql_create_db(string database_name [, int link_identifier]);
function msql_createdb(string database_name [, int link_identifier]);
function msql_data_seek(int query_identifier, int row_number);
function msql_dbname(int query_identifier, int i);
function msql_drop_db(string database_name, int link_identifier);
function msql_error([int link_identifier]);
function msql_fetch_array(int query_identifier [, int result_type]);
function msql_fetch_field(int query_identifier, int field_offset);
function msql_fetch_object(int query_identifier [, int result_type]);
function msql_fetch_row(int query_identifier);
function msql_field_seek(int query_identifier, int field_offset);
function msql_fieldflags(int query_identifier, int i);
function msql_fieldlen(int query_identifier, int i);
function msql_fieldname(int query_identifier, int field);
function msql_fieldtable(int query_identifier, int field);
function msql_fieldtype(int query_identifier, int i);
function msql_free_result(int query_identifier);
function msql_list_dbs(void);
function msql_list_fields(string database, string tablename);
function msql_list_tables(string database);
function msql_num_fields(int query_identifier);
function msql_num_rows(resource query_identifier);
function msql_numfields(int query_identifier);
function msql_numrows(void);
function msql_pconnect([string server [, string username [, string password]]]);
function msql_query(string query, int link_identifier);
function msql_result(int query_identifier, int i, mixed field);
function msql_select_db(string database_name, int link_identifier);
function msql_tablename(int query_identifier, int field);
function msql(string database, string query, int link_identifier);
function mysql_affected_rows([resource link_identifier]);
function mysql_change_user(string user, string password [, string database [, resource link_identifier]]);
function mysql_client_encoding([resource link_identifier]);
function mysql_close([resource link_identifier]);
function mysql_connect([string server [, string username [, string password [, bool new_link [, int client_flags]]]]]);
function mysql_create_db(string database_name [, resource link_identifier]);
function mysql_data_seek(resource result, int row_number);
function mysql_db_name(resource result, int row [, mixed field]);
function mysql_db_query(string database, string query [, resource link_identifier]);
function mysql_drop_db(string database_name [, resource link_identifier]);
function mysql_errno([resource link_identifier]);
function mysql_error([resource link_identifier]);
function mysql_escape_string(string unescaped_string);
function mysql_fetch_array(resource result [, int result_type]);
function mysql_fetch_assoc(resource result);
function mysql_fetch_field(resource result [, int field_offset]);
function mysql_fetch_lengths(resource result);
function mysql_fetch_object(resource result [, string class_name [, array params]]);
function mysql_fetch_row(resource result);
function mysql_field_flags(resource result, int field_offset);
function mysql_field_len(resource result, int field_offset);
function mysql_field_name(resource result, int field_offset);
function mysql_field_seek(resource result, int field_offset);
function mysql_field_table(resource result, int field_offset);
function mysql_field_type(resource result, int field_offset);
function mysql_free_result(resource result);
function mysql_get_client_info(void );
function mysql_get_host_info([resource link_identifier]);
function mysql_get_proto_info([resource link_identifier]);
function mysql_get_server_info([resource link_identifier]);
function mysql_info([resource link_identifier]);
function mysql_insert_id([resource link_identifier]);
function mysql_list_dbs([resource link_identifier]);
function mysql_list_fields(string database_name, string table_name [, resource link_identifier]);
function mysql_list_processes([resource link_identifier]);
function mysql_list_tables(string database [, resource link_identifier]);
function mysql_num_fields(resource result);
function mysql_num_rows(resource result);
function mysql_pconnect([string server [, string username [, string password [, int client_flags]]]]);
function mysql_ping([resource link_identifier]);
function mysql_query(string query [, resource link_identifier]);
function mysql_real_escape_string(string unescaped_string [, resource link_identifier]);
function mysql_result(resource result, int row [, mixed field]);
function mysql_select_db(string database_name [, resource link_identifier]);
function mysql_set_charset(string charset [, resource link_identifier]);
function mysql_stat([resource link_identifier]);
function mysql_tablename(resource result, int i);
function mysql_thread_id([resource link_identifier]);
function mysql_unbuffered_query(string query [, resource link_identifier]);
function mysqli_affected_rows(object link);
function mysqli_autocommit(object link, bool mode);
function mysqli_bind_param(object stmt, array types, mixed var1 [, mixed var2, ...]);
function mysqli_bind_result(resource stmt, mixed var, int len);
function mysqli_change_user(resource link, string user, string password, string database);
function mysqli_character_set_name(resource link);
function mysqli_close(resource link);
function mysqli_commit(resource link);
function mysqli_connect([string hostname [, string username [, string passwd [, string dbname [, int port [, string socket]]]]]]);
function mysqli_data_seek(resource result, int offset);
function mysqli_debug(string debug);
function mysqli_disable_reads_from_master(resource link);
function mysqli_disable_rpl_parse(resource link);
function mysqli_dump_debug_info(resource link);
function mysqli_enable_reads_from_master(resource link);
function mysqli_enable_rpl_parse(resource link);
function mysqli_errno(resource link);
function mysqli_error(resource link);
function mysqli_execute(resource stmt);
function mysqli_fetch_array(resource result [, int resulttype]);
function mysqli_fetch_assoc(resource result);
function mysqli_fetch_field_direct(resource result, int offset);
function mysqli_fetch_field(resource result);
function mysqli_fetch_fields(resource result);
function mysqli_fetch_lengths(resource result);
function mysqli_fetch_object(resource result);
function mysqli_fetch_row(resource result);
function mysqli_fetch(resource stmt);
function mysqli_field_count(resource link);
function mysqli_field_seek(resource link, int fieldnr);
function mysqli_field_tell(resource result);
function mysqli_free_result(resource result);
function mysqli_get_client_info(void);
function mysqli_get_host_info(resource link);
function mysqli_get_proto_info(resource link);
function mysqli_get_server_info(resource link);
function mysqli_get_server_version(resource link);
function mysqli_info(resource link);
function mysqli_init(void);
function mysqli_insert_id(resource link);
function mysqli_kill(resource link, int processid);
function mysqli_master_query(resource link, string query);
function mysqli_num_fields(resource result);
function mysqli_num_rows(resource result);
function mysqli_options(resource link, int flags, mixed values);
function mysqli_param_count(resource stmt);
function mysqli_ping(resource link);
function mysqli_prepare_result(resource stmt);
function mysqli_prepare(resource link, string query);
function mysqli_profiler(int flags, string info, int port);
function mysqli_query(resource link, string query [, int resultmode]);
function mysqli_read_query_result(resource link);
function mysqli_real_connect(resource link [, string hostname [, string username [, string passwd [, string dbname [, int port [, string socket]]]]]]);
function mysqli_real_escape_string(resource link, string escapestr);
function mysqli_real_query(resource link, string query);
function mysqli_reload(resource link);
function mysqli_rollback(resource link);
function mysqli_rpl_parse_enabled(resource link);
function mysqli_rpl_probe(resource link);
function mysqli_rpl_query_type(string query);
function mysqli_select_db(resource link, string dbname);
function mysqli_send_long_data(resource stmt, int param_nr, string data);
function mysqli_send_query(resource link, string query);
function mysqli_slave_query(resource link, string query);
function mysqli_ssl_set(resource link [, string key [, string cert [, string ca [, string capath [, string cipher]]]]]);
function mysqli_stat(resource link);
function mysqli_stmt_affected_rows(object stmt);
function mysqli_stmt_close(resource stmt);
function mysqli_stmt_errno(resource stmt);
function mysqli_stmt_error(resource stmt);
function mysqli_stmt_store_result(resource stmt);
function mysqli_store_result(resource link);
function mysqli_thread_id(resource link);
function mysqli_thread_safe(void);
function mysqli_use_result(resource link);
function mysqli_warning_count(resource link);
function msession_connect(string host, string port);
function msession_count(void);
function msession_create(string session);
function msession_destroy(string name);
function msession_disconnect(void);
function msession_find(string name, string value);
function msession_get_array(string session);
function msession_get(string session, string name, string value);
function msession_getdata(string session);
function msession_inc(string session, string name);
function msession_list(void);
function msession_listvar(string name);
function msession_lock(string name);
function msession_plugin(string session, string val [, string param]);
function msession_randstr(int param);
function msession_set_array(string session, array tuples);
function msession_set(string session, string name, string value);
function msession_setdata(string session, string value);
function msession_timeout(string session [, int param]);
function msession_uniq(int param);
function msession_unlock(string session, int key);
function muscat_close(resource muscat_handle);
function muscat_get(resource muscat_handle);
function muscat_give(resource muscat_handle, string string);
function muscat_setup_net(string muscat_host, int port);
function muscat_setup(int size [, string muscat_dir]);
function checkdnsrr(string host [, string type]);
function closelog(void);
function debugger_off(void);
function debugger_on(string address);
function define_syslog_variables(void);
function dns_check_record(string host [, string type]);
function dns_get_mx(string hostname, array mxhosts [, array&weight]);
function dns_get_record(string hostname [, int type [, array&authns, array&addtl]]);
function fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]]);
function gethostbyaddr(string ip_address);
function gethostbyname(string hostname);
function gethostbynamel(string hostname);
function getmxrr(string hostname, array mxhosts [, array weight]);
function getprotobyname(string name);
function getprotobynumber(int number);
function getservbyname(string service, string protocol);
function getservbyport(int port, string protocol);
function ip2long(string ip_address);
function long2ip(int proper_address);
function openlog(string ident, int option, int facility);
function pfsockopen(string hostname, int port [, int errno [, string errstr [, int timeout]]]);
function socket_get_status(resource socketstream);
function socket_set_blocking(int socket descriptor, int mode);
function socket_set_timeout(int socket descriptor, int seconds, int microseconds);
function syslog(int priority, string message);
function ncurses_addch(int ch);
function ncurses_addchnstr(string s, int n);
function ncurses_addchstr(string s);
function ncurses_addnstr(string s, int n);
function ncurses_addstr(string text);
function ncurses_assume_default_colors(int fg, int bg);
function ncurses_attroff(int attributes);
function ncurses_attron(int attributes);
function ncurses_attrset(int attributes);
function ncurses_baudrate(void);
function ncurses_beep(void);
function ncurses_bkgd(int attrchar);
function ncurses_bkgdset(int attrchar);
function ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner);
function ncurses_bottom_panel(resource panel);
function ncurses_can_change_color(void);
function ncurses_cbreak(void);
function ncurses_clear(void);
function ncurses_clrtobot(void);
function ncurses_clrtoeol(void);
function ncurses_color_content(int color, int&r, int&g, int&b);
function ncurses_color_set(int pair);
function ncurses_curs_set(int visibility);
function ncurses_def_prog_mode(void);
function ncurses_def_shell_mode(void);
function ncurses_define_key(string definition, int keycode);
function ncurses_del_panel(resource panel);
function ncurses_delay_output(int milliseconds);
function ncurses_delch(void);
function ncurses_deleteln(void);
function ncurses_delwin(resource window);
function ncurses_doupdate(void);
function ncurses_echo(void);
function ncurses_echochar(int character);
function ncurses_end(void);
function ncurses_erase(void);
function ncurses_erasechar(void);
function ncurses_filter(void);
function ncurses_flash(void);
function ncurses_flushinp(void);
function ncurses_getch(void);
function ncurses_getmaxyx(resource window, int&y, int&x);
function ncurses_getmouse(array mevent);
function ncurses_getyx(resource window, int&y, int&x);
function ncurses_halfdelay(int tenth);
function ncurses_has_colors(void);
function ncurses_has_ic(void);
function ncurses_has_il(void);
function ncurses_has_key(int keycode);
function ncurses_hide_panel(resource panel);
function ncurses_hline(int charattr, int n);
function ncurses_inch(void);
function ncurses_init_color(int color, int r, int g, int b);
function ncurses_init_pair(int pair, int fg, int bg);
function ncurses_init(void);
function ncurses_insch(int character);
function ncurses_insdelln(int count);
function ncurses_insertln(void);
function ncurses_insstr(string text);
function ncurses_instr(string buffer);
function ncurses_isendwin(void);
function ncurses_keyok(int keycode, bool enable);
function ncurses_keypad(resource window, bool bf);
function ncurses_killchar(void);
function ncurses_longname(void);
function ncurses_meta(resource window, bool 8bit);
function ncurses_mouse_trafo(int&y, int&x, bool toscreen);
function ncurses_mouseinterval(int milliseconds);
function ncurses_mousemask(int newmask, int oldmask);
function ncurses_move_panel(resource panel, int startx, int starty);
function ncurses_move(int y, int x);
function ncurses_mvaddch(int y, int x, int c);
function ncurses_mvaddchnstr(int y, int x, string s, int n);
function ncurses_mvaddchstr(int y, int x, string s);
function ncurses_mvaddnstr(int y, int x, string s, int n);
function ncurses_mvaddstr(int y, int x, string s);
function ncurses_mvcur(int old_y, int old_x, int new_y, int new_x);
function ncurses_mvdelch(int y, int x);
function ncurses_mvgetch(int y, int x);
function ncurses_mvhline(int y, int x, int attrchar, int n);
function ncurses_mvinch(int y, int x);
function ncurses_mvvline(int y, int x, int attrchar, int n);
function ncurses_mvwaddstr(resource window, int y, int x, string text);
function ncurses_napms(int milliseconds);
function ncurses_new_panel(resource window);
function ncurses_newpad(int rows, int cols);
function ncurses_newwin(int rows, int cols, int y, int x);
function ncurses_nl(void);
function ncurses_nocbreak(void);
function ncurses_noecho(void);
function ncurses_nonl(void);
function ncurses_noqiflush(void);
function ncurses_noraw(void);
function ncurses_pair_content(int pair, int&f, int&b);
function ncurses_panel_above(resource panel);
function ncurses_panel_below(resource panel);
function ncurses_panel_window(resource panel);
function ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
function ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
function ncurses_putp(string text);
function ncurses_qiflush(void);
function ncurses_raw(void);
function ncurses_refresh(int ch);
function ncurses_replace_panel(resource panel, resource window);
function ncurses_reset_prog_mode(void);
function ncurses_reset_shell_mode(void);
function ncurses_resetty(void);
function ncurses_savetty(void);
function ncurses_scr_dump(string filename);
function ncurses_scr_init(string filename);
function ncurses_scr_restore(string filename);
function ncurses_scr_set(string filename);
function ncurses_scrl(int count);
function ncurses_show_panel(resource panel);
function ncurses_slk_attr(void);
function ncurses_slk_attroff(int intarg);
function ncurses_slk_attron(int intarg);
function ncurses_slk_attrset(int intarg);
function ncurses_slk_clear(void);
function ncurses_slk_color(int intarg);
function ncurses_slk_init(int format);
function ncurses_slk_noutrefresh(void);
function ncurses_slk_refresh(void);
function ncurses_slk_restore(void);
function ncurses_slk_set(int labelnr, string label, int format);
function ncurses_slk_touch(void);
function ncurses_standend(void);
function ncurses_standout(void);
function ncurses_start_color(void);
function ncurses_termattrs(void);
function ncurses_termname(void);
function ncurses_timeout(int millisec);
function ncurses_top_panel(resource panel);
function ncurses_typeahead(int fd);
function ncurses_ungetch(int keycode);
function ncurses_ungetmouse(array mevent);
function ncurses_update_panels(void);
function ncurses_use_default_colors(void);
function ncurses_use_env(bool flag);
function ncurses_use_extended_names(bool flag);
function ncurses_vidattr(int intarg);
function ncurses_vline(int charattr, int n);
function ncurses_waddch(resource window, int ch);
function ncurses_waddstr(resource window, string str [, int n]);
function ncurses_wattroff(resource window, int attrs);
function ncurses_wattron(resource window, int attrs);
function ncurses_wattrset(resource window, int attrs);
function ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner);
function ncurses_wclear(resource window);
function ncurses_wcolor_set(resource window, int color_pair);
function ncurses_werase(resource window);
function ncurses_wgetch(resource window);
function ncurses_whline(resource window, int charattr, int n);
function ncurses_wmouse_trafo(resource window, int&y, int&x, bool toscreen);
function ncurses_wmove(resource window, int y, int x);
function ncurses_wnoutrefresh(resource window);
function ncurses_wrefresh(resource window);
function ncurses_wstandend(resource window);
function ncurses_wstandout(resource window);
function ncurses_wvline(resource window, int charattr, int n);
function notes_body(string server, string mailbox, int msg_number);
function notes_copy_db(string from_database_name, string to_database_name);
function notes_create_db(string database_name);
function notes_create_note(string database_name, string form_name);
function notes_drop_db(string database_name);
function notes_find_note(string database_name, string name [, string type]);
function notes_header_info(string server, string mailbox, int msg_number);
function notes_list_msgs(string db);
function notes_mark_read(string database_name, string user_name, string note_id);
function notes_mark_unread(string database_name, string user_name, string note_id);
function notes_nav_create(string database_name, string name);
function notes_search(string database_name, string keywords);
function notes_unread(string database_name, string user_name);
function notes_version(string database_name);
function nsapi_request_headers(void);
function nsapi_response_headers(void);
function nsapi_virtual(string uri);
function odbc_autocommit(resource connection_id [, bool OnOff]);
function odbc_binmode(resource result_id, int mode);
function odbc_close_all(void);
function odbc_close(resource connection_id);
function odbc_columnprivileges(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]]);
function odbc_columns(resource connection_id [, string qualifier [, string schema [, string table_name [, string column_name]]]]);
function odbc_commit(resource connection_id);
function odbc_connect(string dsn, string user, string password [, int cursor_type]);
function odbc_cursor(resource result_id);
function odbc_data_source(resource connection_id, constant fetch_type);
function odbc_do(resource conn_id, string query);
function odbc_error([resource connection_id]);
function odbc_errormsg([resource connection_id]);
function odbc_exec(resource connection_id, string query_string);
function odbc_execute(resource result_id [, array parameters_array]);
function odbc_fetch_array(resource result [, int rownumber]);
function odbc_fetch_into(resource result_id [, int rownumber, array result_array]);
function odbc_fetch_into(resource result_id, array result_array [, int rownumber]);
function odbc_fetch_object(resource result [, int rownumber]);
function odbc_fetch_row(resource result_id [, int row_number]);
function odbc_field_len(resource result_id, int field_number);
function odbc_field_name(resource result_id, int field_number);
function odbc_field_num(resource result_id, string field_name);
function odbc_field_precision(resource result_id, int field_number);
function odbc_field_scale(resource result_id, int field_number);
function odbc_field_type(resource result_id, int field_number);
function odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table);
function odbc_free_result(resource result_id);
function odbc_gettypeinfo(resource connection_id [, int data_type]);
function odbc_longreadlen(resource result_id, int length);
function odbc_next_result(resource result_id);
function odbc_num_fields(resource result_id);
function odbc_num_rows(resource result_id);
function odbc_pconnect(string dsn, string user, string password [, int cursor_type]);
function odbc_prepare(resource connection_id, string query_string);
function odbc_primarykeys(resource connection_id, string qualifier, string owner, string table);
function odbc_procedurecolumns(resource connection_id [, string qualifier [, string owner [, string proc [, string column]]]]);
function odbc_procedures(resource connection_id [, string qualifier [, string owner [, string name]]]);
function odbc_result_all(resource result_id [, string format]);
function odbc_result(resource result_id, mixed field);
function odbc_rollback(resource connection_id);
function odbc_setoption(resource id, int function, int option, int param);
function odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable);
function odbc_statistics(resource connection_id, string qualifier, string owner, string table_name, int unique, int accuracy);
function odbc_tableprivileges(resource connection_id [, string qualifier [, string owner [, string name]]]);
function odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string types]]]]);
function aggregate_info(object object);
function aggregate_methods_by_list(object object, string class_name, array methods_list [, bool exclude]);
function aggregate_methods_by_regexp(object object, string class_name, string regexp [, bool exclude]);
function aggregate_methods(object object, string class_name);
function aggregate_properties_by_list(object object, string class_name, array properties_list [, bool exclude]);
function aggregate_properties_by_regexp(object object, string class_name, string regexp [, bool exclude]);
function aggregate_properties(object object, string class_name);
function aggregate(object object, string class_name);
function deaggregate(object object [, string class_name]);
function ocibindbyname(resource stmt, string ph_name, mixed&variable [, int maxlength [, int type]]);
function ocicancel(resource stmt);
function ocicloselob(void);
function ocicollappend(string value);
function ocicollassign(object from);
function ocicollassignelem(int ndx, string val);
function ocicollgetelem(int ndx);
function ocicollmax(void);
function ocicollsize(void);
function ocicolltrim(int num);
function ocicolumnisnull(resource stmt, mixed col);
function ocicolumnname(resource stmt, int col);
function ocicolumnprecision(resource stmt, int col);
function ocicolumnscale(resource stmt, int col);
function ocicolumnsize(resource stmt, mixed column);
function ocicolumntype(resource stmt, int col);
function ocicolumntyperaw(resource stmt, int col);
function ocicommit(resource connection);
function ocidefinebyname(resource stmt, string column_name, mixed&variable [, int type]);
function ocierror([resource stmt|conn|global]);
function ociexecute(resource stmt [, int mode]);
function ocifetch(resource stmt);
function ocifetchinto(resource stmt, array&result [, int mode]);
function ocifetchstatement(resource stmt, array&output [, int skip [, int maxrows [, int flags]]]);
function ocifreecollection(void);
function ocifreecursor(resource stmt);
function ocifreedesc(void);
function ocifreestatement(resource stmt);
function ociinternaldebug(int onoff);
function ociloadlob(void);
function ocilogoff(resource connection);
function ocilogon(string username, string password [, string db]);
function ocinewcollection(resource connection, string tdo [, string schema]);
function ocinewcursor(resource conn);
function ocinewdescriptor(resource connection [, int type]);
function ocinlogon(string username, string password [, string db]);
function ocinumcols(resource stmt);
function ociparse(resource conn, string query);
function ociplogon(string username, string password [, string db]);
function ociresult(resource statement, mixed col);
function ocirollback(resource connection);
function ocirowcount(resource stmt);
function ocisavelob(void);
function ocisavelobfile(void);
function ociserverversion(resource conn);
function ocisetprefetch(resource stmt, int rows);
function ocistatementtype(resource stmt);
function ociwritelobtofile([string filename [, int start [, int length]]]);
function ociwritetemporarylob(string var [, int lob_type]);
function openssl_csr_export_to_file(resource csr, string outfilename [, bool notext]);
function openssl_csr_export(resource csr, string&out [, bool notext]);
function openssl_csr_new(array dn, resource privkey [, array configargs [, array extraattribs]]);
function openssl_csr_sign(mixed csr, mixed cacert, mixed priv_key, int days);
function openssl_error_string(void);
function openssl_free_key(int key_identifier);
function openssl_get_privatekey(string key [, string passphrase]);
function openssl_get_publickey(string certificate);
function openssl_open(string sealed_data, string open_data, string env_key, int priv_key_id);
function openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey]);
function openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, int flags]);
function openssl_pkcs7_sign(string infilename, string outfilename, mixed signcert, mixed privkey, array headers [, int flags [, string extracerts]]);
function openssl_pkcs7_verify(string filename, int flags [, string outfilename [, array cainfo [, string extracerts]]]);
function openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase [, array configargs]]);
function openssl_pkey_export(mixed key, string&out [, string passphrase [, array configargs]]);
function openssl_get_privatekey(mixed key [, string passphrase]);
function openssl_pkey_get_public(mixed certificate);
function openssl_pkey_new([array configargs]);
function openssl_private_decrypt(string data, string&decrypted, mixed key [, int padding]);
function openssl_private_encrypt(string data, string crypted, mixed key [, int padding]);
function openssl_public_decrypt(string data, string crypted, resource key [, int padding]);
function openssl_public_encrypt(string data, string crypted, mixed key [, int padding]);
function openssl_seal(string data, string sealed_data, array env_keys, array pub_key_ids);
function openssl_sign(string data, string signature, int priv_key_id);
function openssl_verify(string data, string signature, int pub_key_id);
function openssl_x509_check_private_key(mixed cert, mixed key);
function openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile]);
function openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext]);
function openssl_x509_export(mixed x509, string&output [, bool notext]);
function openssl_x509_free(resource x509cert);
function openssl_x509_parse(mixed x509cert [, bool shortnames]);
function openssl_x509_read(mixed x509certdata);
function ora_bind(resource cursor, string PHP_variable_name, string SQL_parameter_name, int length [, int type]);
function ora_close(resource cursor);
function ora_columnname(resource cursor, int column);
function ora_columnsize(resource cursor, int column);
function ora_columntype(resource cursor, int column);
function ora_commit(resource conn);
function ora_commitoff(resource conn);
function ora_commiton(resource conn);
function ora_do(resource conn, string query);
function ora_error(resource cursor_or_connection);
function ora_errorcode(resource cursor_or_connection);
function ora_exec(resource cursor);
function ora_fetch_into(resource cursor, array result [, int flags]);
function ora_fetch(resource cursor);
function ora_getcolumn(resource cursor, int column);
function ora_logoff(resource connection);
function ora_logon(string user, string password);
function ora_numcols(resource cursor);
function ora_numrows(resource cursor);
function ora_open(resource connection);
function ora_parse(resource cursor, string sql_statement, int defer);
function ora_plogon(string user, string password);
function ora_rollback(resource connection);
function ovrimos_close(int connection);
function ovrimos_commit(int connection_id);
function ovrimos_connect(string host, string db, string user, string password);
function ovrimos_cursor(int result_id);
function ovrimos_exec(int connection_id, string query);
function ovrimos_execute(int result_id [, array parameters_array]);
function ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]]);
function ovrimos_fetch_row(int result_id [, int how [, int row_number]]);
function ovrimos_field_len(int result_id, int field_number);
function ovrimos_field_name(int result_id, int field_number);
function ovrimos_field_num(int result_id, string field_name);
function ovrimos_field_type(int result_id, int field_number);
function ovrimos_free_result(int result_id);
function ovrimos_longreadlen(int result_id, int length);
function ovrimos_num_fields(int result_id);
function ovrimos_num_rows(int result_id);
function ovrimos_prepare(int connection_id, string query);
function ovrimos_result_all(int result_id [, string format]);
function ovrimos_result(int result_id, mixed field);
function ovrimos_rollback(int connection_id);
function flush(void);
function ob_clean(void);
function ob_end_clean(void);
function ob_end_flush(void);
function ob_flush(void);
function ob_get_clean(void);
function ob_get_contents(void);
function ob_get_length(void);
function ob_get_level(void);
function ob_get_status([bool full_status]);
function ob_gzhandler(string buffer [, int mode]);
function ob_implicit_flush([int flag]);
function ob_start([string output_callback]);
function overload([string class_name]);
function pdf_add_annotation(int pdf document, double llx, double lly, double urx, double ury, string title, string content);
function pdf_add_bookmark(resource pdfdoc, string text [, int parent [, int open]]);
function pdf_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename);
function pdf_add_locallink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, int page, string dest);
function pdf_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open);
function pdf_add_outline(int pdf document, string text [, int parent [, int open]]);
function pdf_add_pdflink(resource pdfdoc, float bottom_left_x, float bottom_left_y, float up_right_x, float up_right_y, string filename, int page, string dest);
function pdf_add_thumbnail(resource pdfdoc, int image);
function pdf_add_weblink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, string url);
function pdf_arc(int pdf document, double x-coor, double y-coor, double radius, double start, double end);
function pdf_arcn(resource pdfdoc, float x, float y, float r, float alpha, float beta);
function pdf_attach_file(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon);
function pdf_begin_page(int pdf document, double width, double height);
function pdf_begin_pattern(resource pdfdoc, float width, float height, float xstep, float ystep, int painttype);
function pdf_begin_template(resource pdfdoc, float width, float height);
function pdf_circle(int pdf document, double x-coor, double y-coor, double radius);
function pdf_clip(int pdf document);
function pdf_close_image(int image);
function pdf_close_pdi_page(resource pdfdoc, int pagehandle);
function pdf_close_pdi(resource pdfdoc, int dochandle);
function pdf_close(int pdf document);
function pdf_closepath_fill_stroke(int pdf document);
function pdf_closepath_stroke(int pdf document);
function pdf_closepath(int pdf document);
function pdf_concat(resource pdfdoc, float a, float b, float c, float d, float e, float f);
function pdf_continue_text(int pdf document, string text);
function pdf_curveto(int pdf document, double x1, double y1, double x2, double y2, double x3, double y3);
function pdf_delete(resource pdfdoc);
function pdf_end_page(int pdf document);
function pdf_end_pattern(resource pdfdoc);
function pdf_end_template(resource pdfdoc);
function pdf_endpath(int pdf document);
function pdf_fill_stroke(int pdf document);
function pdf_fill(int pdf document);
function pdf_findfont(resource pdfdoc, string fontname, string encoding [, int embed]);
function pdf_get_buffer(resource pdfdoc);
function pdf_get_image_height(int pdf document, int image);
function pdf_get_image_width(int pdf document, int image);
function pdf_get_majorversion(void);
function pdf_get_minorversion(void);
function pdf_get_parameter(int pdf document, string name [, double modifier]);
function pdf_get_pdi_parameter(resource pdfdoc, string key, int document, int page, int index);
function pdf_get_pdi_value(resource pdfdoc, string key, int doc, int page, int index);
function pdf_get_value(int pdf document, string name [, double modifier]);
function pdf_initgraphics(resource pdfdoc);
function pdf_lineto(int pdf document, double x-coor, double y-coor);
function pdf_makespotcolor(resource pdfdoc, string spotname);
function pdf_moveto(int pdf document, double x-coor, double y-coor);
function pdf_new();
function pdf_open_CCITT(resource pdfdoc, string filename, int width, int height, int BitReverse, int k, int Blackls1);
function pdf_open_file(resource pdfdoc [, string filename]);
function pdf_open_gif(int pdf document, string filename);
function pdf_open_image_file(int PDF-document, string format, string filename);
function pdf_open_image(resource PDF-document, string imagetype, string source, string data, long length, int width, int height, int components, int bpc, string params);
function pdf_open_jpeg(int pdf document, string filename);
function pdf_open_memory_image(int pdf document, int image);
function pdf_open_pdi_page(resource pdfdoc, int dochandle, int pagenumber, string pagelabel);
function pdf_open_pdi(resource pdfdoc, string filename, string stringparam, int intparam);
function pdf_open_png(int pdf, string png_file);
function pdf_open_tiff(int PDF-document, string filename);
function pdf_open(int file);
function pdf_place_image(int pdf document, int image, double x-coor, double y-coor, double scale);
function pdf_place_pdi_page(resource pdfdoc, int page, float x, float y, float sx, float sy);
function pdf_rect(int pdf document, double x-coor, double y-coor, double width, double height);
function pdf_restore(int pdf document);
function pdf_rotate(int pdf document, double angle);
function pdf_save(int pdf document);
function pdf_scale(int pdf document, double x-scale, double y-scale);
function pdf_set_border_color(int pdf document, double red, double green, double blue);
function pdf_set_border_dash(int pdf document, double black, double white);
function pdf_set_border_style(int pdf document, string style, double width);
function pdf_set_char_spacing(int pdf document, double space);
function pdf_set_duration(int pdf document, double duration);
function pdf_set_font(int pdf document, string font name, double size, string encoding [, int embed]);
function pdf_set_horiz_scaling(int pdf document, double scale);
function pdf_set_info(int pdf document, string fieldname, string value);
function pdf_set_leading(int pdf document, double distance);
function pdf_set_parameter(int pdf document, string name, string value);
function pdf_set_text_matrix(int pdf document, array matrix);
function pdf_set_text_pos(int pdf document, double x-coor, double y-coor);
function pdf_set_text_rendering(int pdf document, int mode);
function pdf_set_text_rise(int pdf document, double rise);
function pdf_set_value(int pdf document, string name, double value);
function pdf_set_word_spacing(int pdf document, double space);
function pdf_setcolor(resource pdfdoc, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]]);
function pdf_setdash(int pdf document, double white, double black);
function pdf_setflat(int pdf document, double value);
function pdf_setfont(resource pdfdoc, int font, float size);
function pdf_setgray_fill(int pdf document, double gray value);
function pdf_setgray_stroke(int pdf document, double gray value);
function pdf_setgray(int pdf document, double gray value);
function pdf_setlinecap(int pdf document, int value);
function pdf_setlinejoin(int pdf document, long value);
function pdf_setlinewidth(int pdf document, double width);
function pdf_setmatrix(resource pdfdoc, float a, float b, float c, float d, float e, float f);
function pdf_setmiterlimit(int pdf document, double value);
function pdf_setrgbcolor_fill(int pdf document, double red value, double green value, double blue value);
function pdf_setrgbcolor_stroke(int pdf document, double red value, double green value, double blue value);
function pdf_setrgbcolor(int pdf document, double red value, double green value, double blue value);
function pdf_show_boxed(int pdf document, string text, double x-coor, double y-coor, double width, double height, string mode [, string feature]);
function pdf_show_xy(int pdf document, string text, double x-coor, double y-coor);
function pdf_show(int pdf document, string text);
function pdf_skew(int pdf document, double alpha, double beta);
function pdf_stringwidth(int pdf document, string text);
function pdf_stroke(int pdf document);
function pdf_translate(int pdf document, double x-coor, double y-coor);
function pfpro_cleanup(void);
function pfpro_init(void);
function pfpro_process_raw(string parameters [, string address [, int port [, int timeout [, string proxy address [, int proxy port [, string proxy logon [, string proxy password]]]]]]]);
function pfpro_process(array parameters [, string address [, int port [, int timeout [, string proxy address [, int proxy port [, string proxy logon [, string proxy password]]]]]]]);
function pfpro_version(void);
function assert_options(int what [, mixed value]);
function assert(string|bool assertion);
function dl(string library);
function extension_loaded(string name);
function get_cfg_var(string varname);
function get_current_user(void);
function get_defined_constants(void);
function get_extension_funcs(string module_name);
function get_include_path(void);
function get_included_files(void);
function get_loaded_extensions(void);
function get_magic_quotes_gpc(void);
function get_magic_quotes_runtime(void);
function get_required_files(void);
function getenv(string varname);
function getlastmod(void);
function getmygid(void);
function getmyinode(void);
function getmypid(void);
function getmyuid(void);
function getopt(string options);
function getrusage([int who]);
function ini_alter(string varname, string newvalue);
function ini_get_all([string extension]);
function ini_get(string varname);
function ini_restore(string varname);
function ini_set(string varname, string newvalue);
function memory_get_usage(void);
function php_ini_scanned_files(void);
function php_logo_guid(void);
function php_sapi_name(void);
function php_uname(void);
function phpcredits(int flag);
function phpinfo([int what]);
function phpversion(void);
function putenv(string setting);
function restore_include_path(void);
function set_include_path(string new_include_path);
function set_magic_quotes_runtime(int new_setting);
function set_time_limit(int seconds);
function time_nanosleep(unknown);
function version_compare(string version1, string version2 [, string operator]);
function zend_logo_guid(void);
function zend_version(void);
function posix_ctermid(void);
function posix_get_last_error(void);
function posix_getcwd(void);
function posix_getegid(void);
function posix_geteuid(void);
function posix_getgid(void);
function posix_getgrgid(int gid);
function posix_getgrnam(string name);
function posix_getgroups(void);
function posix_getlogin(void);
function posix_getpgid(int pid);
function posix_getpgrp(void);
function posix_getpid(void);
function posix_getppid(void);
function posix_getpwnam(string username);
function posix_getpwuid(int uid);
function posix_getrlimit(void);
function posix_getsid(int pid);
function posix_getuid(void);
function posix_isatty(int fd);
function posix_kill(int pid, int sig);
function posix_mkfifo(string pathname, int mode);
function posix_setegid(int gid);
function posix_seteuid(int uid);
function posix_setgid(int gid);
function posix_setpgid(int pid, int pgid);
function posix_setsid(void);
function posix_setuid(int uid);
function posix_strerror(int errno);
function posix_times(void);
function posix_ttyname(int fd);
function posix_uname(void);
function pg_affected_rows(resource result);
function pg_cancel_query(resource connection);
function pg_client_encoding([resource connection]);
function pg_close(resource connection);
function pg_connect(string connection_string);
function pg_connection_busy(resource connection);
function pg_connection_reset(resource connection);
function pg_connection_status(resource connection);
function pg_convert(resource connection, string table_name, array assoc_array [, int options]);
function pg_copy_from(resource connection, string table_name, array rows [, string delimiter [, string null_as]]);
function pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]]);
function pg_dbname(resource connection);
function pg_delete(resource connection, string table_name, array assoc_array [, int options]);
function pg_end_copy([resource connection]);
function pg_escape_bytea(string data);
function pg_escape_string(string data);
function pg_fetch_all(resource result);
function pg_fetch_array(resource result [, int row [, int result_type]]);
function pg_fetch_assoc(resource result [, int row]);
function pg_fetch_object(resource result [, int row [, int result_type]]);
function pg_fetch_result(resource result, int row, mixed field);
function pg_fetch_row(resource result, int row);
function pg_field_is_null(resource result, int row, mixed field);
function pg_field_name(resource result, int field_number);
function pg_field_num(resource result, string field_name);
function pg_field_prtlen(resource result, int row_number, string field_name);
function pg_field_size(resource result, int field_number);
function pg_field_type(resource result, int field_number);
function pg_free_result(resource result);
function pg_get_notify(resource connection [, int result_type]);
function pg_get_pid(resource connection);
function pg_get_result([resource connection]);
function pg_host(resource connection);
function pg_insert(resource connection, string table_name, array assoc_array [, int options]);
function pg_last_error([resource connection]);
function pg_last_notice(resource connection);
function pg_last_oid(resource result);
function pg_lo_close(resource large_object);
function pg_lo_create(resource connection);
function pg_lo_export(int oid, string pathname [, resource connection]);
function pg_lo_import([resource connection, string pathname]);
function pg_lo_import(string pathname [, resource connection]);
function pg_lo_open(resource connection, int oid, string mode);
function pg_lo_read_all(resource large_object);
function pg_lo_read(resource large_object, int len);
function pg_lo_seek(resource large_object, int offset [, int whence]);
function pg_lo_tell(resource large_object);
function pg_lo_unlink(resource connection, int oid);
function pg_lo_write(resource large_object, string data);
function pg_meta_data(resource connection, string table_name);
function pg_num_fields(resource result);
function pg_num_rows(resource result);
function pg_options(resource connection);
function pg_pconnect(string connection_string);
function pg_ping(resource connection);
function pg_port(resource connection);
function pg_put_line([resource connection, string data]);
function pg_query(resource connection, string query);
function pg_result_error(resource result);
function pg_result_seek(resource result, int offset);
function pg_result_status(resource result);
function pg_select(resource connection, string table_name, array assoc_array [, int options]);
function pg_send_query(resource connection, string query);
function pg_send_query(string query);
function pg_set_client_encoding([resource connection, string encoding]);
function pg_trace(string pathname [, string mode [, resource connection]]);
function pg_tty(resource connection);
function pg_unescape_bytea(string data);
function pg_untrace([resource connection]);
function pg_update(resource connection, string table_name, array data, array condition [, int options]);
function pg_version(unknown);
function php_check_syntax(string filename);
function php_strip_whitespace(string filename);
function pcntl_exec(string path [, array args [, array envs]]);
function pcntl_getpriority([int pid]);
function pcntl_fork(void);
function pcntl_signal(int signo, callback handle [, bool restart_syscalls]);
function pcntl_wait(int &status [, int options]);
function pcntl_waitpid(int pid, int&status, int options);
function pcntl_wexitstatus(int status);
function pcntl_wifexited(int status);
function pcntl_wifsignaled(int status);
function pcntl_wifstopped(int status);
function pcntl_wstopsig(int status);
function pcntl_wtermsig(int status);
function escapeshellarg(string arg);
function escapeshellcmd(string command);
function exec(string command [, string array [, int return_var]]);
function passthru(string command [, int return_var]);
function proc_close(resource process);
function proc_get_status(resource process);
function proc_nice(int priority);
function proc_open(string cmd, array descriptorspec, array pipes);
function proc_terminate(resource process [, int signal]);
function shell_exec(string cmd);
function system(string command [, int return_var]);
function printer_abort(resource handle);
function printer_close(resource handle);
function printer_create_brush(int style, string color);
function printer_create_dc(resource handle);
function printer_create_font(string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientaton);
function printer_create_pen(int style, int width, string color);
function printer_delete_brush(resource handle);
function printer_delete_dc(resource handle);
function printer_delete_font(resource handle);
function printer_delete_pen(resource handle);
function printer_draw_bmp(resource handle, string filename, int x, int y);
function printer_draw_chord(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1);
function printer_draw_elipse(resource handle, int ul_x, int ul_y, int lr_x, int lr_y);
function printer_draw_line(resource printer_handle, int from_x, int from_y, int to_x, int to_y);
function printer_draw_pie(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y);
function printer_draw_rectangle(resource handle, int ul_x, int ul_y, int lr_x, int lr_y);
function printer_draw_roundrect(resource handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height);
function printer_draw_text(resource printer_handle, string text, int x, int y);
function printer_end_doc(resource handle);
function printer_end_page(resource handle);
function printer_get_option(resource handle, string option);
function printer_list(int enumtype [, string name [, int level]]);
function printer_logical_fontheight(resource handle, int height);
function printer_open([string devicename]);
function printer_select_brush(resource printer_handle, resource brush_handle);
function printer_select_font(resource printer_handle, resource font_handle);
function printer_select_pen(resource printer_handle, resource pen_handle);
function printer_set_option(resource handle, int option, mixed value);
function printer_start_doc(resource handle [, string document]);
function printer_start_page(resource handle);
function printer_write(resource handle, string content);
function pspell_add_to_personal(int dictionary_link, string word);
function pspell_add_to_session(int dictionary_link, string word);
function pspell_check(int dictionary_link, string word);
function pspell_clear_session(int dictionary_link);
function pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]]);
function pspell_config_data_dir(unknown);
function pspell_config_dict_dir(unknown);
function pspell_config_ignore(int dictionary_link, int n);
function pspell_config_mode(int dictionary_link, int mode);
function pspell_config_personal(int dictionary_link, string file);
function pspell_config_repl(int dictionary_link, string file);
function pspell_config_runtogether(int dictionary_link, bool flag);
function pspell_config_save_repl(int dictionary_link, bool flag);
function pspell_new_config(int config);
function pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]]);
function pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]]);
function pspell_save_wordlist(int dictionary_link);
function pspell_store_replacement(int dictionary_link, string misspelled, string correct);
function pspell_suggest(int dictionary_link, string word);
function readline_add_history(string line);
function readline_clear_history(void);
function readline_completion_function(string line);
function readline_info([string varname [, string newvalue]]);
function readline_list_history(void);
function readline_read_history(string filename);
function readline_write_history(string filename);
function readline([string prompt]);
function recode_file(string request, resource input, resource output);
function recode_string(string request, string string);
function recode_string(string request, string string);
function preg_grep(string pattern, array input);
function preg_match_all(string pattern, string subject, array matches [, int flags]);
function preg_match(string pattern, string subject [, array matches [, int flags]]);
function preg_quote(string str [, string delimiter]);
function preg_replace_callback(mixed pattern, callback callback, mixed subject [, int limit]);
function preg_replace(mixed pattern, mixed replacement, mixed subject [, int limit]);
function preg_split(string pattern, string subject [, int limit [, int flags]]);
function qdom_error(void);
function qdom_tree(string);
function ereg_replace(string pattern, string replacement, string string);
function ereg(string pattern, string string [, array regs]);
function eregi_replace(string pattern, string replacement, string string);
function eregi(string pattern, string string [, array regs]);
function split(string pattern, string string [, int limit]);
function spliti(string pattern, string string [, int limit]);
function sql_regcase(string string);
function ftok(string pathname, string proj);
function msg_get_queue(int key [, int perms]);
function msg_receive(int queue, int desiredmsgtype, int msgtype, int maxsize, mixed message [, bool unserialize [, int flags [, int errorcode]]]);
function msg_remove_queue(int queue);
function msg_send(int queue, int msgtype, mixed message [, bool serialize [, bool blocking [, int errorcode]]]);
function msg_set_queue(int queue, array data);
function msg_stat_queue(int queue);
function sem_acquire(int sem_identifier);
function sem_get(int key [, int max_acquire [, int perm]]);
function sem_release(int sem_identifier);
function sem_remove(int sem_identifier);
function shm_attach(int key [, int memsize [, int perm]]);
function shm_detach(int shm_identifier);
function shm_get_var(int id, int variable_key);
function shm_put_var(int shm_identifier, int variable_key, mixed variable);
function shm_remove_var(int id, int variable_key);
function shm_remove(int shm_identifier);
function sesam_affected_rows(string result_id);
function sesam_commit(void);
function sesam_connect(string catalog, string schema, string user);
function sesam_diagnostic(void);
function sesam_disconnect(void);
function sesam_errormsg(void);
function sesam_execimm(string query);
function sesam_fetch_array(string result_id [, int whence [, int offset]]);
function sesam_fetch_result(string result_id [, int max_rows]);
function sesam_fetch_row(string result_id [, int whence [, int offset]]);
function sesam_field_array(string result_id);
function sesam_field_name(string result_id, int index);
function sesam_free_result(string result_id);
function sesam_num_fields(string result_id);
function sesam_query(string query [, bool scrollable]);
function sesam_rollback(void);
function sesam_seek_row(string result_id, int whence [, int offset]);
function sesam_settransaction(int isolation_level, int read_only);
function session_cache_expire([int new_cache_expire]);
function session_cache_limiter([string cache_limiter]);
function session_decode(string data);
function session_destroy(void);
function session_encode(void);
function session_get_cookie_params(void);
function session_id([string id]);
function session_is_registered(string name);
function session_module_name([string module]);
function session_name([string name]);
function session_regenerate_id(void);
function session_register(mixed name [, mixed ...]);
function session_save_path([string path]);
function session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]]);
function session_set_save_handler(string open, string close, string read, string write, string destroy, string gc);
function session_start(void);
function session_unregister(string name);
function session_unset(void);
function session_write_close(void);
function shmop_close(int shmid);
function shmop_delete(int shmid);
function shmop_open(int key, string flags, int mode, int size);
function shmop_read(int shmid, int start, int count);
function shmop_size(int shmid);
function shmop_write(int shmid, string data, int offset);
function sqlite_array_query(resource dbhandle, string query [, int result_type [, bool decode_binary]]);
function sqlite_array_query(string query, resource dbhandle [, int result_type [, bool decode_binary]]);
function sqlite_busy_timeout(resource dbhandle, int milliseconds);
function sqlite_changes(resource dbhandle);
function sqlite_close(resource dbhandle);
function sqlite_column(resource result, mixed index_or_name [, bool decode_binary]);
function sqlite_create_aggregate(resource dbhandle, string function_name, mixed step_func, mixed finalize_func [, int num_args]);
function sqlite_create_function(resource dbhandle, string function_name, mixed callback [, int num_args]);
function sqlite_current(resource result [, int result_type [, bool decode_binary]]);
function sqlite_error_string(int error_code);
function sqlite_escape_string(string item);
function sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]]);
function sqlite_fetch_column_types(unknown);
function sqlite_fetch_single(resource result [, int result_type [, bool decode_binary]]);
function sqlite_field_name(resource result, int field_index);
function sqlite_has_more(resource result);
function sqlite_last_error(resource dbhandle);
function sqlite_last_insert_rowid(resource dbhandle);
function sqlite_libencoding(void);
function sqlite_libversion(void);
function sqlite_next(resource result);
function sqlite_num_fields(resource result);
function sqlite_num_rows(resource result);
function sqlite_open(string filename [, int mode [, string&error_message]]);
function sqlite_popen(string filename [, int mode [, string&error_message]]);
function sqlite_query(resource dbhandle, string query);
function sqlite_query(string query, resource dbhandle);
function sqlite_rewind(resource result);
function sqlite_seek(resource result, int rownum);
function sqlite_udf_decode_binary(string data);
function sqlite_udf_encode_binary(string data);
function sqlite_unbuffered_query(resource dbhandle, string query);
function sqlite_unbuffered_query(string query, resource dbhandle);
function swf_actiongeturl(string url, string target);
function swf_actiongotoframe(int framenumber);
function swf_actiongotolabel(string label);
function swf_actionnextframe(void);
function swf_actionplay(void);
function swf_actionprevframe(void);
function swf_actionsettarget(string target);
function swf_actionstop(void);
function swf_actiontogglequality(void);
function swf_actionwaitforframe(int framenumber, int skipcount);
function swf_addbuttonrecord(int states, int shapeid, int depth);
function swf_addcolor(float r, float g, float b, float a);
function swf_closefile([int return_file]);
function swf_definebitmap(int objid, string image_name);
function swf_definefont(int fontid, string fontname);
function swf_defineline(int objid, float x1, float y1, float x2, float y2, float width);
function swf_definepoly(int objid, array coords, int npoints, float width);
function swf_definerect(int objid, float x1, float y1, float x2, float y2, float width);
function swf_definetext(int objid, string str, int docenter);
function swf_endbutton(void);
function swf_enddoaction(void);
function swf_endshape(void);
function swf_endsymbol(void);
function swf_fontsize(float size);
function swf_fontslant(float slant);
function swf_fonttracking(float tracking);
function swf_getbitmapinfo(int bitmapid);
function swf_getfontinfo(void);
function swf_getframe(void);
function swf_labelframe(string name);
function swf_lookat(float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist);
function swf_modifyobject(int depth, int how);
function swf_mulcolor(float r, float g, float b, float a);
function swf_nextid(void);
function swf_oncondition(int transition);
function swf_openfile(string filename, float width, float height, float framerate, float r, float g, float b);
function swf_ortho2(float xmin, float xmax, float ymin, float ymax);
function swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax);
function swf_perspective(float fovy, float aspect, float near, float far);
function swf_placeobject(int objid, int depth);
function swf_polarview(float dist, float azimuth, float incidence, float twist);
function swf_popmatrix(void);
function swf_posround(int round);
function swf_pushmatrix(void);
function swf_removeobject(int depth);
function swf_rotate(float angle, string axis);
function swf_scale(float x, float y, float z);
function swf_setfont(int fontid);
function swf_setframe(int framenumber);
function swf_shapearc(float x, float y, float r, float ang1, float ang2);
function swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3);
function swf_shapecurveto(float x1, float y1, float x2, float y2);
function swf_shapefillbitmapclip(int bitmapid);
function swf_shapefillbitmaptile(int bitmapid);
function swf_shapefilloff(void);
function swf_shapefillsolid(float r, float g, float b, float a);
function swf_shapelinesolid(float r, float g, float b, float a, float width);
function swf_shapelineto(float x, float y);
function swf_shapemoveto(float x, float y);
function swf_showframe(void);
function swf_startbutton(int objid, int type);
function swf_startdoaction(void);
function swf_startshape(int objid);
function swf_startsymbol(int objid);
function swf_textwidth(string str);
function swf_translate(float x, float y, float z);
function swf_viewport(float xmin, float xmax, float ymin, float ymax);
function snmp_get_quick_print(void);
function snmp_read_mib(unknown);
function snmp_set_quick_print(bool quick_print);
function snmpget(string hostname, string community, string object_id [, int timeout [, int retries]]);
function snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]]);
function snmpset(string hostname, string community, string object_id, string type, mixed value [, int timeout [, int retries]]);
function snmpwalk(string hostname, string community, string object_id [, int timeout [, int retries]]);
function snmpwalkoid(string hostname, string community, string object_id [, int timeout [, int retries]]);
function socket_accept(resource socket);
function socket_bind(resource socket, string address [, int port]);
function socket_clear_error([resource socket]);
function socket_close(resource socket);
function socket_connect(resource socket, string address [, int port]);
function socket_create_listen(int port [, int backlog]);
function socket_create_pair(int domain, int type, int protocol, array&fd);
function socket_create(int domain, int type, int protocol);
function socket_get_option(resource socket, int level, int optname);
function socket_getpeername(resource socket, string&addr [, int&port]);
function socket_getsockname(resource socket, string&addr [, int&port]);
function socket_iovec_add(resource iovec, int iov_len);
function socket_iovec_alloc(int num_vectors [, int ]);
function socket_iovec_delete(resource iovec, int iov_pos);
function socket_iovec_fetch(resource iovec, int iovec_position);
function socket_iovec_free(resource iovec);
function socket_iovec_set(resource iovec, int iovec_position, string new_val);
function socket_last_error([resource socket]);
function socket_listen(resource socket [, int backlog]);
function socket_read(resource socket, int length [, int type]);
function socket_readv(resource socket, resource iovec_id);
function socket_recv(resource socket, string&buf, int len, int flags);
function socket_recvfrom(resource socket, string&buf, int len, int flags, string&name [, int&port]);
function socket_recvmsg(resource socket, resource iovec, array&control, int&controllen, int&flags, string&addr [, int&port]);
function socket_select(array&read, array&write, array&except, int tv_sec [, int tv_usec]);
function socket_send(resource socket, string buf, int len, int flags);
function socket_sendmsg(resource socket, resource iovec, int flags, string addr [, int port]);
function socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port]);
function socket_set_block(resource socket);
function socket_set_nonblock(resource socket);
function socket_set_option(resource socket, int level, int optname, mixed optval);
function socket_shutdown(resource socket [, int how]);
function socket_strerror(int errno);
function socket_write(resource socket, string buffer [, int length]);
function socket_writev(resource socket, resource iovec_id);
function my_notifier(int notification_code, int severity, string message, int message_code, int bytes_transferred, int bytes_max);
function stream_context_create(array options);
function stream_context_get_options(resource stream|context);
function stream_context_set_option(resource context|stream, string wrapper, string option, mixed value);
function stream_context_set_params(resource stream|context, array params);
function stream_copy_to_stream(resource source, resource dest [, int maxlength]);
function stream_filter_append(resource stream, string filtername [, int read_write [, mixed params]]);
function stream_filter_prepend(resource stream, string filtername [, int read_write [, mixed params]]);
function stream_filter_register(string filtername, string classname);
function filter(resource in, resource out, int&consumed, bool closing);
function oncreate(void);
function onclose(void);
function stream_get_filters(void);
function stream_get_line(resource handle, int length, string ending);
function stream_get_meta_data(resource stream);
function stream_get_transports(void);
function stream_get_wrappers(void);
function stream_select(resource&read, resource&write, resource&except, int tv_sec [, int tv_usec]);
function stream_set_blocking(resource stream, int mode);
function stream_set_timeout(resource stream, int seconds [, int microseconds]);
function stream_set_write_buffer(resource stream, int buffer);
function stream_socket_accept(resource server_socket [, int timeout [, string&peername]]);
function stream_socket_client(string remote_socket [, int&errno [, string&errstr [, float timeout [, int flags [, resource context]]]]]);
function stream_socket_get_name(resource handle, bool want_peer);
function stream_socket_recvfrom(resource socket, int length [, int flags [, string &address]]);
function stream_socket_sendto(resource socket, string data [, int flags [, string address]]);
function stream_socket_server(string local_socket [, int&errno [, string&errstr [, int flags [, resource context]]]]);
function stream_wrapper_register(string protocol, string classname);
function stream_open(string path, string mode, int options, string opened_path);
function stream_close(void);
function stream_read(int count);
function stream_write(string data);
function stream_eof(void);
function stream_tell(void);
function stream_seek(int offset, int whence);
function stream_flush(void);
function stream_stat(void);
function unlink(string path);
function dir_opendir(string path, int options);
function dir_readdir(void);
function dir_rewinddir(void);
function dir_closedir(void);
function addcslashes(string str, string charlist);
function addslashes(string str);
function bin2hex(string str);
function chop(string str);
function chr(int ascii);
function chunk_split(string string [, int chunklen [, string end]]);
function convert_cyr_string(string str, string from, string to);
function count_chars(string string [, int mode]);
function convert_uudecode();
function convert_uuencode();
function crc32(string str);
function crypt(string str [, string salt]);
function echo(string arg1 [, string argn...]);
function explode(string separator, string string [, int limit]);
function fprintf(resource handle, string format [, mixed args]);
function get_html_translation_table(int table [, int quote_style]);
function hebrev(string hebrew_text [, int max_chars_per_line]);
function hebrevc(string hebrew_text [, int max_chars_per_line]);
function html_entity_decode(string string [, int quote_style [, string charset]]);
function htmlentities(string string [, int quote_style [, string charset]]);
function htmlspecialchars(string string [, int quote_style]);
function implode(string glue, array pieces);
function join(string glue, array pieces);
function levenshtein(string str1, string str2);
function levenshtein(string str1, string str2, int cost_ins, int cost_rep, int cost_del);
function levenshtein(string str1, string str2, function cost);
function localeconv(void);
function ltrim(string str [, string charlist]);
function md5_file(string filename [, bool raw_output]);
function md5(string str);
function metaphone(string str);
function money_format(string format, float number);
function nl_langinfo(int item);
function nl2br(string string);
function number_format(float number [, int decimals]);
function number_format(float number, int decimals, string dec_point, string thousands_sep);
function ord(string string);
function parse_str(string str [, array arr]);
function print(string arg);
function printf(string format [, mixed args]);
function quoted_printable_decode(string str);
function quotemeta(string str);
function rtrim(string str [, string charlist]);
function setlocale(string category, string locale);
function sha1_file(string filename [, bool raw_output]);
function sha1(string str [, bool raw_output]);
function similar_text(string first, string second [, double percent]);
function soundex(string str);
function sprintf(string format [, mixed args]);
function sscanf(string str, string format [, string var1]);
function str_ireplace(mixed search, mixed replace, mixed subject [, int&count]);
function str_pad(string input, int pad_length [, string pad_string [, int pad_type]]);
function str_repeat(string input, int multiplier);
function str_replace(string needle, string str, string haystack);
function str_rot13(string str);
function str_shuffle(string str);
function str_split(string string [, int split_length]);
function str_word_count(string string [, int format]);
function strcasecmp(string str1, string str2);
function strchr(string haystack, string needle);
function strcmp(string str1, string str2);
function strcoll(string str1, string str2);
function strcspn(string str1, string str2);
function strip_tags(string str [, string allowable_tags]);
function stripcslashes(string str);
function stripos(string haystack, string needle [, int offset]);
function stripslashes(string str);
function stristr(string haystack, string needle);
function strlen(string str);
function strnatcasecmp(string str1, string str2);
function strnatcmp(string str1, string str2);
function strncasecmp(string str1, string str2, int len);
function strncmp(string str1, string str2, int len);
function strpos(string haystack, string needle [, int offset]);
function strpbrk(string str, string charset);
function strrchr(string haystack, string needle);
function strrev(string string);
function strripos(string haystack, string needle);
function strrpos(string haystack, char needle);
function strspn(string str1, string str2);
function strstr(string haystack, string needle);
function strtok(string arg1, string arg2);
function strtolower(string str);
function strtoupper(string string);
function strtr(string str, string from, string to);
function substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]]);
function substr_count(string haystrack, string needle);
function substr_replace(string string, string replacement, int start [, int length]);
function substr(string string, int start [, int length]);
function trim(string str [, string charlist]);
function ucfirst(string str);
function ucwords(string str);
function vprintf(string format, array args);
function vsprintf(string format, array args);
function wordwrap(string str [, int width [, string break [, int cut]]]);
function sybase_affected_rows([resource link_identifier]);
function sybase_close([resource link_identifier]);
function sybase_connect([string servername [, string username [, string password [, string charset [, string appname]]]]]);
function sybase_data_seek(resource result_identifier, int row_number);
function sybase_deadlock_retry_count(int retry_count);
function sybase_fetch_array(resource result);
function sybase_fetch_assoc(resource result);
function sybase_fetch_field(resource result [, int field_offset]);
function sybase_fetch_object(resource result [, mixed object]);
function sybase_fetch_row(resource result);
function sybase_field_seek(resource result, int field_offset);
function sybase_free_result(resource result);
function sybase_get_last_message(void);
function sybase_min_client_severity(int severity);
function sybase_min_error_severity(int severity);
function sybase_min_message_severity(int severity);
function sybase_min_server_severity(int severity);
function sybase_num_fields(resource result);
function sybase_num_rows(resource result);
function sybase_pconnect([string servername [, string username [, string password [, string charset [, string appname]]]]]);
function sybase_query(string query, resource link_identifier);
function sybase_result(resource result, int row, mixed field);
function sybase_select_db(string database_name [, resource link_identifier]);
function sybase_set_message_handler(callback handler);
function sybase_unbuffered_query(string query, resource link_identifier);
function tidy_access_count(void);
function tidy_clean_repair(void);
function tidy_config_count(void);
function tidy_diagnose(void);
function tidy_error_count(void);
function tidy_get_body(resource tidy);
function tidy_get_config(void);
function tidy_get_error_buffer([bool detailed]);
function tidy_get_head(void);
function tidy_get_html_ver(void);
function tidy_get_html(void);
function tidy_get_output(void);
function tidy_get_release(void);
function tidy_get_root(void);
function tidy_get_status(void);
function tidy_getopt(string option);
function tidy_is_xhtml(void);
function tidy_load_config(string filename, string encoding);
class tidy_node {
	function tidy_node(void);
	function attributes(void);
	function children(void);
	function get_attr(int attrib_id);
	function get_nodes(int node_id);
	function has_children(void);
	function has_siblings(void);
	function is_asp(void);
	function is_comment(void);
	function is_html(void);
	function is_jsp(void);
	function is_jste(void);
	function is_text(void);
	function is_xhtml(void);
	function is_xml(void);
	function next(void);
	function prev(void);
};
function tidy_parse_file(string file [, bool use_include_path]);
function tidy_parse_string(string input);
function tidy_repair_file(string filename [, string config_file [, bool use_include_path]]);
function tidy_repair_string(string data [, string config_file]);
function tidy_reset_config(void);
function tidy_save_config(string filename);
function tidy_set_encoding(string encoding);
function tidy_setopt(string option, mixed newvalue);
function tidy_warning_count(void);
function token_get_all(string source);
function token_name(int token);
function base64_decode(string encoded_data);
function base64_encode(string data);
function get_meta_tags(string filename [, int use_include_path]);
function http_build_query(array formdata [, string numeric_prefix]);
function parse_url(string url);
function rawurldecode(string str);
function rawurlencode(string str);
function urldecode(string str);
function urlencode(string str);
function empty(mixed var);
function floatval(mixed var);
function get_defined_vars(void);
function get_resource_type(resource handle);
function gettype(mixed var);
function import_request_variables(string types [, string prefix]);
function intval(mixed var [, int base]);
function is_array(mixed var);
function is_bool(mixed var);
function is_callable(mixed var [, bool syntax_only [, string callable_name]]);
function is_float(mixed var);
function is_int(mixed var);
function is_null(mixed var);
function is_numeric(mixed var);
function is_object(mixed var);
function is_resource(mixed var);
function is_scalar(mixed var);
function is_string(mixed var);
function isset(mixed var [, mixed var [, ...]]);
function print_r(mixed expression [, bool return]);
function serialize(mixed value);
function settype(mixed var, string type);
function strval(mixed var);
function unserialize(string str [, string callback]);
function unset(mixed var [, mixed var [, ...]]);
function var_dump(mixed expression [, mixed expression [, ...]]);
function var_export(mixed expression [, bool return]);
function vpopmail_add_alias_domain_ex(string olddomain, string newdomain);
function vpopmail_add_alias_domain(string domain, string aliasdomain);
function vpopmail_add_domain_ex(string domain, string passwd [, string quota [, string bounce [, bool apop]]]);
function vpopmail_add_domain(string domain, string dir, int uid, int gid);
function vpopmail_add_user(string user, string domain, string password [, string gecos [, bool apop]]);
function vpopmail_alias_add(string user, string domain, string alias);
function vpopmail_alias_del_domain(string domain);
function vpopmail_alias_del(string user, string domain);
function vpopmail_alias_get_all(string domain);
function vpopmail_alias_get(string alias, string domain);
function vpopmail_auth_user(string user, string domain, string password [, string apop]);
function vpopmail_del_domain_ex(string domain);
function vpopmail_del_domain(string domain);
function vpopmail_del_user(string user, string domain);
function vpopmail_error(void);
function vpopmail_passwd(string user, string domain, string password);
function vpopmail_set_user_quota(string user, string domain, string quota);
function w32api_deftype(string typename, string member1_type, string member1_name [, string ... [, string ...]]);
function w32api_init_dtype(string typename, mixed value [, mixed ...]);
function w32api_invoke_function(string funcname, mixed argument [, mixed ...]);
function w32api_register_function(string library, string function_name, string return_type);
function w32api_set_call_method(int method);
function wddx_add_vars(int packet_id, mixed name_var [, mixed ...]);
function wddx_deserialize(string packet);
function wddx_packet_end(int packet_id);
function wddx_packet_start([string comment]);
function wddx_serialize_value(mixed var [, string comment]);
function wddx_serialize_vars(mixed var_name [, mixed ...]);
function utf8_decode(string data);
function utf8_encode(string data);
function xml_error_string(int code);
function xml_get_current_byte_index(resource parser);
function xml_get_current_column_number(resource parser);
function xml_get_current_line_number(resource parser);
function xml_get_error_code(resource parser);
function xml_parse_into_struct(resource parser, string data, array&values [, array&index]);
function xml_parse(resource parser, string data [, bool is_final]);
function xml_parser_create_ns([string encoding [, string separator]]);
function xml_parser_create([string encoding]);
function xml_parser_free(resource parser);
function xml_parser_get_option(resource parser, int option);
function xml_parser_set_option(resource parser, int option, mixed value);
function xml_set_character_data_handler(resource parser, callback handler);
function handler(resource parser, string data);
function xml_set_default_handler(resource parser, callback handler);
function handler(resource parser, string data);
function xml_set_element_handler(resource parser, callback start_element_handler, callback end_element_handler);
function start_element_handler(resource parser, string name, array attribs);
function end_element_handler(resource parser, string name);
function xml_set_end_namespace_decl_handler(resource pind, callback handler);
function xml_set_external_entity_ref_handler(resource parser, callback handler);
function handler(resource parser, string open_entity_names, string base, string system_id, string public_id);
function xml_set_notation_decl_handler(resource parser, callback handler);
function handler(resource parser, string notation_name, string base, string system_id, string public_id);
function xml_set_object(resource parser, object object);
function xml_set_processing_instruction_handler(resource parser, callback handler);
function handler(resource parser, string target, string data);
function xml_set_start_namespace_decl_handler(resource pind, callback hdl);
function xml_set_unparsed_entity_decl_handler(resource parser, callback handler);
function handler(resource parser, string entity_name, string base, string system_id, string public_id, string notation_name);
function xmlrpc_decode_request(string xml, string&method [, string encoding]);
function xmlrpc_decode(string xml [, string encoding]);
function xmlrpc_encode_request(string method, mixed params);
function xmlrpc_encode(mixed value);
function xmlrpc_get_type(mixed value);
function xmlrpc_parse_method_descriptions(string xml);
function xmlrpc_server_add_introspection_data(resource server, array desc);
function xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options]);
function xmlrpc_server_create(void);
function xmlrpc_server_destroy(resource server);
function xmlrpc_server_register_introspection_callback(resource server, string function);
function xmlrpc_server_register_method(resource server, string method_name, string function);
function xmlrpc_set_type(string value, string type);
function xslt_create(void);
function xslt_errno([ int xh]);
function xslt_error([int xh]);
function xslt_free(resource xh);
function xslt_process(resource xh, string xml, string xsl [, string result [, array arguments [, array parameters]]]);
function xslt_set_base(resource xh, string uri);
function xslt_set_encoding(resource xh, string encoding);
function xslt_set_error_handler(resource xh, mixed handler);
function xslt_set_log(resource xh, mixed log);
function xslt_set_sax_handler(resource xh, array handlers);
function xslt_set_sax_handlers(resource processor, array handlers);
function xslt_set_scheme_handler(resource xh, array handlers);
function xslt_set_scheme_handlers(resource processor, array handlers);
function yaz_addinfo(resource id);
function yaz_ccl_conf(resource id, array config);
function yaz_ccl_parse(resource id, string query, array& result);
function yaz_close(resource id);
function yaz_connect(string zurl [, mixed options]);
function yaz_database(resource id, string databases);
function yaz_element(resource id, string elementset);
function yaz_errno(resource id);
function yaz_error(resource id);
function yaz_get_option(resource id, string name);
function yaz_hits(resource id);
function yaz_itemorder(resource id, array args);
function yaz_present(resource id);
function yaz_range(resource id, int start, int number);
function yaz_record(resource id, int pos, string type);
function yaz_scan_result(resource id [, array& result]);
function yaz_scan(resource id, string type, string startterm [, array flags]);
function yaz_schema(resource id, string schema);
function yaz_search(resource id, string type, string query);
function yaz_set_option(resource id, string name, string value);
function yaz_sort(resource id, string criteria);
function yaz_syntax(resource id, string syntax);
function yaz_wait([array options]);
function yp_all(string domain, string map, string callback);
function yp_cat(string domain, string map);
function yp_err_string(void);
function yp_errno(void);
function yp_first(string domain, string map);
function yp_get_default_domain(void);
function yp_master(string domain, string map);
function yp_match(string domain, string map, string key);
function yp_next(string domain, string map, string key);
function yp_order(string domain, string map);
function zip_close(resource zip);
function zip_entry_close(resource zip_entry);
function zip_entry_compressedsize(resource zip_entry);
function zip_entry_compressionmethod(resource zip_entry);
function zip_entry_filesize(resource zip_entry);
function zip_entry_name(resource zip_entry);
function zip_entry_open(resource zip, resource zip_entry [, string mode]);
function zip_entry_read(resource zip_entry [, int length]);
function zip_open(string filename);
function zip_read(resource zip);
function gzclose(resource zp);
function gzcompress(string data [, int level]);
function gzdeflate(string data [, int level]);
function gzencode(string data [, int level [, int encoding_mode]]);
function gzeof(resource zp);
function gzfile(string filename [, int use_include_path]);
function gzgetc(resource zp);
function gzgets(resource zp, int length);
function gzgetss(resource zp, int length [, string allowable_tags]);
function gzinflate(string data [, int length]);
function gzopen(string filename, string mode [, int use_include_path]);
function gzpassthru(resource zp);
function gzread(resource zp, int length);
function gzrewind(resource zp);
function gzseek(resource zp, int offset);
function gztell(resource zp);
function gzuncompress(string data [, int length]);
function gzwrite(resource zp, string string [, int length]);
function readgzfile(string filename [, int use_include_path]);
function zlib_get_coding_type(void);
function php_stream_stat_path(char* path, php_stream_statbuf* ssb);
function php_stream_stat(php_stream* stream, php_stream_statbuf* ssb);
function php_stream_open_wrapper(char* path, char* mode, int options, char** opened);
function php_stream_read(php_stream* stream, char* buf, size_t count);
function php_stream_write(php_stream* stream, const char* buf, size_t count);
function php_stream_eof(php_stream* stream);
function php_stream_getc(php_stream* stream);
function php_stream_gets(php_stream* stream, char* buf, size_t maxlen);
function php_stream_close(php_stream* stream);
function php_stream_flush(php_stream* stream);
function php_stream_seek(php_stream* stream, off_t offset, int whence);
function php_stream_tell(php_stream* stream);
function php_stream_copy_to_stream(php_stream* src, php_stream* dest, size_t maxlen);
function php_stream_copy_to_mem(php_stream* src, char** buf, size_t maxlen, int persistent);
function php_stream_make_seekable(php_stream* origstream, php_stream** newstream, int flags);
function php_stream_cast(php_stream* stream, int castas, void** ret, int flags);
function php_stream_can_cast(php_stream* stream, int castas);
function php_stream_is_persistent(php_stream* stream);
function php_stream_is(php_stream* stream, int istype);
function php_stream_passthru(php_stream* stream);
function php_register_url_stream_wrapper(char* protocol, php_stream_wrapper* wrapper, TSRMLS_DC);
function php_unregister_url_stream_wrapper(char* protocol, TSRMLS_DC);
function php_stream_open_wrapper_ex(char* path, char* mode, int options, char** opened, php_stream_context* context);
function php_stream_open_wrapper_as_file(char* path, char* mode, int options, char** opened);
function php_stream_filter_register_factory(const char* filterpattern, php_stream_filter_factory* factory);
function php_stream_filter_unregister_factory(const char* filterpattern);
function php_stream_opendir(char* path, php_stream_context* context);
function php_stream_readdir(php_stream* dirstream, php_stream_dirent* ent);
function php_stream_rewinddir(php_stream* dirstream);
function php_stream_closedir(php_stream* dirstream);
function php_stream_fopen_from_file(FILE* file, char* mode);
function php_stream_fopen_tmpfile(void);
function php_stream_fopen_temporary_file(const char* dir, const char* pfx, char** opened);
function php_stream_sock_open_from_socket(int socket, int persistent);
function php_stream_sock_open_host(const char* host, unsigned short port, int socktype, struct timeval* timeout, int persistent);
function php_stream_sock_open_unix(const char* path, int pathlen, int persistent, struct timeval* timeout);
?>