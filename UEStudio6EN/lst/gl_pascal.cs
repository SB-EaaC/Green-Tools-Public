/* object window */
bf_Checked {};
bf_Grayed {};
bf_Unchecked {};
cm_ArrangeIcons {};
cm_CascadeChildren {};
cm_CloseChildren {};
cm_Count {};
cm_EditClear {};
cm_EditCopy {};
cm_EditCut {};
cm_EditDelete {};
cm_EditPaste {};
cm_EditUndo {};
cm_FileNew {};
cm_FileOpen {};
cm_FileSave {};
cm_FileSaveAs {};
cm_First {};
cm_Internal {};
cm_InternalOffset {};
cm_MDIFileNew {};
cm_MDIFileOpen {};
cm_Reserved {};
cm_TileChildren {};
coIndexError {};
coOverflow {};
em_InvalidChild {};
em_InvalidClient {};
em_InvalidMainWindow {};
em_InvalidWindow {};
em_OutOfMemory {};
id_Count {};
id_First {};
id_FirstMDIChild {};
id_Internal {};
id_MDIClient {};
id_Reserved {};
nf_Count {};
nf_First {};
nf_Internal {};
stCreate {};
stError {};
stGetError {};
stInitError {};
stOk {};
stOpen {};
stOpenRead {};
stOpenWrite {};
stPutError {};
stReadError {};
stWriteError {};
tf_GetData {};
tf_SetData {};
tf_SizeData {};
wb_AutoCreate {};
wb_FromResource {};
wb_KeyboardHandler {};
wb_MDIChild {};
wb_Transfer {};
wm_Count {};
wm_First {};

/* Borland Pascal */

fAuxiliary {};
fCarry {};
fOverflow {};
fParity {};
fSign {};
fZero {};
faAnyFile {};
faArchive {};
faDirectory {};
faHidden {};
faReadOnly {};
faSysFile {};
faVolumeID {};
fcDirectory {};
fcExtension {};
fcFileName {};
fcWildcards {};
fmClosed {};
fmInOut {};
fmInput {};
fmOutput {};
fsDirectory {};
fsExtension {};
fsFileName {};
fsPathName {};
 
/* Control Styles */
BS_AUTO {};
BS_AUTOCHECKBOX {};
BS_AUTORADIOBUTTON {};
BS_CHECKBOX {};
BS_LEFTTEXT {};
BS_DEFPUSHBUTTON {};
BS_GROUPBOX {};
BS_LEFTTEXT {};
BS_OWNERDRAW {};
BS_OWNERDRAW {};
BS_PUSHBUTTON {};
BS_RADIOBUTTON {};
BS_LEFTTEXT {};

/* Combination box styles */
CBS_AUTOHSCROLL {};
CBS_DISABLENOSCROLL {};
CBS_DROPDOWN {};
CBS_SIMPLE {};
CBS_DROPDOWNLIST {};
CBS_DROPDOWN {};
CBS_HASSTRINGS {};
CBS_NOINTEGRALHEIGHT {};
CBS_OEMCONVERT {};
CBS_SIMPLE {};
CBS_DROPDOWN {};
CBS_OWNERDRAWFIXED {};
CBS_OWNERDRAWVARIABLE {};
CBS_SIMPLE {};
CBS_SORT {};

/* Edit control styles */
ES_AUTOHSCROLL {};
ES_AUTOVSCROLL {};
ES_CENTER {};
ES_LEFT {};
ES_LOWERCASE {};
ES_MULTILINE {};
ES_WANTRETURN {};
ES_AUTOVSCROLL {};
ES_AUTOVSCROLL {};
ES_AUTOHSCROLL {};
ES_AUTOHSCROLL {};
ES_NOHIDESEL {};
ES_OEMCONVERT {};
ES_PASSWORD {};
ES_READONLY {};
ES_RIGHT {};
ES_UPPERCASE {};
ES_WANTRETURN {};

/* List box styles */
LBS_DISABLENOSCROLL {};
LBS_EXTENDEDSEL {};
LBS_HASSTRINGS {};
LBS_MULTICOLUMN {};
LBS_MULTIPLESEL {};
LBS_NOINTEGRALHEIGHT {};
LBS_NOREDRAW {};
LBS_NOTIFY {};
LBS_OWNERDRAWFIXED {};
LBS_OWNERDRAWVARIABLE {};
LBS_SORT {};
LBS_STANDARD {};
LBS_USETABSTOPS {};
LBS_WANTKEYBOARDINPUT {};
LBS_HASSTRINGS {};
LBS_HASSTRINGS {};

/* Scroll bar styles */
SBS_BOTTOMALIGN {};
SBS_HORZ {};
SBS_HORZ {};
SBS_BOTTOMALIGN {};
SBS_TOPALIGN {};
SBS_LEFTALIGN {};
SBS_VERT {};
SBS_RIGHTALIGN {};
SBS_VERT {};
SBS_SIZEBOX {};
SBS_SIZEBOXBOTTOMRIGHTALIGN {};
SBS_SIZEBOXTOPLEFTALIGN {};
SBS_SIZEBOXBOTTOMRIGHTALIGN {};
SBS_SIZEBOX {};
SBS_SIZEBOXTOPLEFTALIGN {};
SBS_SIZEBOX {};
SBS_TOPALIGN {};
SBS_HORZ {};
SBS_VERT {};
SBS_RIGHTALIGN {};
SBS_LEFTALIGN {};

/* Static control styles */
SS_BLACKFRAME {};
SS_BLACKRECT {};
SS_CENTER {};
SS_GRAYFRAME {};
SS_GRAYRECT {};
SS_ICON {};
SS_LEFT {};
SS_LEFTNOWORDWRAP {};
SS_NOPREFIX {};
SS_NOPREFIX {};
SS_RIGHT {};
SS_SIMPLE {};
SS_WHITEFRAME {};
SS_WHITERECT {};

/* Virtual key codes */
VK_LBUTTON {};
VK_RBUTTON {};
VK_CANCEL {};
VK_MBUTTON {};
VK_BACK {};
VK_TAB {};
VK_CLEAR {};
VK_RETURN {};
VK_SHIFT {};
VK_CONTROL {};
VK_MENU {};
VK_PAUSE {};
VK_CAPITAL {};
VK_ESCAPE {};
VK_SPACE {};
VK_PRIOR {};
VK_NEXT {};
VK_END {};
VK_HOME {};
VK_LEFT {};
VK_UP {};
VK_RIGHT {};
VK_DOWN {};
VK_SELECT {};
VK_EXECUTE {};
VK_SNAPSHOT {};
VK_INSERT {};
VK_DELETE {};
VK_HELP {};
VK_0 {};
VK_1 {};
VK_2 {};
VK_3 {};
VK_4 {};
VK_5 {};
VK_6 {};
VK_7 {};
VK_8 {};
VK_9 {};
VK_A {};
VK_B {};
VK_C {};
VK_D {};
VK_E {};
VK_F {};
VK_G {};
VK_H {};
VK_I {};
VK_J {};
VK_K {};
VK_L {};
VK_M {};
VK_N {};
VK_O {};
VK_P {};
VK_Q {};
VK_R {};
VK_S {};
VK_T {};
VK_U {};
VK_V {};
VK_W {};
VK_X {};
VK_Y {};
VK_Z {};
VK_NUMPAD0 {};
VK_NUMPAD1 {};
VK_NUMPAD2 {};
VK_NUMPAD3 {};
VK_NUMPAD4 {};
VK_NUMPAD5 {};
VK_NUMPAD6 {};
VK_NUMPAD7 {};
VK_NUMPAD8 {};
VK_NUMPAD9 {};
VK_MULTIPLY {};
VK_ADD {};
VK_SEPARATOR {};
VK_SUBTRACT {};
VK_DECIMAL {};
VK_DIVIDE {};
VK_F1 {};
VK_F2 {};
VK_F3 {};
VK_F4 {};
VK_F5 {};
VK_F6 {};
VK_F7 {};
VK_F8 {};
VK_F9 {};
VK_F10 {};
VK_F11 {};
VK_F12 {};
VK_F13 {};
VK_F14 {};
VK_F15 {};
VK_F16 {};
VK_F17 {};
VK_F18 {};
VK_F19 {};
VK_F20 {};
VK_F21 {};
VK_F22 {};
VK_F23 {};
VK_F24 {};
VK_NUMLOCK {};
VK_SCROLL {};

/* functions */
function Swap(X);
function TextHeight(TextString: string): Word;
function TextWidth(TextString: string): Word;
function Trunc(X: Real): Longint;
function UpCase(Ch: Char): Char;
function Sum(var X: array of Real): Real;
function FileExists(FileName: String): Boolean;
function IntToStr(I: Longint): String;
function StrNew(S: PChar): PChar;
function NamePart(FileName: PChar): PChar;
function HasWildcards(FileName: PChar): Boolean;
function MakeWindow(AWindowsObject: PWindowsObject): PWindowsObject; virtual;
function ExecDialog(ADialog: PWindowsObject): Integer; virtual;
function ProcessAppMsg(var Message: TMsg): Boolean; virtual;
function ProcessDlgMsg(var Message: TMsg): Boolean; virtual;
function ProcessAccels(var Message: TMsg): Boolean; virtual;
function ProcessMDIAccels(var Message: TMsg): Boolean; virtual;
function ValidWindow(AWindowsObject: PWindowsObject):PWindowsObject;
function Transfer(DataPtr: Pointer; TransferFlag: Word): Word; virtual;
function At(Index: Integer): Pointer;
function FirstThat(Test: Pointer): Pointer;
function Matches(Item: Pointer): Boolean; far;
function IndexOf(Item: Pointer): Integer; virtual;
function LastThat(Test: Pointer): Pointer;
function Matches(Item: Pointer): Boolean; far;
function GetEditSel(var StartPos, EndPos: Integer): Boolean;
function SetEditSel(StartPos, EndPos: Integer): Integer;
function Transfer(DataPtr: Pointer; TransferFlag: Word);
function GetItemHandle(DlgItemID: Integer): HWnd;
function SendDlgItemMsg(DlgItemID: Integer; AMsg, WParam: Word; LParam: Longint): Longint;
function GetLineIndex(LineNumber: Integer): Integer; virtual;
function DeleteLine(LineNumber: Integer): Boolean; virtual;
function DeleteSubText(StartPos, EndPos: Integer): Boolean; virtual;
function GetLine(ATextString: PChar; StrSize, LineNumber: Integer): Boolean; virtual;
function GetLineFromPos(CharPos: Integer): Integer; virtual;
function GetLineLength(LineNumber: Integer): Integer; virtual;
function IsValid(ReportError: Boolean): Boolean;
function SetSelection(StartPos, EndPos: Integer): Boolean; virtual;
function Transfer(DataPtr: Pointer; TransferFlag: Word): Word; virtual;
function GetDialogInfo(var Pages: Integer): Boolean; virtual;
function GetSelection(var Start, Stop: Integer): Boolean; virtual;
function CanOverwrite(FileStr: PChar): Boolean; virtual;
function IsValid(const S: string): Boolean; virtual;
function IsValidInput(var S: string; SuppressFill: Boolean): Boolean; virtual;
function AddString(AString: PChar): Integer; virtual;
function DeleteString(Index: Integer): Integer; virtual;
function GetMsgID(AMsg: TMsgName): virtual;
function GetSelString(AString: PChar; MaxChars: Integer): Integer; virtual;
function GetString(AString: PChar; Index: Integer): Integer; virtual;
function GetStringLen(Index: Integer): Integer; virtual;
function InsertString(AString: PChar; Index: Integer): Integer; virtual;
function SetSelIndex(Index: Integer): Integer; virtual;
function SetSelString(AString: PChar; AIndex: Integer): Integer; virtual;
function Transfer(DataPtr: Pointer; TransferFlag: Word): Word; virtual;
function IsValid(const S: string): Boolean; virtual;
function Lookup(const S: string): Boolean; virtual;
function InitAbortDialog(Parent: PWindowsObject; Title: PChar): PDialog; virtual;
function InitPrintDialog(Parent: PWindowsObject; PrnDC: HDC; Pages: Integer;  SelAllowed: Boolean; var Data: TPrintDialogRec): PDialog; virtual;
function InitSetupDialog(Parent: PWindowsObject): PDialog; virtual;
function Print(ParentWin: PWindowsObject; PrintOut: PPrintOut): Boolean;
function GetDialogInfo(var Pages: Integer): Boolean; virtual;
function GetSelection(var Start, Stop: Integer): Boolean; virtual;
function IsValidInput(var S: string; SuppressFill: Boolean): Boolean; virtual;
function IsValid(const S: string): Boolean; virtual;
function Picture(var Input: string): TPicResult; virtual;
function IsValid(const S: string): Boolean; virtual;
function Transfer(var S: String; Buffer: Pointer; Flag: TVTransfer): Word; virtual;
function DeltaPos(Delta: Integer): Integer; virtual;
function Transfer(DataPtr: Pointer; TransferFlag: Word): Word; virtual;
function IsVisibleRect(X, Y: Longint; XExt, YExt: Integer): Boolean; virtual;
function Compare(Key1, Key2: Pointer): Integer; virtual;
function IndexOf(Item: Pointer): Integer; virtual;
function KeyOf(Item: Pointer): Pointer; virtual;
function Search(Key: Pointer; var Index: Integer): Boolean; virtual;
function GetText(ATextString: PChar; MaxChars: Integer): Integer; virtual;
function Transfer(DataPtr: Pointer; TransferFlag: Word): Word; virtual;
function Lookup(const S: string): Boolean; virtual;
function StrWrite(P: PChar);
function Compare(Key1, Key2: Pointer): Integer; virtual;
function GetItem(var S: TStream): Pointer; virtual;
function IsValid(const S: string): Boolean; virtual;
function IsValidInput(var S: string; SuppressFill: Boolean): Boolean;  virtual;
function Transfer(var S: String; Buffer: Pointer; Flag: TVTransfer): Word; virtual;
function Valid(const S: string): Boolean;
function At(I: Integer): PWindowsObject;
function ChildWithId(Id: Integer): PWindowsObject; virtual;
function FirstThat(Test: Pointer): PWindowsObject;
function IndexOf(P: PWindowsObject): Integer;
function IsFlagSet(Mask: Byte);
function Transfer(DataPtr: Pointer; TransferFlag: Word): Word; virtual;
function GetDialogInfo(var Pages: Integer): Boolean; virtual;
function ExtractIcon(Inst: THandle; ExeFileName: PChar; IconIndex: Word): HIcon;
function FindExecutable(FileName, Directory, Result: PChar): THandle;
function GetSystemDir(AppDir: PChar; Buffer: PChar; Size: Integer): Word;
function GetWindowsDir(AppDir: PChar; Buffer: PChar; Size: Integer): Word;
function VerLanguageName(Lang: Word; Lang: PChar; Size: Word): Word;
function VerQueryValue(Block: Pointer; SubBlock: PChar;	var Buffer: Pointer; var Len: Word): Bool;
function _lclose(FileHandle: Integer): Integer;
function _lcreat(PathName: PChar; Attribute: Integer): Integer;
function _lopen(PathName: PChar; ReadWrite: Integer): Integer;
function _lread(FileHandle: Integer; Buffer: PChar; Bytes: Integer): Word;
function _lwrite(FileHandle: Integer; Buffer: PChar; Bytes: Integer): Word;
function AccessResource(Instance, ResInfo: THandle): Integer;
function AddAtom(Str: PChar): TAtom;
function AllocDStoCSAlias(Selector: Word): Word;
function AllocSelector(Selector: Word): Word;
function AnsiToOem(AnsiStr, OemStr: PChar): Integer;
function Catch(var CatchBuf: TCatchBuf): Integer;
function CountVoiceNotes(Voice: Integer): Integer;
function DeleteAtom(AnAtom: TAtom): TAtom;
function FindAtom(Str: PChar): TAtom;
function FindResource(Instance: THandle; Name, ResType: PChar): THandle;
function FreeModule(Module: THandle): Bool;
function FreeResource(ResData: THandle): Bool;
function FreeSelector(Selector: Word): Word;
function GetAtomHandle(AnAtom: TAtom): THandle;
function GetAtomName(AnAtom: TAtom; Buffer: PChar; Size: Integer): Word;
function GetCodeHandle(Proc: TFarProc): THandle;
function GetDriveType(Drive: Integer): Word;
function GetFreeSpace(Flag: Word): LongInt;
function GetKeyboardType(TypeFlag: Integer): Integer;
function GetModuleFileName(Module: THandle; Filename: PChar; Size: Integer): Integer;
function GetModuleHandle(ModuleName: PChar): THandle;
function GetModuleUsage(Module: THandle): Integer;
function GetProcAddress(Module: THandle; ProcName: PChar): TFarProc;
function GetSelectorBase(Selector: Word): Longint;
function GetSelectorLimit(Selector: Word): Longint;
function GetSystemDirectory(Buffer: PChar; Size: Word): Word;
function GetTempDrive(DriveLetter: Char): Char;
function GetWinDebugInfo(DebugInfo: PWinDebugInfo; Flags: Word): Bool;
function GetWindowsDirectory(Buffer: PChar; Size: Word): Word;
function GlobalAlloc(Flags: Word; Bytes: LongInt): THandle;
function GlobalCompact(MinFree: LongInt): LongInt;
function GlobalDosAlloc(Bytes: LongInt): LongInt;
function GlobalDosFree(Selector: Word): Word;
function GlobalFlags(Mem: THandle): Word;
function GlobalFree(Mem: THandle): THandle;
function GlobalHandle(Mem: Word): LongInt;
function GlobalLock(Mem: THandle): Pointer;
function GlobalLRUNewest(Mem: THandle): THandle;
function GlobalLRUOldest(Mem: THandle): THandle;
function GlobalPageLock(Selector: THandle): Word;
function GlobalPageUnlock(Selector: THandle): Word;
function GlobalReAlloc(Mem: THandle; Bytes: LongInt; Flags: Word): THandle;
function GlobalSize(Mem: THandle): LongInt;
function GlobalUnfix(Mem: THandle): Bool;
function GlobalUnlock(Mem: THandle): Bool;
function GlobalUnWire(Mem: THandle): Bool;
function GlobalWire(Mem: THandle): Pointer;
function InitAtomTable(Size: Integer): Bool;
function IsBadCodePtr(lpfn: TFarProc): Bool;
function IsBadHugeReadPtr(lp: Pointer; cb: Longint): Bool;
function IsBadHugeWritePtr(lp: Pointer; cb: Longint): Bool;
function IsBadReadPtr(lp: Pointer; cb: Word): Bool;
function IsBadStringPtr(lpsz: PChar; cchMax: Word): Bool;
function IsBadWritePtr(lp: Pointer; cb: Word): Bool;
function IsDBCSLeadByte(Ch: Byte): Bool;
function IsTask(Task: THandle): Bool;
function LoadLibrary(LibFileName: PChar): THandle;
function LoadModule(ModuleName: PChar; ParameterBlock: Pointer): THandle;
function LoadResource(Instance: THandle; ResInfo: THandle): THandle;
function LocalAlloc(Flags, Bytes: Word): THandle;
function LocalCompact(MinFree: Word): Word;
function LocalFlags(Mem: THandle): Word;
function LocalFree(Mem: THandle): THandle;
function LocalHandle(Mem: Word): THandle;
function LocalInit(Segment, Start, EndPos: Word): Bool;
function LocalLock(Mem: THandle): Pointer;
function LocalReAlloc(Mem: THandle; Bytes, Flags: Word): THandle;
function LocalShrink(Seg: THandle; Size: Word): Word;
function LocalSize(Mem: THandle): Word;
function LocalUnlock(Mem: THandle): Bool;
function LockResource(ResData: THandle): Pointer;
function LockSegment(Segment: Word): THandle;
function lstrcat(Str1, Str2: PChar): PChar;
function lstrcpy(Str1, Str2: PChar): PChar;
function lstrcpyn(String1, String2: PChar; i: Integer): PChar;
function lstrlen(Str: PChar): Integer;
function MakeProcInstance(Proc: TFarProc; Instance: THandle): TFarProc;
function MapVirtualKey(Code, MapType: Word): Word;
function OemKeyScan(OemChar: Word): LongInt;
function OemToAnsi(OemStr, AnsiStr: PChar): Bool;
function PrestoChangoSelector(SourceSel, DestSel: Word): Word;
function SetErrorMode(Mode: Word): Word;
function SetHandleCount(Number: Word): Word;
function SetSelectorBase(Selector: Word; Base: Longint): Word;
function SetSelectorLimit(Selector: Word; Base: Longint): Word;
function SetSoundNoise(Source, Duration: Integer): Integer;
function SetSwapAreaSize(Size: Word): LongInt;
function SetVoiceAccent(Voice, Tempo, Volume, Mode, Pitch: Integer): Integer;
function SetVoiceEnvelope(Voice, Shape, RepeatCount: Integer): Integer;
function SetVoiceNote(Voice, Value, Length, Cdots: Integer): Integer;
function SetVoiceQueueSize(Voice, Bytes: Integer): Integer;
function SetVoiceThreshold(Voice, Notes: Integer): Integer;
function SetWinDebugInfo(DebugInfo: PWinDebugInfo): Bool;
function SizeofResource(Instance, ResInfo: THandle): LongInt;
function UnlockSegment(Segment: Word): THandle;
function VkKeyScan(Chr: Word): Word;
function WaitSoundState(State: Integer): Integer;
function WinExec(CmdLine: PChar; CmdShow: Word): Word;
function WriteProfileString(ApplicationName, KeyName, Str: PChar): Bool;
function wvsprintf(DestStr, Format: PChar; var ArgList): Integer;
function CopyLZFile(Source, Dest: Integer): Longint;
function GetExpandedName(Source, Buffer: PChar): Integer;
function LZCopy(Source, Dest: Integer): Longint;
function LZInit(Source: Integer): Integer;
function LZRead(LZFile: Integer; Buf: PChar; Count: Integer): Integer;
function LZSeek(LZFile: Integer; SeekTo: Longint; Mode: Integer): Longint;
function OleActivate(Self: POleObject; Verb: Word; Show, TakeFocus: Bool; hWnd: HWnd; Bounds: PRect): TOleStatus;
function OleBlockServer(Server: LHServer): TOleStatus;
function OleClone(OleObject: POleObject; Client: POleClient; ClientDoc:   LHClientDoc; ObjName: PChar; var OleObject: POleObject):      TOleStatus;
function OleClose(Self: POleObject): TOleStatus;
function OleCopyToClipboard(Self: POleObject): TOleStatus;
function OleCreateInvisible(Protocol: PChar; Client: POleClient; Class: PChar;ClientDoc: LHClientDoc; ObjName: PChar; var OleObject: POleObject; RenderOpt: TOleOPT_Render; Format: TOleClipFormat; Activate: Bool): TOleStatus;
function OleDelete(Self: POleObject): TOleStatus;
function OleEqual(Self: POleObject; OleObject: POleObject): TOleStatus;
function OleIsDcMeta(DC: HDC): Bool;
function OleLockServer(OleObject: POleObject; var Server: LHServer): TOleStatus;
function OleQueryBounds(Self: POleObject; var Bounds: TRect): TOleStatus;
function OleQueryCreateFromClip(Protocol: PChar; render_opt: TOleOPT_Render; Format: TOleClipFormat): TOleStatus;
function OleQueryLinkFromClip(Protocol: PChar; render_opt: TOleOPT_Render; Format: TOleClipFormat): TOleStatus;
function OleQueryOpen(Self: POleObject): TOleStatus;
function OleQueryOutOfDate(Self: POleObject): TOleStatus;
function OleQueryProtocol(Self: POleObject; Protocol: PChar): Pointer;
function OleQueryReleaseError(Self: POleObject): TOleStatus;
function OleQueryReleaseMethod(Self: POleObject): TOle_Release_Method;
function OleQueryReleaseStatus(Self: POleObject): TOleStatus;
function OleQuerySize(Self: POleObject; var Size: Longint): TOleStatus;
function OleQueryType(Self: POleObject; var LinkType: Longint): TOleStatus;
function OleReconnect(Self: POleObject): TOleStatus;
function OleRelease(Self: POleObject): TOleStatus;
function OleRename(Self: POleObject; NewName: PChar): TOleStatus;
function OleRenameServerDoc(Doc: LHServerDoc; NewName: PChar): TOleStatus;
function OleRevertClientDoc(ClientDoc: LHClientDoc): TOleStatus;
function OleRevertServerDoc(Doc: LHServerDoc): TOleStatus;
function OleRevokeClientDoc(ClientDoc: LHClientDoc): TOleStatus;
function OleRevokeServerDoc(Doc: LHServerDoc): TOleStatus;
function OleRevokeObject(Client: POleClient): TOleStatus;
function OleRevokeServer(Server: LHServer): TOleStatus;
function OleSavedClientDoc(ClientDoc: LHClientDoc): TOleStatus;
function OleSavedServerDoc(Doc: LHServerDoc): TOleStatus;
function OleSaveToStream(Self: POleObject; Stream: POleStream): TOleStatus;
function OleSetBounds(Self: POleObject; var Bounds: TRect): TOleStatus;
function OleUnblockServer(Server: LHServer; var Reqests: Bool): TOleStatus;
function OleUnlockServer(Sever: LHServer): TOleStatus;
function OleUpdate(Self: POleObject): TOleStatus;
function AbortDoc(DC: HDC): Integer;
function AddFontResource(Filename: PChar): Integer;
function Arc(DC: HDC; X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer): Bool;
function Chord(DC: HDC; X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer): Bool;
function CloseMetaFile(DC: THandle): THandle;
function CopyMetaFile(SrcMetaFile: THandle; FileName: PChar): THandle;
function CreateBitmap(Width, Height: Integer; Planes, BitCount: Byte;  Bits: Pointer): HBitmap;
function CreateBitmapIndirect(var Bitmap: TBitmap): HBitmap;
function CreateBrushIndirect(var LogBrush: TLogBrush): HBrush;
function CreateCompatibleBitmap(DC: HDC; Width, Height: Integer): HBitmap;
function CreateCompatibleDC(DC: HDC): HDC;
function CreateDC(DriverName, DeviceName, OutPut: PChar; InitData: Pointer): HDC;
function CreateDIBitmap(DC: HDC; var InfoHeader: TBitmapInfoHeader; dwUsage: LongInt; InitBits: PChar; var InitInfo: TBitmapInfo; wUsage: Word): HBitmap;
function CreateDIBPatternBrush(PackedDIB: THandle; Usage: Word): HBrush;
function CreateDiscardableBitmap(DC: HDC; Width, Height: Integer): HBitmap;
function CreateEllipticRgn(X1, Y1, X2, Y2: Integer): HRgn;
function CreateEllipticRgnIndirect(var Rect: TRect): HRgn;
function CreateFontIndirect(var LogFont: TLogFont): HFont;
function CreateHatchBrush(Index: Integer; Color: TColorRef): HBrush;
function CreateIC(DriverName, DeviceName, Output: PChar; InitData: Pointer): HDC;
function CreateMetaFile(Filename: PChar): THandle;
function CreatePalette(var LogPalette: TLogPalette): HPalette;
function CreatePatternBrush(Bitmap: HBitmap): HBrush;
function CreatePen(PenStyle, Width: Integer; Color: TColorRef): HPen;
function CreatePenIndirect(var LogPen: TLogPen): HPen;
function CreatePolygonRgn(var Points; Count, PolyFillMode: Integer): HRgn;
function CreatePolyPolygonRgn(var Points; var PolyCounts; Count, PolyFillMode: Integer): HRgn;
function CreateRectRgn(X1, Y1, X2, Y2: Integer): HRgn;
function CreateRectRgnIndirect(var Rect: TRect): HRgn;
function CreateRoundRectRgn(X1, Y1, X2, Y2, X3, Y3: Integer): HRgn;
function CreateScalableFontResource(A: HDC; B, C, D: PChar): Bool;
function CreateSolidBrush(Color: TColorRef): HBrush;
function DeleteDC(DC: HDC): Bool;
function DeleteMetaFile(MF: THandle): Bool;
function DeleteObject(Handle: THandle): Bool;
function DPtoLP(DC: HDC; var Points; Count: Integer): Bool;
function Ellipse(DC: HDC; X1, Y1, X2, Y2: Integer): Bool;
function EndDoc(DC: HDC): Integer;
function EndPage(DC: HDC): Integer;
function EnumFonts(DC: HDC; Facename: PChar; FontFunc: TFarProc; Data: Pointer): Integer;
function EnumMetaFile(DC: HDC; MF: THandle; CallbackFunc: TFarProc; ClientData: Pointer): Bool;
function EnumObjects(DC: HDC; ObjectType: Integer; ObjectFunc: TFarProc; Data: Pointer): Integer;
function EqualRgn(SrcRgn1, SrcRgn2: HRgn): Bool;
function Escape(DC: HDC; Escape, Count: Integer; InData, OutData: Pointer): Integer;
function ExcludeClipRect(DC: HDC; X1, Y1, X2, Y2: Integer): Integer;
function ExtFloodFill(DC: HDC; X, Y: Integer; Color: TColorRef; FillType: Word): Bool;
function ExtTextOut(DC: HDC; X, Y: Integer; Options: Word; Rect: PRect; Str: PChar; Count: Word; Dx: PInteger): Bool;
function FillRgn(DC: HDC; Rgn: HRgn; Brush: HBrush): Bool;
function FloodFill(DC: HDC; X, Y: Integer; Color: TColorRef): Bool;
function FrameRgn(DC: HDC; Rgn: HRgn; Brush: HBrush; Width, Height: Integer): Bool;
function GetAspectRatioFilter(DC: HDC): LongInt;
function GetAspectRatioFilterEx(DC: HDC; Size: PSize): Bool;
function GetBitmapBits(Bitmap: HBitmap; Count: LongInt; Bits: Pointer): LongInt;
function GetBitmapDimension(Bitmap: HBitmap): LongInt;
function GetBitmapDimensionEx(BM: HBitmap; Size: PSize): Bool;
function GetBkColor(DC: HDC): LongInt;
function GetBkMode(DC: HDC): Integer;
function GetBoundsRect(DC: HDC; var Bounds: TRect; Flags: Word): Word;
function GetBrushOrg(DC: HDC): LongInt;
function GetBrushOrgEx(DC: HDC; Point: PPoint): Bool;
function GetCharABCWidths(A: HDC; B, C: Word; var D: TABC): Bool;
function GetCharWidth(DC: HDC; FirstChar, LastChar: Word; var Buffer): Bool;
function GetClipBox(DC: HDC; var Rect: TRect): Integer;
function GetCurrentPosition(DC: HDC): LongInt;
function GetCurrentPositionEx(DC: HDC; Point: PPoint): Bool;
function GetDCOrg(DC: HDC): LongInt;
function GetDeviceCaps(DC: HDC; Index: Integer): Integer;
function GetDIBits(DC: HDC; Bitmap: HBitmap; StartScan, NumScans: Word; Bits: Pointer; var BitInfo: TBitmapInfo; Usage: Word): Integer;
function GetFontData(A: HDC; B, C: Longint; D: PChar; E: Longint): Longint;
function GetGlyphOutline(A: HDC; B, C: Word; var D: TGlyphMetrics; E: Longint; f: PChar; var g: TMat2): Longint;
function GetKerningPairs(DC: HDC; i: Integer; Pair: PKerningPair): Integer;
function GetMapMode(DC: HDC): Integer;
function GetMetaFile(Filename: PChar): THandle;
function GetMetaFileBits(MF: THandle): THandle;
function GetNearestColor(DC: HDC; Color: TColorRef): TColorRef;
function GetNearestPaletteIndex(Palette: HPalette; Color: TColorRef): Word;
function GetObject(hObject: THandle; Count: Integer; lpObject: Pointer): Integer;
function GetOutlineTextMetrics(A: HDC; B: Word; var C: TOutlineTextMetric): Word;
function GetPaletteEntries(Palette: HPalette; StartIndex, NumEntries: Word; var PaletteEntries): Word;
function GetPixel(DC: HDC; X, Y: Integer): TColorRef;
function GetPolyFillMode(DC: HDC): Integer;
function GetRasterizerCaps(var A: TRasterizer_Status; B: Integer): Bool;
function GetRgnBox(Rgn: HRgn; var Rect: TRect): Integer;
function GetROP2(DC: HDC): Integer;
function GetStockObject(Index: Integer): THandle;
function GetStretchBltMode(DC: HDC): Integer;
function GetSystemPaletteEntries(DC: HDC; StartIndex, NumEntries: Word; var PaletteEntries): Word;
function GetSystemPaletteUse(DC: HDC): Word;
function GetTextCharacterExtra(DC: HDC): Integer;
function GetTextAlign(DC: HDC): Word;
function GetTextColor(DC: HDC): TColorRef;
function GetTextExtent(DC: HDC; Str: PChar; Count: Integer): LongInt;
function GetTextExtentPoint(DC: HDC; Str: PChar; Count: Integer; var Size: Integer): Boolean;
function GetTextFace(DC: HDC; Count: Integer; Facename: PChar): Integer;
function GetTextMetrics(DC: HDC; var Metrics: TTextMetric): Bool;
function GetViewportExt(DC: HDC): LongInt;
function GetViewportExtEx(DC: HDC; Size: PSize): Bool;
function GetViewportOrg(DC: HDC): LongInt;
function GetViewportOrgEx(DC: HDC; Point: PPoint): Bool;
function GetWindowExt(DC: HDC): LongInt;
function GetWindowExtEx(DC: HDC; Size: PSize): Bool;
function GetWindowOrg(DC: HDC): LongInt;
function GetWindowOrgEx(DC: HDC; Point: PPoint): Bool;
function IntersectClipRect(DC: HDC; X1, Y1, X2, Y2: Integer): Integer;
function InvertRgn(DC: HDC; Rgn: HRgn): Bool;
function IsGDIObject(Obj: THandle): Bool;
function LineTo(DC: HDC; X, Y: Integer): Bool;
function LPtoDP(DC: HDC; var Points; Count: Integer): Bool;
function MoveTo(DC: HDC; X, Y: Integer): LongInt;
function MoveToEx(DC: HDC; nX, nY: Integer; Point: PPoint): Bool;
function OffsetClipRgn(DC: HDC; X, Y: Integer): Integer;
function OffsetRgn(Rgn: HRgn; X, Y: Integer): Integer;
function OffsetViewportOrg(DC: HDC; X, Y: Integer): LongInt;
function OffsetViewportOrgEx(DC: HDC; nX, nY: Integer; Point: PPoint): Bool;
function OffsetWindowOrg(DC: HDC; X, Y: Integer): LongInt;
function OffsetWindowOrgEx(DC: HDC; nX, nY: Integer; Point: PPoint): Bool;
function PaintRgn(DC: HDC; Rgn: HRgn): Bool;
function PatBlt(DC: HDC; X, Y, Width, Height: Integer; Rop: LongInt): Bool;
function Pie(DC: HDC; X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer): Bool;
function PlayMetaFile(DC: HDC; MF: THandle): Bool;
function Polygon(DC: HDC; var Points; Count: Integer): Bool;
function Polyline(DC: HDC; var Points; Count: Integer): Bool;
function PolyPolygon(DC: HDC; var Points; var PolyCounts; Count: Integer): Bool;
function PtInRegion(Rgn: HRgn; X, Y: Integer): Bool;
function PtVisible(DC: HDC; X, Y: Integer): Bool;
function QueryAbort(DC: HDC; Reserved: Integer): Bool;
function Rectangle(DC: HDC; X1, Y1, X2, Y2: Integer): Bool;
function RectInRegion(Rgn: HRgn; var Rect: TRect): Bool;
function RectVisible(DC: HDC; var Rect: TRect): Bool;
function RemoveFontResource(Filename: PChar): Bool;
function ResetDC(aHdc: HDC; DevMode: PDevMode): HDC;
function ResizePalette(Palette: HPalette; NumEntries: Word): Bool;
function RestoreDC(DC: HDC; SavedDC: Integer): Bool;
function RoundRect(DC: HDC; X1, Y1, X2, Y2, X3, Y3: Integer): Bool;
function SaveDC(DC: HDC): Integer;
function ScaleViewportExt(DC: HDC; Xnum, Xdenom, Ynum, Ydenom: Integer): LongInt;
function ScaleViewportExtEx(DC: HDC; Xnum, Xdenom, Ynum, Ydenom: Integer; Size: PSize): Bool;
function ScaleWindowExt(DC: HDC; Xnum, Xdenom, Ynum, Ydenom: Integer): LongInt;
function ScaleWindowExtEx(DC: HDC; Xnum, Xdenom, Ynum, Ydenom: Integer; Size: PSize): Bool;
function SelectClipRgn(DC: HDC; Rgn: HRgn): Integer;
function SelectObject(DC: HDC; hObject: THandle): THandle;
function SetAbortProc(DC: HDC; AbortProc: TAbortProc): Integer;
function SetBitmapBits(Bitmap: HBitmap; Count: LongInt; Bits: Pointer): LongInt;
function SetBitmapDimension(Bitmap: HBitmap; X, Y: Integer): LongInt;
function SetBitmapDimensionEx(BM: HBitmap; nX, nY: Integer; Size: PSize): Bool;
function SetBkColor(DC: HDC; Color: TColorRef): TColorRef;
function SetBkMode(DC: HDC; BkMode: Integer): Integer;
function SetBoundsRect(DC: HDC; var Bounds: TRect; Flags: Word): Word;
function SetBrushOrg(DC: HDC; X, Y: Integer): LongInt;
function SetDIBits(DC: HDC; Bitmap: THandle; StartScan, NumScans: Word; Bits: Pointer; var BitsInfo: TBitmapInfo; Usage: Word): Integer;
function SetDIBitsToDevice(DC: HDC; DestX, DestY, Width, Height, SrcX, SrcY, nStartScan, NumScans: Word; Bits: Pointer; var BitsInfo: TBitmapInfo; Usage: Word): Integer;
function SetMapMode(DC: HDC; MapMode: Integer): Integer;
function SetMapperFlags(DC: HDC; Flag: LongInt): LongInt;
function SetMetaFileBits(Mem: THandle): THandle;
function SetMetaFileBitsBetter(MF: THandle): THandle;
function SetPaletteEntries(Palette: HPalette; StartIndex, NumEntries: Word; var PaletteEntries): Word;
function SetPixel(DC: HDC; X, Y: Integer; Color: TColorRef): LongInt;
function SetPolyFillMode(DC: HDC; PolyFillMode: Integer): Integer;
function SetROP2(DC: HDC; DrawMode: Integer): Integer;
function SetStretchBltMode(DC: HDC; StretchMode: Integer): Integer;
function SetSystemPaletteUse(DC: HDC; Usage: Word): Word;
function SetTextAlign(DC: HDC; Flags: Word): Word;
function SetTextCharacterExtra(DC: HDC; CharExtra: Integer): Integer;
function SetTextColor(DC: HDC; Color: TColorRef): TColorRef;
function SetTextJustification(DC: HDC; BreakExtra, BreakCount: Integer): Integer;
function SetViewportExt(DC: HDC; X, Y: Integer): LongInt;
function SetViewportExtEx(DC: HDC; nX, nY: Integer; Size: PSize): Bool;
function SetViewportOrg(DC: HDC; X, Y: Integer): LongInt;
function SetViewportOrgEx(DC: HDC; nX, nY: Integer; Point: PPoint): Bool;
function SetWindowExt(DC: HDC; X, Y: Integer): LongInt;
function SetWindowExtEx(DC: HDC; nX, nY: Integer; Size: PSize): Bool;
function SetWindowOrg(DC: HDC; X, Y: Integer): LongInt;
function SetWindowOrgEx(DC: HDC; nX, nY: Integer; Point: PPoint): Bool;
function SpoolFile(Printer, Port, Job, F: PChar): THandle;
function StartDoc(DC: HDC; var di: TDocInfo): Integer;
function StartPage(DC: HDC): Integer;
function StretchBlt(DestDC: HDC; X, Y, Width, Height: Integer; SrcDC: HDC; XSrc, YSrc, SrcWidth, SrcHeight: Integer; Rop: LongInt): Bool;
function StretchDIBits(DC: HDC; DestX, DestY, DestWidth, DestHeight, SrcX, SrcY, SrcWidth, SrcHeight: Word; Bits: Pointer; var BitsInfo: TBitmapInfo;Usage: Word; Rop: LongInt): Integer;
function TextOut(DC: HDC; X, Y: Integer; Str: PChar; Count: Integer): Bool;
function UnrealizeObject(hObject: HBrush): Bool;
function UpdateColors(DC: HDC): Integer;
function ClassFirst(lpClass: PClassEntry): Bool;
function ClassNext(lpClass: PClassEntry): Bool;
function GlobalEntryHandle(lpGlobal: PGlobalEntry; hItem: THandle): Bool;
function GlobalEntryModule(lpGlobal: PGlobalEntry; hModule: THandle; wSeg: Word): Bool;
function GlobalFirst(lpGlobal: PGlobalEntry; wFlags: Word): Bool;
function GlobalHandleToSel(hMem: THandle): Word;
function GlobalInfo(lpGlobalInfo: PGlobalInfo): Bool;
function GlobalNext(lpGlobal: PGlobalEntry; wFlags: Word): Bool;
function InterruptRegister(hTask: THandle; lpfnIntCallBack: TIntCallBack): Bool;
function InterruptUnRegister(hTask: THandle): Bool;
function LocalFirst(lpLocal: PLocalEntry; hHeap: THandle): Bool;
function LocalInfo(lpLocal: PLocalInfo; hHeap: THandle): Bool;
function LocalNext(lpLocal: PLocalEntry): Boolean;
function MemManInfo(lpEnhMode: PMemManInfo): Bool;
function ModuleFindHandle(lpModule: PModuleEntry; hModule: THandle): THandle;
function ModuleFindName(lpModule: PModuleEntry; lpstrName: PChar): THandle;
function ModuleFirst(lpModule: PModuleEntry): Bool;
function ModuleNext(lpModule: PModuleEntry): Bool;
function NotifyRegister(hTask: THandle; lpfn: TNotifyCallBack; wFlags:Word): Bool;
function NotifyUnRegister(hTask: THandle): Bool;
function StackTraceFirst(lpStackTrace: PStackTraceEntry; hTask: THandle): Bool;
function StackTraceNext(lpStackTrace: PStackTraceEntry): Bool;
function SystemHeapInfo(lpSysHeap: PSysHeapInfo): Bool;
function TaskFindHandle(lpTask: PTaskEntry; hTask: THandle): Bool;
function TaskFirst(lpTask: PTaskEntry): Bool;
function TaskGetCSIP(hTask: THandle): Longint;
function TaskNext(lpTask: PTaskEntry): Bool;
function TaskSetCSIP(hTask: THandle; wCS, wIP: Word): Longint;
function TaskSwitch(hTask: THandle; dwNewCSIP: Longint): Bool;
function TimerCount(lpTimer: PTimerInfo): Bool;
function Global32CodeAliasFree(wSelector, wAlias, wFlags: Word): Word;
function Global32Free(wSelector, wFlags: Word): Word;
function ChooseColor(var CC: TChooseColor): Bool;
function ChooseFont(var ChooseFont: TChooseFont): Bool;
function FindText(var FindReplace: TFindReplace): HWnd;
function GetFileTitle(FileName, Title: PChar; TitleSize: Word): Integer;
function GetOpenFileName(var OpenFile: TOpenFilename): Bool;
function GetSaveFileName(var OpenFile: TOpenFilename): Bool;
function PrintDlg(var PrintDlg: TPrintDlg): Bool;
function ReplaceText(var FindReplace: TFindReplace): HWnd;
function AllocDiskSpace(lLeft:Longint, wDrive: Word): Integer;
function AllocFileHandles(Left: Integer): Integer;
function AllocGDIMem(wLeft: Word): Bool;
function AllocMem(dwLeft: Longint): Bool;
function AllocUserMem(wContig :Word): Bool;
function RegCloseKey(Key: HKey): Longint;
function RegCreateKey(Key: HKey; SubKey: PChar; var Result: HKey): Longint;
function RegDeleteKey(Key: HKey; SubKey: PChar): Longint;
function RegOpenKey(Key: HKey; SubKey: PChar; var Result: HKey): Longint;
function DragQueryPoint(Drop: THandle; var Pt: TPoint): Bool;
function AnsiLower(Str: PChar): PChar;
function AnsiLowerBuff(Str: PChar; Length: Word): Word;
function AnsiNext(CurrentChar: PChar): PChar;
function AnsiPrev(Start, CurrentChar: PChar): PChar;
function AnsiUpper(Str: PChar): PChar;
function AnsiUpperBuff(Str: PChar; Length: Word): Word;
function AppendMenu(Menu: HMenu; Flags, IDNewItem: Word; NewItem: PChar): Bool;
function ArrangeIconicWindows(Wnd: HWnd): Word;
function BeginDeferWindowPos(NumWindows: Integer): THandle;
function BeginPaint(Wnd: HWnd; var Paint: TPaintStruct): HDC;
function BuildCommDCB(Def: PChar; var DCB: TDCB): Integer;
function CallMsgFilter(var Msg: TMsg; Code: Integer): Bool;
function CallNextHookEx(Hook: HHook; Code: Integer; wParam: Word; lParam: Longint): Longint;
function CallWindowProc(PrevWndFunc: TFarProc; Wnd: HWnd; Msg, wParam: Word; lParam: LongInt): LongInt;
function ChangeClipboardChain(Wnd, WndNext: HWnd): Bool;
function CheckMenuItem(Menu: HMenu; IDCheckItem, Check: Word): Bool;
function ChildWindowFromPoint(Wnd: HWnd; Point: TPoint): HWnd;
function ClearCommBreak(Cid: Integer): Integer;
function CloseComm(Cid: Integer): Integer;
function CloseDriver(Driver: THandle; lParam1, lParam2: Longint): Longint;
function CopyCursor(hInst: THandle; hCur: HCursor): HCursor;
function CopyIcon(hInst: THandle; Icon: HIcon): HIcon;
function CreateDialog(Instance: THandle; TemplateName: PChar; WndParent: HWnd; DialogFunc: TFarProc): HWnd;
function CreateDialogIndirect(Instance: THandle; DialogTemplate: Pointer; WndParent: HWnd; DialogFunc: TFarProc): HWnd;
function CreateDialogIndirectParam(Instance: THandle;DialogTemplate: Pointer; WndParent: HWnd; DialogFunc: TFarProc; InitParam: LongInt): HWnd;
function CreateDialogParam(Instance: THandle; TemplateName: PChar; WndParent: HWnd; DialogFunc: TFarProc; InitParam: LongInt): HWnd;
function CreateIcon(Instance: THandle; Width, Height: Integer; Planes, BitsPixel: Byte; ANDbits, XORbits: Pointer): HIcon;
function CreateWindow(ClassName, WindowName: PChar; Style: LongInt; X, Y, Width, Height: Integer; WndParent: HWnd; Menu: HMenu; Instance: THandle; Param: Pointer): HWnd;
function CreateWindowEx(ExStyle: LongInt; ClassName, WindowName: PChar; Style: LongInt; X, Y, Width, Height: Integer; WndParent: HWnd; Menu: HMenu; Instance: THandle; Param: Pointer): HWnd;
function DefDlgProc(Dlg: HWnd; Msg, wParam: Word; lParam: LongInt): LongInt;
function DefDriverProc(DriverIdentifier: Longint; DriverId: THandle; Message: Word; lParam1, lParam2: Longint): Longint;
function DefFrameProc(Wnd, WndMDIClient: HWnd; Msg, wParam: Word; lParam: LongInt): LongInt;
function DefHookProc(Code: Integer; wParam: Word; lParam: LongInt;  lpfnNextHook: TFarProc): LongInt;
function DefMDIChildProc(Wnd: HWnd; Msg, wParam: Word; lParam: LongInt): LongInt;
function DefWindowProc(Wnd: HWnd; Msg, wParam: Word;lParam: LongInt): LongInt;
function DeleteMenu(Menu: HMenu; Position, Flags: Word): Bool;
function DestroyCursor(Cursor: HCursor): Bool;
function DestroyIcon(Icon: HIcon): Bool;
function DestroyMenu(Menu: HMenu): Bool;
function DestroyWindow(Wnd: HWnd): Bool;
function DialogBox(Instance: THandle; Templatename: PChar; WndParent: HWnd; DialogFunc: TFarProc): Integer;
function DialogBoxIndirectParam(Instance, DialogTemplate: THandle;  WndParent: HWnd; DialogFunc: TFarProc; InitParam: LongInt): Integer;
function DialogBoxParam(Instance: THandle; TemplateName: PChar;  WndParent: HWnd; DialogFunc: TFarProc; InitParam: LongInt): Integer;
function DispatchMessage(var Msg: TMsg): LongInt;
function DlgDirList(Dlg: HWnd; PathSpec: PChar; IDListBox,  IDStaticPath: Integer; Filetype: Word): Integer;
function DlgDirListComboBox(Dlg: HWnd; PathSpec: PChar; IDComboBox, IDStaticText: Integer; Filetype: Word): Integer;
function DlgDirSelect(Dlg: HWnd; Str: PChar; IDListBox: Integer): Bool;
function DlgDirSelectEx(Dlg: HWnd; Path: PChar; cbPath: Integer;  ListBox: Integer): Bool;
function DlgDirSelectComboBox(Dlg: HWnd; Str: PChar; IDComboBox: Integer): Bool;
function DrawIcon(DC: HDC; X, Y: Integer; Icon: HIcon): Bool;
function DrawText(DC: HDC; Str: PChar; Count: Integer; var Rect: TRect;  Format: Word): Integer;
function EnableCommNotification(A: Integer; B: HWnd; C, D: Integer): Bool;
function EnableHardwareInput(EnableInput: Bool): Bool;
function EnableMenuItem(Menu: HMenu; IDEnableItem: Word; Enable: Word): Bool;
function EnableScrollBar(A: HWnd; B: Integer; C: Word): Bool;
function EnableWindow(Wnd: HWnd; Enable: Bool): Bool;
function EnumChildWindows(WndParent: HWnd; EnumFunc: TFarProc; lParam: LongInt): Bool;
function EnumClipboardFormats(Format: Word): Word;
function EnumProps(Wnd: HWnd; EnumFunc: TFarProc): Integer;
function EnumTaskWindows(Task: THandle; EnumFunc: TFarProc; lParam: LongInt): Bool;
function EnumWindows(EnumFunc: TFarProc; lParam: LongInt): Bool;
function EqualRect(var Rect1, Rect2: TRect): Bool;
function EscapeCommFunction(Cid: Integer; Func: Integer): LongInt;
function ExcludeUpdateRgn(DC: HDC; Wnd: HWnd): Integer;
function ExitWindows(Reserved: LongInt; ReturnCode: Word): Bool;
function ExitWindowsExec(Exe: PChar; Params: PChar): Bool;
function FillRect(DC: HDC; var Rect: TRect; Brush: HBrush): Integer;
function FindWindow(Classname, WindowName: PChar): HWnd;
function FlashWindow(Wnd: HWnd; Invert: Bool): Bool;
function FlushComm(Cid, Queue: Integer): Integer;
function GetAsyncKeyState(Key: Integer): Integer;
function GetClassInfo(Instance: THandle; ClassInfo: PChar; var WndClass: TWndClass): Bool;
function GetClassLong(Wnd: HWnd; Index: Integer): LongInt;
function GetClassName(Wnd: HWnd; ClassName: PChar; MaxCount: Integer): Integer;
function GetClassWord(Wnd: HWnd; Index: Integer): Word;
function GetClipboardData(Format: Word): THandle;
function GetClipboardFormatName(Format: Word; FormatName: PChar; MaxCount: Integer): Integer;
function GetCommError(Cid: Integer; var Stat: TComStat): Integer;
function GetCommEventMask(Cid, EvtMask: Integer): Word;
function GetCommState(Cid: Integer; var DCB: TDCB): Integer;
function GetDC(Wnd: HWnd): HDC;
function GetDCEx(Wnd: HWnd; Clip: HRgn; Flags: Longint): HDC;
function GetDlgCtrlID(Wnd: HWnd): Integer;
function GetDlgItem(Dlg: HWnd; IDDlgItem: Integer): HWnd;
function GetDlgItemInt(Dlg: HWnd; IDDlgItem: Integer; Translate: PBool; Signed: Bool): Word;
function GetDlgItemText(Dlg: HWnd; IDDlgItem: Integer; Str: PChar;  MaxCount: Integer): Integer;
function GetDriverModuleHandle(Driver: THandle): THandle;
function GetDriverInfo(hDriver: THandle; lpdis: PDriverInfoStruct): Bool;
function GetFreeSystemResources(SysResource: Word): Word;
function GetKeyState(VirtKey: Integer): Integer;
function GetLastActivePopup(Owner: HWnd): HWnd;
function GetMenu(Wnd: HWnd): HMenu;
function GetMenuItemCount(Menu: HMenu): Word;
function GetMenuItemID(Menu: HMenu; Pos: Integer): Word;
function GetMenuState(Menu: HMenu; Id, Flags: Word): Word;
function GetMenuString(Menu: HMenu; IDItem: Word; Str: PChar; MaxCount: Integer; Flag: Word): Integer;
function GetMessage(var Msg: TMsg; Wnd: HWnd; MsgFilterMin, MsgFilterMax: Word): Bool;
function GetNextDlgGroupItem(Dlg, Ctl: HWnd; Previous: Bool): HWnd;
function GetNextDlgTabItem(Dlg, Ctl: HWnd; Previous: Bool): HWnd;
function GetNextDriver(Driver: THandle; lParam: Longint): THandle;
function GetNextWindow(Wnd: HWnd; Flag: Word): HWnd;
function GetParent(Wnd: HWnd): HWnd;
function GetPriorityClipboardFormat(var PriorityList; Count: Integer): Integer;
function GetProp(Wnd: HWnd; Str: PChar): THandle;
function GetQueueStatus(Flags: Word): Longint;
function GetScrollPos(Wnd: HWnd; Bar: Integer): Integer;
function GetSubMenu(Menu: HMenu; Pos: Integer): HMenu;
function GetSysColor(Index: Integer): TColorRef;
function GetSystemMenu(Wnd: HWnd; bRevert: Bool): HMenu;
function GetSystemMetrics(Index: Integer): Integer;
function GetTabbedTextExtent(DC: HDC; Str: PChar; Count: Integer;  TabPostions: Integer; var TabStopPostions): LongInt;
function GetTopWindow(Wnd: HWnd): HWnd;
function GetUpdateRect(Wnd: HWnd; var Rect: TRect; Erase: Bool): Bool;
function GetUpdateRgn(Wnd: HWnd; Rgn: HRgn; Erase: Bool): Integer;
function GetWindow(Wnd: HWnd; Cmd: Word): HWnd;
function GetWindowDC(Wnd: HWnd): HDC;
function GetWindowLong(Wnd: HWnd; Index: Integer): LongInt;
function GetWindowPlacement(Wnd: HWnd; Placement: PWindowPlacement): Bool;
function GetWindowTask(Wnd: HWnd): THandle;
function GetWindowText(Wnd: HWnd; Str: PChar; MaxCount: Integer): Integer;
function GetWindowTextLength(Wnd: HWnd): Integer;
function GetWindowWord(Wnd: HWnd; Index: Integer): Word;
function GlobalAddAtom(Str: PChar): TAtom;
function GlobalDeleteAtom(AnAtom: TAtom): TAtom;
function GlobalFindAtom(Str: PChar): TAtom;
function GlobalGetAtomName(AnAtom: TAtom; Buffer: PChar; Size: Integer): Word;
function GrayString(DC: HDC; Brush: HBrush; OutputFunc: TFarProc;   Data: LongInt; Count, X, Y, Width, Height: Integer): Bool;
function HiliteMenuItem(Wnd: HWnd; Menu: HMenu; IDHilite, Hilite: Word): Bool;
function InsertMenu(Menu: HMenu; Position, Flags, IDNewItem: Word; NewItem: PChar): Bool;
function IntersectRect(var DestRect, Src1Rect, Src2Rect: TRect): Integer;
function IsCharAlpha(Chr: Char): Bool;
function IsCharAlphaNumeric(Chr: Char): Bool;
function IsCharLower(Chr: Char): Bool;
function IsCharUpper(Chr: Char): Bool;
function IsChild(WndParent, Wnd: HWnd): Bool;
function IsClipboardFormatAvailable(Format: Word): Bool;
function IsDialogMessage(Dlg: HWnd; var Msg: TMsg): Bool;
function IsDlgButtonChecked(Wnd: HWnd; IDButton: Integer): Word;
function IsIconic(Wnd: HWnd): Bool;
function IsMenu(Menu: HMenu): Boolean;
function IsRectEmpty(var Rect: TRect): Bool;
function IsWindow(Wnd: HWnd): Bool;
function IsWindowEnabled(Wnd: HWnd): Bool;
function IsWindowVisible(Wnd: HWnd): Bool;
function IsZoomed(Wnd: HWnd): Bool;
function KillTimer(Wnd: HWnd; IDEvent: Integer): Bool;
function LoadAccelerators(Instance: THandle; TableName: PChar): THandle;
function LoadBitmap(Instance: THandle; BitmapName: PChar): HBitmap;
function LoadCursor(Instance: THandle; CursorName: PChar): HCursor;
function LoadIcon(Instance: THandle; IconName: PChar): HIcon;
function LoadMenu(Instance: THandle; MenuName: PChar): HMenu;
function LoadMenuIndirect(MenuTemplate: Pointer): HMenu;
function LoadString(Instance: THandle; ID: Word; Buffer: PChar;  BufferMax: Integer): Integer;
function LockInput(h1: THandle; hwndInput: HWnd; fLock: Bool): Bool;
function LockWindowUpdate(Wnd: HWnd): Bool;
function lstrcmp(Str1, Str2: PChar): Integer;
function lstrcmpi(Str1, Str2: PChar): Integer;
function MessageBox(WndParent: HWnd; Txt, Caption: PChar; TextType: Word): Integer;
function ModifyMenu(Menu: HMenu; Position, Flags, IDNewItem: Word;  NewItem: PChar): Bool;
function OpenClipboard(Wnd: HWnd): Bool;
function OpenComm(ComName: PChar; InQueue, OutQueue: Word): Integer;
function OpenDriver(DriverName, SectionName: PChar; lParam2: Longint): THandle;
function OpenIcon(Wnd: HWnd): Bool;
function PeekMessage(var Msg: TMsg; Wnd: HWnd; MsgFilterMin,  MsgFilterMax: Word; RemoveMsg: Word): Bool;
function PostAppMessage(Task: THandle; Msg, wParam: Word; lParam: LongInt): Bool;
function PostMessage(Wnd: HWnd; Msg, wParam: Word; lParam: LongInt): Bool;
function PtInRect(var Rect: TRect; Point: TPoint): Bool;
function QuerySendMessage(h1, h2, h3: THandle; lpmsg: PMsg): Bool;
function ReadComm(Cid: Integer; Buf: PChar; Size: Integer): Integer;
function RealizePalette(DC: HDC): Word;
function RedrawWindow(Wnd: HWnd; UpdateRect: PRect; UpdateRgn: HRgn;  Flags: Word): Bool;
function RegisterClass(var WndClass: TWndClass): Bool;
function RegisterClipboardFormat(FormatName: PChar): Word;
function RegisterWindowMessage(Str: PChar): Word;
function ReleaseDC(Wnd: HWnd; DC: HDC): Integer;
function RemoveMenu(Menu: HMenu; Position, Flags: Word): Bool;
function RemoveProp(Wnd: HWnd; Str: PChar): THandle;
function ScrollDC(DC: HDC; dx, dy: Integer; var Scroll, Clip: TRect;  UpdateRgn: HRgn; UpdateRect: PRect): Bool;
function ScrollWindowEx(Wnd: HWnd; dx, dy: Integer; Scroll, Clip: PRect; UpdateRgn: HRgn; UpdateRect: PRect; Flags: Word): Integer;
function SelectPalette(DC: HDC; Palette: HPalette; ForceBackground: Bool): HPalette;
function SendDlgItemMessage(Dlg: HWnd; IDDlgItem: Integer; Msg, wParam: Word; lParam: LongInt): LongInt;
function SendDriverMessage(Driver: THandle; message: Word; lParam1,  lParam2: Longint): Longint;
function SendMessage(Wnd: HWnd; Msg, wParam: Word; lParam: LongInt): LongInt;
function SetActiveWindow(Wnd: HWnd): HWnd;
function SetCapture(Wnd: HWnd): HWnd;
function SetClassLong(Wnd: HWnd; Index: Integer; NewLong: LongInt): LongInt;
function SetClassWord(Wnd: HWnd; Index: Integer; NewWord: Word): Word;
function SetClipboardData(Format: Word; Mem: THandle): THandle;
function SetClipboardViewer(Wnd: HWnd): HWnd;
function SetCommBreak(Cid: Integer): Integer;
function SetCommEventMask(Cid: Integer; EvtMask: Word): PWord;
function SetCommState(var DCB: TDCB): Integer;
function SetCursor(Cursor: HCursor): HCursor;
function SetFocus(Wnd: HWnd): HWnd;
function SetMenu(Wnd: HWnd; Menu: HMenu): Bool;
function SetMenuItemBitmaps(Menu: HMenu; Position, Flags: Word;  BitmapUnchecked, BitmapChecked: HBitmap): Bool;
function SetMessageQueue(Msg: Integer): Bool;
function SetParent(WndChild: HWnd; WndNewParent: HWnd): HWnd;
function SetProp(Wnd: HWnd; Str: PChar; Data: THandle): Bool;
function SetScrollPos(Wnd: HWnd; Bar, Pos: Integer; Redraw: Bool): Integer;
function SetSysModalWindow(Wnd: HWnd): HWnd;
function SetTimer(Wnd: HWnd; IDEvent: Integer; Elapse: Word; TimerFunc: TFarProc): Word;
function SetWindowLong(Wnd: HWnd; Index: Integer; NewLong: LongInt): LongInt;
function SetWindowPlacement(Wnd: HWnd; Placement: PWindowPlacement): Bool;
function SetWindowsHook(FilterType: Integer; FilterFunc: TFarProc): TFarProc;
function SetWindowsHookEx(HookId: Integer; Hook: THookProc; Module, Task: THandle): HHook;
function SetWindowWord(Wnd: HWnd; Index: Integer; NewWord: Word): Word;
function ShowCursor(Show: Bool): Integer;
function ShowWindow(Wnd: HWnd; CmdShow: Integer): Bool;
function SubtractRect(var A, B, C: TRect): Bool;
function SwapMouseButton(Swap: Bool): Bool;
function SystemParametersInfo(A, B: Word; C: Pointer; D: Word): Bool;
function TabbedTextOut(HC: HDC; X, Y: Integer; Str: PChar; Count: Integer; TabPositions: Integer; var TabStopPositions; TabOrigin: Integer): LongInt;
function TrackPopupMenu(Menu: HMenu; Flags: Word; x, y, Reserved: Integer; Wnd: HWnd; Reserved: Pointer): Bool;
function TranslateAccelerator(Wnd: HWnd; AccTable: THandle; var Msg: TMsg): Integer;
function TranslateMDISysAccel(Wnd: HWnd; var Msg: TMsg): Bool;
function TranslateMessage(var Msg: TMsg): Bool;
function TransmitCommChar(Cid: Integer; Chr: Char): Integer;
function UngetCommChar(Cid: Integer; Chr: Char): Integer;
function UnhookWindowsHook(Hook: Integer; HookFunc: TFarProc): Bool;
function UnhookWindowsHookEx(Hook: HHook): Bool;
function UnionRect(var DestRect, Src1Rect, Src2Rect: TRect): Integer;
function UnregisterClass(ClassName: PChar; Instance: THandle): Bool;
function WindowFromPoint(Point: TPoint): HWnd;
function WinHelp(Wnd: HWnd; HelpFile: PChar; Command: Word; Data: LongInt): Bool;
function WNetAddConnection(lpszNetPath, lpszPassword, lpszLocalName: PChar): Word;
function WNetCancelConnection(lpszName: PChar; tForce: Bool): Word;
function WNetGetConnection(lpszLocalName, lpszRemoteName: PChar;  cbBufferSize: PWord): Word;
function WriteComm(Cid: Integer; Buf: PChar; Size: Integer): Integer;
function GetBValue(RGB: LongInt): Byte;
function GetGValue(RGB: LongInt): Byte;
function GetRValue(RGB: LongInt): Byte;
function GlobalDiscard(Mem: THandle): THandle;
function HiByte(A: Word): Byte;
function HiWord(A: LongInt): Word;
function LoByte(A: Word): Byte;
function LocalDiscard(Mem: THandle): THandle;
function LockData(Dummy: Integer): THandle;
function LoWord(A: LongInt): Word;
function MakeLong(A, B: Word): LongInt;
function MakeLP(Sel, Off: Word): Pointer;
function OffsetOf(lp: Pointer): Word;
function PaletteIndex(PaletteIndex: Integer): TColorRef;
function PaletteRGB(R: Byte; G: Byte; B: Byte): LongInt;
function RGB(R: Byte; G: Byte; B: Byte): LongInt;
function SelectorOf(lp: Pointer): THandle;
function UnlockData(Dummy: Integer): THandle;
function UnlockResource(ResData: THandle): Bool;
function TFM_Ext_Proc(Handle: HWnd; Msg: Word; lParam: Longint): Longint;
function TFM_UnDelete_Proc(Parent: HWnd; Dir: PChar): Longint;
function DdeAccessData(Data: HDDEData; DataSize: PLongint): Pointer;
function DdeCmpStringHandles(hsz1, hsz2: HSZ): Integer;
function DdeDisconnect(Conv: HConv): Bool;
function DdeDisconnectList(ConvList: HConvList): Bool;
function DdeEnableCallback(Inst: Longint; Conv: HConv; Cmd: Word): Bool;
function DdeFreeDataHandle(Data: HDDEData): Bool;
function DdeFreeStringHandle(Inst: Longint; HSZ: HSZ): Bool;
function DdeGetLastError(Inst: Longint): Word;
function DdeInitialize(var Inst: Longint; Callback: TCallback; Cmd, Res: Longint): Word;
function DdeKeepStringHandle(Inst: Longint; HSZ: HSZ): Bool;
function DdePostAdvise(Inst: Longint; Topic, Item: HSZ): Bool;
function DdeQueryNextServer(ConvList: HConvList; ConvPrev: HConv): HConv;
function DdeReconnect(Conv: HConv): HConv;
function DdeSetUserHandle(Conv: HConv; ID, User: Longint): Bool;
function DdeUnaccessData(Data: HDDEData): Bool;
function DdeUninitialize(Inst: Longint): Bool;
function GlobalAllocPtr(Flags: Word; Bytes: Longint): Pointer;
function GlobalFreePtr(P: Pointer): THandle;
function GlobalPtrHandle(P: Pointer): THandle;
function GlobalReAllocPtr(P: Pointer; Bytes: Longint; Flags: Word): Pointer;
function SetPrnFont(var F: Text; Font: HFont): HFont;

/*procedure */
procedure Name();
procedure SetMode(Mode: Word);
procedure Flip(N: Integer);
procedure Flop(N: Integer);
procedure Flip();
procedure FillWord(var Dest; Count: Word; Data: Word);
procedure IntProc(Flags, CS, IP, AX, BX, CX, DX, SI, DI, DS, ES, BP: Word);
procedure Method(Param1, Param2: Integer);
procedure MethodName (<parameter list>);
procedure Name();
procedure Method(<parameter list>);
procedure Method(param1, Param2: Integer);
procedure Append(var f: Text);
procedure Arc(X,Y; Integer; StAngle, EndAngle, Radius; Word);
procedure Assign(var f; String);
procedure AssignCrt(var f: Text);
procedure Bar(x1, y1, x2, y2: Integer);
procedure Bar3D(x1, y1, x2, y2: Integer; Depth: Word; Top: Boolean);
procedure BlockRead(var F: File; var Buf; Count: Word [; var Result: Word]);
procedure BlockWrite(var f: File; var Buf; Count: Word [; var Result: Word]);
procedure ChDir(S: String);
procedure Circle(X,Y: Integer; Radius: Word);
procedure ClearDevice();
procedure ClearViewPort();
procedure Close(var F);
procedure CloseGraph();
procedure ClrEol();
procedure ClrScr();
procedure CursorTo(X, Y: Integer);
procedure Dec(var X[ ; N: Longint]);
procedure Delete(var S: String; Index: Integer; Count:Integer);
procedure DetectGraph(var GraphDriver, GraphMode: Integer);
procedure Dispose(var P: Pointer [ , Destructor ]);
procedure DoneWinCrt();
procedure DrawPoly(NumPoints: Word; var PolyPoints);
procedure Ellipse(X, Y: Integer; StAngle, EndAngle: Word; XRadius, YRadius: Word);
procedure Erase(var F);
procedure Exclude(var S: set of T;I:T);
procedure Exit();
procedure Fail();
procedure FillChar(var X; Count: Word; value);
procedure FillEllipse(X, Y: Integer;
procedure FillPoly(NumPoints: Word; var PolyPoints);
procedure FindFirst(Path: PChar; Attr: Word; var F: TSearchRec);
procedure FindNext(var F: TSearchRec);
procedure FloodFill(X, Y: Integer; Border: Word);
procedure Flush(var F: Text);
procedure FreeMem(var P: Pointer; Size: Word);
procedure FSplit(Path: PathStr; var Dir: DirStr; var Name: NameStr;
procedure GetArcCoords(var ArcCoords: _ArcCoordsType_);
procedure GetAspectRatio(var Xasp, Yasp: Word);
procedure GetCBreak(var Break: Boolean);
procedure GetDate(var Year, Month, Day, DayOfWeek: Word);
procedure GetDir(D: Byte; var S: String);
procedure GetFAttr(var F; var Attr: Word);
procedure GetFillPattern(var FillPattern: FillPatternType);
procedure GetFillSettings(var FillInfo: FillSettingsType);
procedure GetFTime(var F; var Time: Longint);
procedure GetImage(x1, y1, x2, y2: Integer; var BitMap);
procedure GetIntVec(IntNo: Byte; var Vector: Pointer);
procedure GetLineSettings(var LineInfo: LineSettingsType);
procedure GetMem(var P: Pointer; Size: Word);
procedure GetModeRange(GraphDriver:Integer; var LoMode, HiMode:Integer);
procedure GetPalette(var Palette: PaletteType);
procedure GetTextSettings(var TextInfo: TextSettingsType);
procedure GetTime(var Hour, Minute, Second, Sec100: Word);
procedure GetVerify(var Verify: Boolean);
procedure GetViewSettings(var ViewPort: ViewPortType);
procedure GotoXY(X, Y: Byte);
procedure GraphDefaults();
procedure Halt(Exitcode: Word);
procedure HighVideo;
procedure Inc(var X [ ; N: Longint ]);
procedure Include(var S: set of T; I:T);
procedure InitGraph(var GraphDriver:Integer; var GraphMode: Integer;
procedure InitWinCrt();
procedure Insert(Source: String; var S: String; Index: Integer);
procedure InsLine();
procedure Intr(IntNo: Byte; var Regs: TRegisters);
procedure Keep(ExitCode: Word);
procedure Abstract();
procedure DoneMemory();
procedure FreeMultiSel(P: PMultiSelRec);
procedure InitMemory();
procedure RegisterODialogs();
procedure RegisterOStdWnds();
procedure RegisterOWindows();
procedure RegisterType(var S: TStreamRec);
procedure RegisterValidate();
procedure RestoreMemory();
procedure Line(x1, y1, x2, y2: Integer);
procedure LineRel(Dx, Dy: Integer);
procedure LineTo(X, Y: Integer);
procedure LowVideo();
procedure Mark(var p: pointer);
procedure MkDir(S: String);
procedure Move(var Source, Dest; Count: Word);
procedure MoveRel(Dx, Dy: Integer);
procedure MoveTo(X, Y: Integer);
procedure MsDos(var Regs: TRegisters);
procedure New(var P: Pointer [ , Init: Constructor ]);
procedure NormVideo();
procedure NoSound();
procedure OutText(TextString: string);
procedure OutTextXY(X,Y: Integer; TextString: string);
procedure OvrClearBuf();
procedure OvrInit(FileName:string );
procedure OvrInitEMS();
procedure OvrSetBuf(Size: Longint);
procedure OvrSetRetry(Size : Longint);
procedure PackTime(var T: DateTime; var Time: Longint);
procedure PieSlice(X, Y: Integer; StAngle, EndAngle, Radius: Word);
procedure PutImage(X, Y: Integer; var BitMap; BitBlt: Word);
procedure PutPixel(X, Y: Integer; Pixel: Word);
procedure Randomize();
procedure Readln([ var F: Text; ] V1 [, V2, ...,Vn ]);
procedure Rectangle(x1, y1, x2, y2: Integer);
procedure Release(var p: pointer);
procedure Remove(Dir: PChar);
procedure Rename(var F; Newname);
procedure Reset(var F [: File; Recsize: Word ] );
procedure RestoreCrtMode();
procedure Rewrite(var F: File [; Recsize: Word ] );
procedure RmDir(S: String);
procedure RunError(Errorcode: Byte);
procedure ScrollTo(X, Y: Integer);
procedure Sector(x, y: Integer; StAngle,EndAngle, XRadius, YRadius: Word);
procedure Seek(var F; N: Longint);
procedure SetActivePage(Page: Word);
procedure SetAllPalette(var Palette);
procedure SetBkColor(ColorNum: Word);
procedure SetCBreak(Break: Boolean);
procedure SetColor(Color: Word);
procedure SetDate(Year, Month, Day: Word);
procedure SetFAttr(var F; Attr: Word);
procedure SetFillPattern(Pattern: FillPatternType; Color: Word);
procedure SetFillStyle(Pattern: Word; Color: Word);
procedure SetFTime(var F; Time: Longint);
procedure SetGraphBufSize(BufSize: Word);
procedure SetGraphMode(Mode: Integer);
procedure SetIntVec(IntNo: Byte; Vector: Pointer);
procedure SetLineStyle(LineStyle: Word; Pattern: Word; Thickness: Word);
procedure SetPalette(ColorNum: Word; Color: Shortint);
procedure SetRGBPalette(ColorNum, RedValue, GreenValue, BlueValue: Integer);
procedure SetTextJustify(Horiz, Vert: Word);
procedure SetTextStyle(Font, Direction: Word; CharSize: Word);
procedure SetTime(Hour, Minute, Second, Sec100: Word);
procedure SetTextBuf(var F: Text; var Buf [ ; Size:   Word ] );
procedure SetUserCharSize(MultX, DivX, MultY, DivY: Word);
procedure SetVerify(Verify: Boolean);
procedure SetViewPort(x1, y1, x2, y2: Integer; Clip: Boolean);
procedure SetVisualPage(Page: Word);
procedure SetWriteMode(WriteMode: Integer);
procedure Sound(Hz: Word);
procedure Str(X [: Width [: Decimals ]]; var S:string);
procedure SwapVectors();
procedure TextBackground(Color: Byte);
procedure TextColor(Color: Byte);
procedure TextMode(Mode: Integer);
procedure TrackCursor();
procedure Truncate(var F);
procedure UnpackTime(Time: Longint; var DT: TDateTime);
procedure Val(S; var V; var Code: Integer);
procedure Window(X1, Y1, X2, Y2: Byte);
procedure WriteBuf(Buffer: PChar; Count: Word);
procedure WriteChar(Ch: Char);
procedure Writeln([ var F: Text; ] P1 [, P2, ...,Pn ] );
procedure DefaultError(ErrorCode: Integer);
procedure FarProc();
procedure NearProc();
procedure FarProc();
procedure WriteHexWord(w: Word);
procedure StrDispose(S: PChar);
procedure Error(ErrorCode: Integer);
procedure InitApplication();
procedure InitInstance();
procedure InitMainWindow();
procedure MessageLoop();
procedure Run();
procedure SetKBHandler(AWindowsObject: PWindowsObject);
procedure Flush();
procedure Read(var Buf; Count: Word);
procedure Seek(Pos: Longint);
procedure Truncate();
procedure Write(var Buf; Count: Word);
procedure BNClicked(var Msg: TMessage);
procedure Check();
procedure SetCheck(CheckFlag: Word);
procedure Store(var S: TStream);
procedure Toggle();
procedure Uncheck();
procedure AtDelete(Index: Integer);
procedure AtFree(Index: Integer);
procedure AtInsert(Index: Integer; Item: Pointer);
procedure AtPut(Index: Integer; Item: Pointer);
procedure Delete(Item: Pointer);
procedure DeleteAll();
procedure Error(Code, Info: Integer);
procedure ForEach(Action: Pointer);
procedure PrintItem(Item: Pointer);
procedure Free(Item: Pointer);
procedure FreeAll();
procedure FreeItem(Item: Pointer);
procedure Insert(Item: Pointer);
procedure Pack();
procedure PutItem(var S: TStream; Item: Pointer);
procedure SetLimit(ALimit: Integer);
procedure Store(var S: TStream);
procedure Clear();
procedure HideList();
procedure SetText(Str: PChar);
procedure SetupWindow();
procedure ShowList();
procedure Store(var S: TStream);
procedure DefWndProc(var Msg: TMessage);
procedure WMPaint(var Msg: TMessage);
procedure Cancel(var Msg: TMessage);
procedure DefWndProc(var Msg: TMessage);
procedure Destroy();
procedure EndDlg(ARetValue: Integer);
procedure EnterCancel(var Msg: TMessage);
procedure EnterOk(var Msg: TMessage);
procedure Ok(var Msg: TMessage);
procedure SetName(AName: PChar);
procedure Store(var S: TStream);
procedure WMClose(var Msg: TMessage);
procedure WMInitDialog(var Msg: TMessage);
procedure WMPostInvalid(var Msg: TMessage);
procedure WMQueryEndSession(var Msg: TMessage);
procedure Cancel(var Msg: TMessage);
procedure GetWindowClass(var AWndClass: TWndClass);
procedure Ok(var Msg: TMessage);
procedure Read(var Buf; Count: Word);
procedure Seek(Pos: Longint);
procedure Truncate();
procedure Write(var Buf; Count: Word);
procedure CMEditClear(var Msg: TMessage);
procedure Copy();
procedure CMEditCopy(var Msg: TMessage);
procedure Cut();
procedure CMEditCut(var Msg: TMessage);
procedure CMEditDelete(var Msg: TMessage);
procedure GetSubText(ATextString: PChar; StartPos, EndPos: Integer);
procedure GetSelection(var StartPos, EndPos: Integer);
procedure Insert(ATextString: PChar);
procedure Paste();
procedure CMEditPaste(var Msg: TMessage);
procedure ClearModify();
procedure Search(StartPos: Integer; AText: PChar; CaseSensitive: Boolean): Integer;
procedure Scroll(HorizontalUnit, VerticalUnit: Integer);
procedure Undo();
procedure CMEditUndo(var Msg: TMessage);
procedure SetupWindow();
procedure SetValidator(AValid: PValidator);
procedure Store(var S: TStream);
procedure WMChar(var Msg: TMessage);
procedure WMGetDlgCode(var Msg: TMessage);
procedure WMKeyDown(var Msg: TMessage);
procedure WMKillFocus(var Msg: TMessage);
procedure BeginDocument(StartPage, EndPage: Integer; Flags: Word);
procedure PrintPage(Page: Word; var Rect: TRect; Flags: Word);
procedure SetPrintParams(ADC: HDC; ASize: TPoint);
procedure CMEditFind(var Msg: TMessage);
procedure CMEditFindNext(var Msg: TMessage);
procedure CMEditReplace(var Msg: TMessage);
procedure Store(var S: TStream);
procedure SetupWindow();
procedure WMSetFocus(var Msg: TMessage);
procedure WMSize(var Msg: TMessage);
procedure Read(var Buf; Count: Word);
procedure Seek(Pos: Longint);
procedure Truncate();
procedure Write(var Buf; Count: Word);
procedure FDDirLB(var Msg: TMessage);
procedure FDFileLB(var Msg: TMessage);
procedure GetFileName(ABuffer: PChar; ABufSize: Integer);
procedure GetMask(ABuffer: PChar; ABufSize: Integer);
procedure Ok(var Msg: TMessage);
procedure SetFileName(AFileName: PChar; ABufSize: Integer);
procedure SetMask(AMask: PChar; ABufSize: Integer);
procedure SetupWindow();
procedure SetValues(FileStr: PChar);
procedure UpdateItems();
procedure New();
procedure CMFileNew(var Msg: TMessage);
procedure CMFileSave(var Msg: TMessage);
procedure CMFileSaveAs(var Msg: TMessage);
procedure Open();
procedure CMFileOpen(var Msg: TMessage);
procedure NewFile();
procedure Read();
procedure ReadFrom();
procedure ReplaceWith(AFileName: PChar);
procedure Save();
procedure SaveAs();
procedure SetFileName(AFileName: PChar);
procedure SetupWindow; virtual;
procedure Store(var S: TStream);
procedure Write();
procedure WriteTo();
procedure Store(var S: TStream);
procedure SelectionChanged(ControlId: Integer);
procedure Store(var S: TStream);
procedure CreateTextBuffer(ATextSize: Integer);
procedure GetCaption(ABuffer: PChar; ABufSize: Integer);
procedure GetDefText(ABuffer: PChar; ABufSize: Integer);
procedure GetPrompt(ABuffer: PChar; ABufSize: Integer);
procedure GetText(ABuffer: PChar; ABufSize: Integer);
procedure Ok(var Msg: TMessage);
procedure SetCaption(ACaption: PChar);
procedure SetDefText(ADefText: PChar);
procedure SetPrompt(APrompt: PChar);
procedure SetupWindow();
procedure UpdateTextBuffer();
procedure ClearList();
procedure ArrangeIcons();
procedure CascadeChildren();
procedure Store(var S: TStream);
procedure TileChildren();
procedure WMPaint(var Msg: TMessage);
procedure ArrangeIcons();
procedure CMArrangeIcons(var Msg: TMessage);
procedure CascadeChildren();
procedure CMCascadeChildren(var Msg: TMessage);
procedure CMCloseChildren(var Msg: TMessage);
procedure CloseChildren();
procedure CMCreateChild(var Msg: TMessage);
procedure DefWndProc(var Msg: TMessage);
procedure GetWindowClass(var AWndClass: TWndClass);
procedure InitClientWindow();
procedure SetupWindow();
procedure Store(var S: TStream);
procedure TileChildren();
procedure CMTileChildren(var Msg: TMessage);
procedure Free();
procedure ClearDevice();
procedure Configure(Window: PWindowsObject);
procedure ReportError(PrintOut: PPrintOut);
procedure SetDevice(ADevice, ADriver, APort: PChar);
procedure Setup(Parent: PWindowsObject);
procedure SetupWindow();
procedure WMCommand(var Msg: TMessage);
procedure BeginDocument(StartPage, EndPage: Integer; Flag: Word);
procedure BeginPrinting();
procedure EndDocument();
procedure EndPrinting();
procedure PrintPage(Page: Word; var Rect: TRect; Flags: Word);
procedure SetPrintParams(ADC: HDC; ASize: TPoint): virtual;
procedure Cancel(var Msg: TMessage);
procedure IDSetup(var Msg: TMessage);
procedure TransferData(TransferFlag: Word);
procedure IDSetup(var Msg: TMessage);
procedure SetupWindow();
procedure TransferData(Direction: Word);
procedure Error();
procedure Store(var S: TStream);
procedure Error();
procedure Store(var S: TStream);
procedure GetRange(var LoVal, HiVal: Integer);
procedure SBBottom(var Msg: TMessage);
procedure SBLineDown(var Msg: TMessage);
procedure SBLineUp(var Msg: TMessage);
procedure SBPageDown(var Msg: TMessage);
procedure SBPageUp(var Msg: TMessage);
procedure SBThumbPosition(var Msg: TMessage);
procedure SBThumbTrack(var Msg: TMessage);
procedure SBTop(var Msg: TMessage);
procedure SetPosition(ThumbPos: Integer);
procedure SetRange(LoVal, HiVal: Integer);
procedure SetupWindow();
procedure Store(var S: TStream);
procedure AutoScroll();
procedure BeginView(PaintDC: HDC; var PaintInfo: TPaintStruct);
procedure EndView();
procedure HScroll(ScrollRequest: Word; ThumbPos: Integer);
procedure ScrollBy(Dx, Dy: Longint);
procedure ScrollTo(X, Y: Longint);
procedure SetPageSize();
procedure SetRange(TheXRange, TheYRange: Longint);
procedure SetSBarRange();
procedure SetUnits(TheXUnit, TheYUnit: Longint);
procedure Store(var S: TStream);
procedure VScroll(ScrollRequest: Word; ThumbPos: Integer);
procedure Insert(Item: Pointer);
procedure Store(var S: TStream);
procedure Clear();
procedure Store(var S: TStream);
procedure SetText(ATextString: PChar);
procedure Error();
procedure NewStringList(AStrings: PStringCollection);
procedure Store(var S: TStream);
procedure CopyFrom(var S: TStream; Count: Longint);
procedure Error(Code, Info: Integer);
procedure Flush();
procedure Put(P: PObject);
procedure Read(var Buf; Count: Word);
procedure Reset();
procedure Seek(Pos: Longint);
procedure Truncate();
procedure Write(var Buf; Count: Word);
procedure WriteStr(P: PString);
procedure FreeItem(Item: Pointer);
procedure PutItem(var S: TStream; Item: Pointer);
procedure Error();
procedure Store(var S: TStream);
procedure DefWndProc(var Msg: TMessage);
procedure FocusChild();
procedure GetWindowClass(var AWndClass: TWndClass);
procedure Paint(PaintDC: HDC; var PaintInfo: TPaintStruct);
procedure SetCaption(ATitle: PChar);
procedure SetupWindow();
procedure Store(var S: TStream);
procedure UpdateFocusChild();
procedure WMActivate( var Msg: TMessage);
procedure WMCreate(var Msg: TMessage);
procedure WMHScroll(var Msg: TMessage);
procedure WMLButtonDown(var Msg: TMessage);
procedure WMMDIActivate(var Msg: TMessage);
procedure WMMove(var Msg: TMsg);
procedure WMPaint(var Msg: TMessage);
procedure WMSize(var Msg: TMessage);
procedure WMSysCommand(var Msg: TMessage);
procedure WMVScroll(var Msg: TMessage);
procedure AddChild(AChild: PWindowsObject);
procedure CloseWindow();
procedure CMExit(var Msg:TMessage);
procedure DefChildProc(var Msg: TMessage);
procedure DefCommandProc(var Msg: TMessage);
procedure DefNotificationProc(var Msg: TMessage);
procedure DefWndProc(var Msg: TMessage);
procedure Destroy();
procedure DisableAutoCreate();
procedure DisableTransfer();
procedure DispatchScroll(var Msg: TMessage);
procedure EnableAutoCreate();
procedure EnableKBHandler();
procedure EnableTransfer();
procedure Focus();
procedure ForEach(Action: Pointer);
procedure CheckAllBoxes();
procedure GetChildren(var S: TStream);
procedure GetWindowClass(var AWndClass:TWndClass);
procedure PutChildren(var S: TStream);
procedure RemoveChild(AChild: PWindowsObject);
procedure SetFlags(Mask: Byte; OnOff: Boolean);
procedure SetupWindow();
procedure Show(ShowCmd: Integer);
procedure Store(var S: TStream);
procedure TransferData(Direction: Word);
procedure WMActivate(var Msg: TMessage);
procedure WMClose(var Msg: TMessage);
procedure WMCommand(var Msg: TMessage);
procedure WMDestroy(var Msg: TMessage);
procedure WMHScroll(var Msg: TMessage);
procedure WMNCDestroy(var Msg: TMessage);
procedure WMQueryEndSession(var Msg: TMsg);
procedure WMVScroll(var Msg: TMessage);
procedure PutChildPtr(var S: TStream; var P: PWindowsObject);
procedure PutSiblingPtr(var S: TStream; var P: PWindowsObject);
procedure GetSiblingPtr(var S: TStream; var P:);
procedure GetChildPtr(var S: TStream; var P);
procedure PrintPage(Page: Word; var Rect: TRect; Flags: Word);
procedure AnsiToOemBuff(AnsiStr, OemStr: PChar; Length: Integer);
procedure CloseSound();
procedure DebugBreak();
procedure DirectedYield(Task: TTask);
procedure DOS3Call();
procedure FatalAppExit(Action: Word; MessageText: PChar);
procedure FatalExit(Code: Integer);
procedure FreeLibrary(LibModule: THandle);
procedure FreeProcInstance(Proc: TFarProc);
procedure GetCodeInfo(Proc: TFarProc; SegInfo: Pointer);
procedure GlobalFix(Mem: THandle);
procedure GlobalNotify(NotifyProc: TFarProc);
procedure hmemcpy(p1, p2: Pointer; L: Longint);
procedure LimitEmsPages(Kbytes: LongInt);
procedure LogError(Err: Word; Info: Pointer);
procedure LogParamError(Err: Word; fn: TFarProc; Param: Pointer);
procedure NetBIOSCall();
procedure OemToAnsiBuff(OemStr, AnsiStr: PChar; Length: Integer);
procedure OutputDebugString(OutputString: PChar);
procedure SwapRecording(Flag: Word);
procedure SwitchStackBack();
procedure SwitchStackTo(StackSegment, StackPointer, StackTop: Word);
procedure Throw(var CatchBuf: TCatchBuf; ThrowBack: Integer);
procedure ValidateCodeSegments();
procedure ValidateFreeSpaces();
procedure LZClose(LZFile: Integer);
procedure LZDone();
procedure AnimatePalette(Palette: HPalette; StartIndex,	NumEntries: Word; var PaletteColors);
procedure LineDDA(X1, Y1, X2, Y2: Integer; LineFunc: TFarProc;
procedure PlayMetaFileRecord(DC: HDC; var HandleTable: THandleTable;
procedure SetRectRgn(Rgn: HRgn; X1, Y1, X2, Y2: Integer);
procedure TerminateApp(hTask: THandle; wFlags: Word);
procedure FreeAllGDIMem();
procedure FreeAllMem();
procedure FreeAllUserMem();
procedure UnAllocDiskSpace(wDrive: Word);
procedure UnAllocFileHandles();
procedure DragAcceptFiles(Wnd: HWnd; Accept: Bool);
procedure DragFinish(Drop: THandle);
procedure AdjustWindowRect(var Rect: TRect; Style: LongInt; Menu: Bool);
procedure AdjustWindowRectEx(var Rect: TRect; Style: LongInt; Menu: Bool; ExtStyle: LongInt);
procedure BringWindowToTop(Wnd: HWnd);
procedure CheckDlgButton(Dlg: HWnd; IDButton: Integer; Check: Word);
procedure CheckRadioButton(Dlg: HWnd; IDFirstButton, IDLastButton, IDCheckButton: Integer);
procedure ClientToScreen(Wnd: HWnd; var Point: TPoint);
procedure ClipCursor(Rect: PRect);
procedure CloseWindow(Wnd: HWnd);
procedure CopyRect(var DestRect, SourceRect: TRect);
procedure CreateCaret(Wnd: HWnd; Bitmap: HBitmap; Width, Height: Integer);
procedure CreateCursor(Instance: THandle; Xhotspot, Yhotspot, Width, Height: Integer; ANDbitPlane, XORbitPlane: Pointer):HCursor;
procedure DestroyCaret();
procedure DrawFocusRect(DC: HDC; var Rect: TRect);
procedure DrawMenuBar(Wnd: HWnd);
procedure EndDeferWindowPos(WinPosInfo: THandle);
procedure EndDialog(Dlg: HWnd; Result: Integer);
procedure EndPaint(Wnd: HWnd; var Paint: TPaintStruct);
procedure FrameRect(DC: HDC; var Rect: TRect; Brush: HBrush);
procedure GetCaretPos(var Point: TPoint);
procedure GetClientRect(Wnd: HWnd; var Rect: TRect);
procedure GetClipCursor(var Rect: TRect);
procedure GetCursorPos(var Point: TPoint);
procedure GetKeyboardState(var KeyState: TKeyboardState);
procedure GetScrollRange(Wnd: HWnd; Bar: Integer; var MinPos, MaxPos: Integer);
procedure GetWindowRect(Wnd: HWnd; var Rect: TRect);
procedure HideCaret(Wnd: HWnd);
procedure InflateRect(var Rect: TRect; X, Y: Integer);
procedure InvalidateRect(Wnd: HWnd; Rect: PRect; Erase: Bool);
procedure InvalidateRgn(Wnd: HWnd; Rgn: HRgn; Erase: Bool);
procedure InvertRect(DC: HDC; var Rect: TRect);
procedure MapDialogRect(Dlg: HWnd; var Rect: TRect);
procedure MessageBeep(BeepType: Word);
procedure MapWindowPoints(FromWnd, ToWnd: HWnd; var Point; Count: Word);
procedure MoveWindow(Wnd: HWnd; X, Y, Width, Height: Integer; Repaint: Bool);
procedure OffsetRect(var Rect: TRect; X, Y: Integer);
procedure PostQuitMessage(ExitCode: Integer);
procedure ReleaseCapture();
procedure ReplyMessage(Reply: LongInt);
procedure ScreenToClient(Wnd: HWnd; var Point: TPoint);
procedure ScrollWindow(Wnd: HWnd; XAmount, YAmount: Integer; Rect: PRect; ClipRect: PRect);
procedure SetCaretBlinkTime(MSeconds: Word);
procedure SetCaretPos(X, Y: Integer);
procedure SetCursorPos(X, Y: Integer);
procedure SetDlgItemInt(Dlg: HWnd; IDDlgItem: Integer; Value: Word;  Signed: Bool);
procedure SetDlgItemText(Dlg: HWnd; IDDlgItem: Integer; Str: PChar);
procedure SetDoubleClickTime(Count: Word);
procedure SetKeyboardState(var KeyState: TKeyboardState);
procedure SetRect(var Rect: TRect; X1, Y1, X2, Y2: Integer);
procedure SetRectEmpty(var Rect: TRect);
procedure SetScrollRange(Wnd: HWnd; Bar, MinPos, MaxPos: Integer; Redraw: Bool);
procedure SetSysColors(Changes: Integer; var SysColor; var ColorValues);
procedure SetWindowPos(Wnd: HWnd; WndInsertAfter: HWnd; X, Y, cx, cy: Integer; Flags: Word);
procedure SetWindowText(Wnd: HWnd; Str: PChar);
procedure ShowCaret(Wnd: HWnd);
procedure ShowOwnedPopups(Wnd: HWnd; Show: Bool);
procedure ShowScrollBar(Wnd: HWnd; Bar: Word; Show: Bool);
procedure UpdateWindow(Wnd: HWnd);
procedure ValidateRect(Wnd: HWnd; Rect: PRect);
procedure ValidateRgn(Wnd: HWnd; Rgn: HRgn);
procedure WaitMessage();
procedure AbortPrn(var F: Text);
procedure AssignPrn(var F: Text;
procedure TitlePrn(var F: Text; Title: PChar);
procedure MyStreamErrorProc(var S: TStream);
